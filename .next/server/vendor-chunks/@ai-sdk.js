"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ai-sdk";
exports.ids = ["vendor-chunks/@ai-sdk"];
exports.modules = {

/***/ "(rsc)/./node_modules/@ai-sdk/anthropic/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@ai-sdk/anthropic/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anthropic: () => (/* binding */ anthropic),\n/* harmony export */   createAnthropic: () => (/* binding */ createAnthropic)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/index.js\");\n// src/anthropic-provider.ts\n\n\n\n// src/anthropic-messages-language-model.ts\n\n\n\n\n// src/anthropic-error.ts\n\n\nvar anthropicErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n});\nvar anthropicFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/anthropic-messages-options.ts\n\nvar anthropicFilePartProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Enable citations for this document\n     */\n    enabled: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean()\n  }).optional(),\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar anthropicProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  sendReasoning: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"enabled\"), zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"disabled\")]),\n    budgetTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n  }).optional(),\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\n\n// src/anthropic-prepare-tools.ts\n\n\n// src/get-cache-control.ts\nfunction getCacheControl(providerMetadata) {\n  var _a;\n  const anthropic2 = providerMetadata == null ? void 0 : providerMetadata.anthropic;\n  const cacheControlValue = (_a = anthropic2 == null ? void 0 : anthropic2.cacheControl) != null ? _a : anthropic2 == null ? void 0 : anthropic2.cache_control;\n  return cacheControlValue;\n}\n\n// src/tool/web-search_20250305.ts\n\n\nvar webSearch_20250305ArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Maximum number of web searches Claude can perform during the conversation.\n   */\n  maxUses: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Optional list of domains that Claude is allowed to search.\n   */\n  allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * Optional list of domains that Claude should avoid when searching.\n   */\n  blockedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * Optional user location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearch_20250305OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    pageAge: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    encryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n);\nvar factory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.web_search_20250305\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  outputSchema: webSearch_20250305OutputSchema\n});\nvar webSearch_20250305 = (args = {}) => {\n  return factory(args);\n};\n\n// src/anthropic-prepare-tools.ts\nfunction isWebSearchTool(tool) {\n  return typeof tool === \"object\" && tool !== null && \"type\" in tool && tool.type === \"web_search_20250305\";\n}\nfunction prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  const betas = /* @__PURE__ */ new Set();\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n  }\n  const anthropicTools2 = [];\n  for (const tool of tools) {\n    if (isWebSearchTool(tool)) {\n      anthropicTools2.push(tool);\n      continue;\n    }\n    switch (tool.type) {\n      case \"function\":\n        const cacheControl = getCacheControl(tool.providerOptions);\n        anthropicTools2.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl\n        });\n        break;\n      case \"provider-defined\":\n        switch (tool.id) {\n          case \"anthropic.computer_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20250124\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.computer_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20241022\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.text_editor_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20250124\"\n            });\n            break;\n          case \"anthropic.text_editor_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20241022\"\n            });\n            break;\n          case \"anthropic.text_editor_20250429\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_based_edit_tool\",\n              type: \"text_editor_20250429\"\n            });\n            break;\n          case \"anthropic.bash_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20250124\"\n            });\n            break;\n          case \"anthropic.bash_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20241022\"\n            });\n            break;\n          case \"anthropic.web_search_20250305\": {\n            const args = webSearch_20250305ArgsSchema.parse(tool.args);\n            anthropicTools2.push({\n              type: \"web_search_20250305\",\n              name: \"web_search\",\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"anthropic.code_execution_20250522\": {\n            betas.add(\"code-execution-2025-05-22\");\n            anthropicTools2.push({\n              type: \"code_execution_20250522\",\n              name: \"code_execution\"\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools2,\n      toolChoice: disableParallelToolUse ? { type: \"auto\", disable_parallel_tool_use: disableParallelToolUse } : void 0,\n      toolWarnings,\n      betas\n    };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"auto\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"required\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"any\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"none\":\n      return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n    case \"tool\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"tool\",\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/convert-to-anthropic-messages-prompt.ts\n\n\n\n// src/tool/code-execution_20250522.ts\n\n\nvar codeExecution_20250522OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n  stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar factory2 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.code_execution_20250522\",\n  name: \"code_execution\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  outputSchema: codeExecution_20250522OutputSchema\n});\nvar codeExecution_20250522 = (args = {}) => {\n  return factory2(args);\n};\n\n// src/convert-to-anthropic-messages-prompt.ts\nfunction convertToString(data) {\n  if (typeof data === \"string\") {\n    return Buffer.from(data, \"base64\").toString(\"utf-8\");\n  }\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n  if (data instanceof URL) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n      functionality: \"URL-based text documents are not supported for citations\"\n    });\n  }\n  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`\n  });\n}\nasync function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings\n}) {\n  var _a, _b, _c, _d, _e;\n  const betas = /* @__PURE__ */ new Set();\n  const blocks = groupIntoBlocks(prompt);\n  let system = void 0;\n  const messages = [];\n  async function shouldEnableCitations(providerMetadata) {\n    var _a2, _b2;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return (_b2 = (_a2 = anthropicOptions == null ? void 0 : anthropicOptions.citations) == null ? void 0 : _a2.enabled) != null ? _b2 : false;\n  }\n  async function getDocumentMetadata(providerMetadata) {\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return {\n      title: anthropicOptions == null ? void 0 : anthropicOptions.title,\n      context: anthropicOptions == null ? void 0 : anthropicOptions.context\n    };\n  }\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n    switch (type) {\n      case \"system\": {\n        if (system != null) {\n          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n            functionality: \"Multiple system messages that are separated by user/assistant messages\"\n          });\n        }\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: \"text\",\n          text: content,\n          cache_control: getCacheControl(providerOptions)\n        }));\n        break;\n      }\n      case \"user\": {\n        const anthropicContent = [];\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case \"user\": {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n                const isLastPart = j === content.length - 1;\n                const cacheControl = (_a = getCacheControl(part.providerOptions)) != null ? _a : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                switch (part.type) {\n                  case \"text\": {\n                    anthropicContent.push({\n                      type: \"text\",\n                      text: part.text,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  case \"file\": {\n                    if (part.mediaType.startsWith(\"image/\")) {\n                      anthropicContent.push({\n                        type: \"image\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType,\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"application/pdf\") {\n                      betas.add(\"pdfs-2024-09-25\");\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: \"application/pdf\",\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        title: (_b = metadata.title) != null ? _b : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"text/plain\") {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"text\",\n                          media_type: \"text/plain\",\n                          data: convertToString(part.data)\n                        },\n                        title: (_c = metadata.title) != null ? _c : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`\n                      });\n                    }\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n            case \"tool\": {\n              for (let i2 = 0; i2 < content.length; i2++) {\n                const part = content[i2];\n                const isLastPart = i2 === content.length - 1;\n                const cacheControl = (_d = getCacheControl(part.providerOptions)) != null ? _d : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                const output = part.output;\n                let contentValue;\n                switch (output.type) {\n                  case \"content\":\n                    contentValue = output.value.map((contentPart) => {\n                      switch (contentPart.type) {\n                        case \"text\":\n                          return {\n                            type: \"text\",\n                            text: contentPart.text,\n                            cache_control: void 0\n                          };\n                        case \"media\": {\n                          if (contentPart.mediaType.startsWith(\"image/\")) {\n                            return {\n                              type: \"image\",\n                              source: {\n                                type: \"base64\",\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data\n                              },\n                              cache_control: void 0\n                            };\n                          }\n                          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case \"text\":\n                  case \"error-text\":\n                    contentValue = output.value;\n                    break;\n                  case \"json\":\n                  case \"error-json\":\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n                anthropicContent.push({\n                  type: \"tool_result\",\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error: output.type === \"error-text\" || output.type === \"error-json\" ? true : void 0,\n                  cache_control: cacheControl\n                });\n              }\n              break;\n            }\n            default: {\n              const _exhaustiveCheck = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n        messages.push({ role: \"user\", content: anthropicContent });\n        break;\n      }\n      case \"assistant\": {\n        const anthropicContent = [];\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n            const cacheControl = (_e = getCacheControl(part.providerOptions)) != null ? _e : isLastContentPart ? getCacheControl(message.providerOptions) : void 0;\n            switch (part.type) {\n              case \"text\": {\n                anthropicContent.push({\n                  type: \"text\",\n                  text: (\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart ? part.text.trim() : part.text\n                  ),\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"reasoning\": {\n                if (sendReasoning) {\n                  const reasoningMetadata = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                    provider: \"anthropic\",\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema\n                  });\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      anthropicContent.push({\n                        type: \"thinking\",\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                        cache_control: cacheControl\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      anthropicContent.push({\n                        type: \"redacted_thinking\",\n                        data: reasoningMetadata.redactedData,\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      warnings.push({\n                        type: \"other\",\n                        message: \"unsupported reasoning metadata\"\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: \"other\",\n                      message: \"unsupported reasoning metadata\"\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: \"other\",\n                    message: \"sending reasoning content is disabled for this model\"\n                  });\n                }\n                break;\n              }\n              case \"tool-call\": {\n                if (part.providerExecuted) {\n                  if (part.toolName === \"web_search\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"web_search\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  if (part.toolName === \"code_execution\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"code_execution\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  warnings.push({\n                    type: \"other\",\n                    message: `provider executed tool call for tool ${part.toolName} is not supported`\n                  });\n                  break;\n                }\n                anthropicContent.push({\n                  type: \"tool_use\",\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"tool-result\": {\n                if (part.toolName === \"web_search\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const webSearchOutput = webSearch_20250305OutputSchema.parse(\n                    output.value\n                  );\n                  anthropicContent.push({\n                    type: \"web_search_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map((result) => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type\n                    })),\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                if (part.toolName === \"code_execution\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const codeExecutionOutput = codeExecution_20250522OutputSchema.parse(output.value);\n                  anthropicContent.push({\n                    type: \"code_execution_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: codeExecutionOutput.type,\n                      stdout: codeExecutionOutput.stdout,\n                      stderr: codeExecutionOutput.stderr,\n                      return_code: codeExecutionOutput.return_code\n                    },\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                warnings.push({\n                  type: \"other\",\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`\n                });\n                break;\n              }\n            }\n          }\n        }\n        messages.push({ role: \"assistant\", content: anthropicContent });\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return {\n    prompt: { system, messages },\n    betas\n  };\n}\nfunction groupIntoBlocks(prompt) {\n  const blocks = [];\n  let currentBlock = void 0;\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case \"system\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"system\") {\n          currentBlock = { type: \"system\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"assistant\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"assistant\") {\n          currentBlock = { type: \"assistant\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"user\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"tool\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return blocks;\n}\n\n// src/map-anthropic-stop-reason.ts\nfunction mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool\n}) {\n  switch (finishReason) {\n    case \"pause_turn\":\n    case \"end_turn\":\n    case \"stop_sequence\":\n      return \"stop\";\n    case \"refusal\":\n      return \"content-filter\";\n    case \"tool_use\":\n      return isJsonResponseFromTool ? \"stop\" : \"tool-calls\";\n    case \"max_tokens\":\n      return \"length\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/anthropic-messages-language-model.ts\nvar citationSchemas = {\n  webSearchResult: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    encrypted_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  pageLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"page_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    start_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    end_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  }),\n  charLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"char_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    start_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    end_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  })\n};\nvar citationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  citationSchemas.webSearchResult,\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nvar documentCitationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nfunction processCitation(citation, citationDocuments, generateId3, onSource) {\n  if (citation.type === \"page_location\" || citation.type === \"char_location\") {\n    const source = createCitationSource(\n      citation,\n      citationDocuments,\n      generateId3\n    );\n    if (source) {\n      onSource(source);\n    }\n  }\n}\nfunction createCitationSource(citation, citationDocuments, generateId3) {\n  var _a;\n  const documentInfo = citationDocuments[citation.document_index];\n  if (!documentInfo) {\n    return null;\n  }\n  const providerMetadata = citation.type === \"page_location\" ? {\n    citedText: citation.cited_text,\n    startPageNumber: citation.start_page_number,\n    endPageNumber: citation.end_page_number\n  } : {\n    citedText: citation.cited_text,\n    startCharIndex: citation.start_char_index,\n    endCharIndex: citation.end_char_index\n  };\n  return {\n    type: \"source\",\n    sourceType: \"document\",\n    id: generateId3(),\n    mediaType: documentInfo.mediaType,\n    title: (_a = citation.document_title) != null ? _a : documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic: providerMetadata\n    }\n  };\n}\nvar AnthropicMessagesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    var _a;\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = (_a = config.generateId) != null ? _a : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId;\n  }\n  supportsUrl(url) {\n    return url.protocol === \"https:\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  get supportedUrls() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).supportedUrls) == null ? void 0 : _b.call(_a)) != null ? _c : {};\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens = 4096,\n    // 4096: max model output tokens TODO update default in v5\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c;\n    const warnings = [];\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"seed\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\") {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"responseFormat\",\n          details: \"JSON response format requires a schema. The response format is ignored.\"\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"tools\",\n          details: \"JSON response format does not support tools. The provided tools are ignored.\"\n        });\n      }\n    }\n    const jsonResponseTool = (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null ? {\n      type: \"function\",\n      name: \"json\",\n      description: \"Respond with a JSON object.\",\n      inputSchema: responseFormat.schema\n    } : void 0;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions,\n      schema: anthropicProviderOptions\n    });\n    const { prompt: messagesPrompt, betas: messagesBetas } = await convertToAnthropicMessagesPrompt({\n      prompt,\n      sendReasoning: (_a = anthropicOptions == null ? void 0 : anthropicOptions.sendReasoning) != null ? _a : true,\n      warnings\n    });\n    const isThinking = ((_b = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _b.type) === \"enabled\";\n    const thinkingBudget = (_c = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _c.budgetTokens;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n      // provider specific settings:\n      ...isThinking && {\n        thinking: { type: \"enabled\", budget_tokens: thinkingBudget }\n      },\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages\n    };\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"thinking requires a budget\"\n        });\n      }\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported when thinking is enabled\"\n        });\n      }\n      if (topK != null) {\n        baseArgs.top_k = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topK\",\n          details: \"topK is not supported when thinking is enabled\"\n        });\n      }\n      if (topP != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported when thinking is enabled\"\n        });\n      }\n      baseArgs.max_tokens = maxOutputTokens + thinkingBudget;\n    }\n    const {\n      tools: anthropicTools2,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas\n    } = prepareTools(\n      jsonResponseTool != null ? {\n        tools: [jsonResponseTool],\n        toolChoice: { type: \"tool\", toolName: jsonResponseTool.name },\n        disableParallelToolUse: true\n      } : {\n        tools: tools != null ? tools : [],\n        toolChoice,\n        disableParallelToolUse: anthropicOptions == null ? void 0 : anthropicOptions.disableParallelToolUse\n      }\n    );\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools2,\n        tool_choice: anthropicToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings],\n      betas: /* @__PURE__ */ new Set([...messagesBetas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null\n    };\n  }\n  async getHeaders({\n    betas,\n    headers\n  }) {\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      betas.size > 0 ? { \"anthropic-beta\": Array.from(betas).join(\",\") } : {},\n      headers\n    );\n  }\n  buildRequestUrl(isStreaming) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).buildRequestUrl) == null ? void 0 : _b.call(_a, this.config.baseURL, isStreaming)) != null ? _c : `${this.config.baseURL}/messages`;\n  }\n  transformRequestBody(args) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).transformRequestBody) == null ? void 0 : _b.call(_a, args)) != null ? _c : args;\n  }\n  extractCitationDocuments(prompt) {\n    const isCitationPart = (part) => {\n      var _a, _b;\n      if (part.type !== \"file\") {\n        return false;\n      }\n      if (part.mediaType !== \"application/pdf\" && part.mediaType !== \"text/plain\") {\n        return false;\n      }\n      const anthropic2 = (_a = part.providerOptions) == null ? void 0 : _a.anthropic;\n      const citationsConfig = anthropic2 == null ? void 0 : anthropic2.citations;\n      return (_b = citationsConfig == null ? void 0 : citationsConfig.enabled) != null ? _b : false;\n    };\n    return prompt.filter((message) => message.role === \"user\").flatMap((message) => message.content).filter(isCitationPart).map((part) => {\n      var _a;\n      const filePart = part;\n      return {\n        title: (_a = filePart.filename) != null ? _a : \"Untitled Document\",\n        filename: filePart.filename,\n        mediaType: filePart.mediaType\n      };\n    });\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e;\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        anthropicMessagesResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const content = [];\n    for (const part of response.content) {\n      switch (part.type) {\n        case \"text\": {\n          if (!usesJsonResponseTool) {\n            content.push({ type: \"text\", text: part.text });\n            if (part.citations) {\n              for (const citation of part.citations) {\n                processCitation(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                  (source) => content.push(source)\n                );\n              }\n            }\n          }\n          break;\n        }\n        case \"thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature\n              }\n            }\n          });\n          break;\n        }\n        case \"redacted_thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: \"\",\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data\n              }\n            }\n          });\n          break;\n        }\n        case \"tool_use\": {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool ? {\n              type: \"text\",\n              text: JSON.stringify(part.input)\n            } : {\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input)\n            }\n          );\n          break;\n        }\n        case \"server_tool_use\": {\n          if (part.name === \"web_search\" || part.name === \"code_execution\") {\n            content.push({\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"web_search_tool_result\": {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              result: part.content.map((result) => {\n                var _a2;\n                return {\n                  url: result.url,\n                  title: result.title,\n                  pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                  encryptedContent: result.encrypted_content,\n                  type: result.type\n                };\n              }),\n              providerExecuted: true\n            });\n            for (const result of part.content) {\n              content.push({\n                type: \"source\",\n                sourceType: \"url\",\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: (_a = result.page_age) != null ? _a : null\n                  }\n                }\n              });\n            }\n          } else {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              isError: true,\n              result: {\n                type: \"web_search_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"code_execution_tool_result\": {\n          if (part.content.type === \"code_execution_result\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code\n              },\n              providerExecuted: true\n            });\n          } else if (part.content.type === \"code_execution_tool_result_error\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              isError: true,\n              result: {\n                type: \"code_execution_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n      }\n    }\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: (_b = response.usage.cache_read_input_tokens) != null ? _b : void 0\n      },\n      request: { body: args },\n      response: {\n        id: (_c = response.id) != null ? _c : void 0,\n        modelId: (_d = response.model) != null ? _d : void 0,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage,\n          cacheCreationInputTokens: (_e = response.usage.cache_creation_input_tokens) != null ? _e : null\n        }\n      }\n    };\n  }\n  async doStream(options) {\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const body = { ...args, stream: true };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        anthropicMessagesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const contentBlocks = {};\n    let providerMetadata = void 0;\n    let blockType = void 0;\n    const generateId3 = this.generateId;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            switch (value.type) {\n              case \"ping\": {\n                return;\n              }\n              case \"content_block_start\": {\n                const contentBlockType = value.content_block.type;\n                blockType = contentBlockType;\n                switch (contentBlockType) {\n                  case \"text\": {\n                    contentBlocks[value.index] = { type: \"text\" };\n                    controller.enqueue({\n                      type: \"text-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"redacted_thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data\n                        }\n                      }\n                    });\n                    return;\n                  }\n                  case \"tool_use\": {\n                    contentBlocks[value.index] = usesJsonResponseTool ? { type: \"text\" } : {\n                      type: \"tool-call\",\n                      toolCallId: value.content_block.id,\n                      toolName: value.content_block.name,\n                      input: \"\"\n                    };\n                    controller.enqueue(\n                      usesJsonResponseTool ? { type: \"text-start\", id: String(value.index) } : {\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name\n                      }\n                    );\n                    return;\n                  }\n                  case \"server_tool_use\": {\n                    if (value.content_block.name === \"web_search\" || value.content_block.name === \"code_execution\") {\n                      contentBlocks[value.index] = {\n                        type: \"tool-call\",\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: \"\",\n                        providerExecuted: true\n                      };\n                      controller.enqueue({\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name,\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"web_search_tool_result\": {\n                    const part = value.content_block;\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        result: part.content.map((result) => {\n                          var _a2;\n                          return {\n                            url: result.url,\n                            title: result.title,\n                            pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                            encryptedContent: result.encrypted_content,\n                            type: result.type\n                          };\n                        }),\n                        providerExecuted: true\n                      });\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: \"source\",\n                          sourceType: \"url\",\n                          id: generateId3(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: (_a = result.page_age) != null ? _a : null\n                            }\n                          }\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        isError: true,\n                        result: {\n                          type: \"web_search_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"code_execution_tool_result\": {\n                    const part = value.content_block;\n                    if (part.content.type === \"code_execution_result\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code\n                        },\n                        providerExecuted: true\n                      });\n                    } else if (part.content.type === \"code_execution_tool_result_error\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        isError: true,\n                        result: {\n                          type: \"code_execution_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"content_block_stop\": {\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n                  switch (contentBlock.type) {\n                    case \"text\": {\n                      controller.enqueue({\n                        type: \"text-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"reasoning\": {\n                      controller.enqueue({\n                        type: \"reasoning-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"tool-call\":\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: \"tool-input-end\",\n                          id: contentBlock.toolCallId\n                        });\n                        controller.enqueue(contentBlock);\n                      }\n                      break;\n                  }\n                  delete contentBlocks[value.index];\n                }\n                blockType = void 0;\n                return;\n              }\n              case \"content_block_delta\": {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case \"text_delta\": {\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n                    controller.enqueue({\n                      type: \"text-delta\",\n                      id: String(value.index),\n                      delta: value.delta.text\n                    });\n                    return;\n                  }\n                  case \"thinking_delta\": {\n                    controller.enqueue({\n                      type: \"reasoning-delta\",\n                      id: String(value.index),\n                      delta: value.delta.thinking\n                    });\n                    return;\n                  }\n                  case \"signature_delta\": {\n                    if (blockType === \"thinking\") {\n                      controller.enqueue({\n                        type: \"reasoning-delta\",\n                        id: String(value.index),\n                        delta: \"\",\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature\n                          }\n                        }\n                      });\n                    }\n                    return;\n                  }\n                  case \"input_json_delta\": {\n                    const contentBlock = contentBlocks[value.index];\n                    const delta = value.delta.partial_json;\n                    if (usesJsonResponseTool) {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"text\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"text-delta\",\n                        id: String(value.index),\n                        delta\n                      });\n                    } else {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"tool-call\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: contentBlock.toolCallId,\n                        delta\n                      });\n                      contentBlock.input += delta;\n                    }\n                    return;\n                  }\n                  case \"citations_delta\": {\n                    const citation = value.delta.citation;\n                    processCitation(\n                      citation,\n                      citationDocuments,\n                      generateId3,\n                      (source) => controller.enqueue(source)\n                    );\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"message_start\": {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens = (_b = value.message.usage.cache_read_input_tokens) != null ? _b : void 0;\n                providerMetadata = {\n                  anthropic: {\n                    usage: value.message.usage,\n                    cacheCreationInputTokens: (_c = value.message.usage.cache_creation_input_tokens) != null ? _c : null\n                  }\n                };\n                controller.enqueue({\n                  type: \"response-metadata\",\n                  id: (_d = value.message.id) != null ? _d : void 0,\n                  modelId: (_e = value.message.model) != null ? _e : void 0\n                });\n                return;\n              }\n              case \"message_delta\": {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens = ((_f = usage.inputTokens) != null ? _f : 0) + ((_g = value.usage.output_tokens) != null ? _g : 0);\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool\n                });\n                return;\n              }\n              case \"message_stop\": {\n                controller.enqueue({\n                  type: \"finish\",\n                  finishReason,\n                  usage,\n                  providerMetadata\n                });\n                return;\n              }\n              case \"error\": {\n                controller.enqueue({ type: \"error\", error: value.error });\n                return;\n              }\n              default: {\n                const _exhaustiveCheck = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar anthropicMessagesResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(citationSchema).optional()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      })\n    ])\n  ),\n  stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.looseObject({\n    input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  })\n});\nvar anthropicMessagesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_start\"),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.looseObject({\n        input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n      })\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_start\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    content_block: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_delta\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"input_json_delta\"),\n        partial_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text_delta\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking_delta\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"signature_delta\"),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"citations_delta\"),\n        citation: citationSchema\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_stop\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n    error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_delta\"),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish() }),\n    usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_stop\")\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"ping\")\n  })\n]);\nvar anthropicReasoningMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  redactedData: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/tool/bash_20241022.ts\n\n\nvar bash_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20241022\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/bash_20250124.ts\n\n\nvar bash_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20250124\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/computer_20241022.ts\n\n\nvar computer_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20241022\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"key\",\n      \"type\",\n      \"mouse_move\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"screenshot\",\n      \"cursor_position\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  })\n});\n\n// src/tool/computer_20250124.ts\n\n\nvar computer_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20250124\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"key\",\n      \"hold_key\",\n      \"type\",\n      \"cursor_position\",\n      \"mouse_move\",\n      \"left_mouse_down\",\n      \"left_mouse_up\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"triple_click\",\n      \"scroll\",\n      \"wait\",\n      \"screenshot\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()]).optional(),\n    duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    scroll_amount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    scroll_direction: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"up\", \"down\", \"left\", \"right\"]).optional(),\n    start_coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()]).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  })\n});\n\n// src/tool/text-editor_20241022.ts\n\n\nvar textEditor_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20241022\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250124.ts\n\n\nvar textEditor_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250124\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250429.ts\n\n\nvar textEditor_20250429 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250429\",\n  name: \"str_replace_based_edit_tool\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/anthropic-tools.ts\nvar anthropicTools = {\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20241022,\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20250124,\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250522,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20241022,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command.\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   */\n  textEditor_20250429,\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_search`.\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305\n};\n\n// src/anthropic-provider.ts\nfunction createAnthropic(options = {}) {\n  var _a;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.anthropic.com/v1\";\n  const getHeaders = () => ({\n    \"anthropic-version\": \"2023-06-01\",\n    \"x-api-key\": (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"ANTHROPIC_API_KEY\",\n      description: \"Anthropic\"\n    }),\n    ...options.headers\n  });\n  const createChatModel = (modelId) => {\n    var _a2;\n    return new AnthropicMessagesLanguageModel(modelId, {\n      provider: \"anthropic.messages\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      generateId: (_a2 = options.generateId) != null ? _a2 : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId,\n      supportedUrls: () => ({\n        \"image/*\": [/^https?:\\/\\/.*$/]\n      })\n    });\n  };\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Anthropic model function cannot be called with the new keyword.\"\n      );\n    }\n    return createChatModel(modelId);\n  };\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.messages = createChatModel;\n  provider.textEmbeddingModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.NoSuchModelError({ modelId, modelType: \"textEmbeddingModel\" });\n  };\n  provider.imageModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.NoSuchModelError({ modelId, modelType: \"imageModel\" });\n  };\n  provider.tools = anthropicTools;\n  return provider;\n}\nvar anthropic = createAnthropic();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/anthropic/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/gateway/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@ai-sdk/gateway/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GatewayAuthenticationError: () => (/* binding */ GatewayAuthenticationError),\n/* harmony export */   GatewayError: () => (/* binding */ GatewayError),\n/* harmony export */   GatewayInternalServerError: () => (/* binding */ GatewayInternalServerError),\n/* harmony export */   GatewayInvalidRequestError: () => (/* binding */ GatewayInvalidRequestError),\n/* harmony export */   GatewayModelNotFoundError: () => (/* binding */ GatewayModelNotFoundError),\n/* harmony export */   GatewayRateLimitError: () => (/* binding */ GatewayRateLimitError),\n/* harmony export */   GatewayResponseError: () => (/* binding */ GatewayResponseError),\n/* harmony export */   createGateway: () => (/* binding */ createGatewayProvider),\n/* harmony export */   createGatewayProvider: () => (/* binding */ createGatewayProvider),\n/* harmony export */   gateway: () => (/* binding */ gateway)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/classic/schemas.js\");\n// src/gateway-provider.ts\n\n\n\n// src/errors/as-gateway-error.ts\n\n\n// src/errors/create-gateway-error.ts\n\n\n// src/errors/gateway-error.ts\nvar marker = \"vercel.ai.gateway.error\";\nvar symbol = Symbol.for(marker);\nvar _a, _b;\nvar GatewayError = class _GatewayError extends (_b = Error, _a = symbol, _b) {\n  constructor({\n    message,\n    statusCode = 500,\n    cause\n  }) {\n    super(message);\n    this[_a] = true;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n  /**\n   * Checks if the given error is a Gateway Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is a Gateway Error, false otherwise.\n   */\n  static isInstance(error) {\n    return _GatewayError.hasMarker(error);\n  }\n  static hasMarker(error) {\n    return typeof error === \"object\" && error !== null && symbol in error && error[symbol] === true;\n  }\n};\n\n// src/errors/gateway-authentication-error.ts\nvar name = \"GatewayAuthenticationError\";\nvar marker2 = `vercel.ai.gateway.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2, _b2;\nvar GatewayAuthenticationError = class _GatewayAuthenticationError extends (_b2 = GatewayError, _a2 = symbol2, _b2) {\n  constructor({\n    message = \"Authentication failed\",\n    statusCode = 401,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a2] = true;\n    // used in isInstance\n    this.name = name;\n    this.type = \"authentication_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol2 in error;\n  }\n  /**\n   * Creates a contextual error message when authentication fails\n   */\n  static createContextualError({\n    apiKeyProvided,\n    oidcTokenProvided,\n    message = \"Authentication failed\",\n    statusCode = 401,\n    cause\n  }) {\n    let contextualMessage;\n    if (apiKeyProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid API key provided.\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else if (oidcTokenProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid OIDC token provided.\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed\n\nAlternative: Provide an API key via 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else {\n      contextualMessage = `AI Gateway authentication failed: No authentication provided.\n\nProvide either an API key or OIDC token.\n\nAPI key instructions:\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.\n\nOIDC token instructions:\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed`;\n    }\n    return new _GatewayAuthenticationError({\n      message: contextualMessage,\n      statusCode,\n      cause\n    });\n  }\n};\n\n// src/errors/gateway-invalid-request-error.ts\nvar name2 = \"GatewayInvalidRequestError\";\nvar marker3 = `vercel.ai.gateway.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3, _b3;\nvar GatewayInvalidRequestError = class extends (_b3 = GatewayError, _a3 = symbol3, _b3) {\n  constructor({\n    message = \"Invalid request\",\n    statusCode = 400,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a3] = true;\n    // used in isInstance\n    this.name = name2;\n    this.type = \"invalid_request_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol3 in error;\n  }\n};\n\n// src/errors/gateway-rate-limit-error.ts\nvar name3 = \"GatewayRateLimitError\";\nvar marker4 = `vercel.ai.gateway.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4, _b4;\nvar GatewayRateLimitError = class extends (_b4 = GatewayError, _a4 = symbol4, _b4) {\n  constructor({\n    message = \"Rate limit exceeded\",\n    statusCode = 429,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a4] = true;\n    // used in isInstance\n    this.name = name3;\n    this.type = \"rate_limit_exceeded\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol4 in error;\n  }\n};\n\n// src/errors/gateway-model-not-found-error.ts\n\nvar name4 = \"GatewayModelNotFoundError\";\nvar marker5 = `vercel.ai.gateway.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar modelNotFoundParamSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  modelId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar _a5, _b5;\nvar GatewayModelNotFoundError = class extends (_b5 = GatewayError, _a5 = symbol5, _b5) {\n  constructor({\n    message = \"Model not found\",\n    statusCode = 404,\n    modelId,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a5] = true;\n    // used in isInstance\n    this.name = name4;\n    this.type = \"model_not_found\";\n    this.modelId = modelId;\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol5 in error;\n  }\n};\n\n// src/errors/gateway-internal-server-error.ts\nvar name5 = \"GatewayInternalServerError\";\nvar marker6 = `vercel.ai.gateway.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6, _b6;\nvar GatewayInternalServerError = class extends (_b6 = GatewayError, _a6 = symbol6, _b6) {\n  constructor({\n    message = \"Internal server error\",\n    statusCode = 500,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a6] = true;\n    // used in isInstance\n    this.name = name5;\n    this.type = \"internal_server_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol6 in error;\n  }\n};\n\n// src/errors/gateway-response-error.ts\nvar name6 = \"GatewayResponseError\";\nvar marker7 = `vercel.ai.gateway.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7, _b7;\nvar GatewayResponseError = class extends (_b7 = GatewayError, _a7 = symbol7, _b7) {\n  constructor({\n    message = \"Invalid response from Gateway\",\n    statusCode = 502,\n    response,\n    validationError,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a7] = true;\n    // used in isInstance\n    this.name = name6;\n    this.type = \"response_error\";\n    this.response = response;\n    this.validationError = validationError;\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol7 in error;\n  }\n};\n\n// src/errors/create-gateway-error.ts\nfunction createGatewayErrorFromResponse({\n  response,\n  statusCode,\n  defaultMessage = \"Gateway request failed\",\n  cause,\n  authMethod\n}) {\n  const parseResult = gatewayErrorResponseSchema.safeParse(response);\n  if (!parseResult.success) {\n    return new GatewayResponseError({\n      message: `Invalid error response format: ${defaultMessage}`,\n      statusCode,\n      response,\n      validationError: parseResult.error,\n      cause\n    });\n  }\n  const validatedResponse = parseResult.data;\n  const errorType = validatedResponse.error.type;\n  const message = validatedResponse.error.message;\n  switch (errorType) {\n    case \"authentication_error\":\n      return GatewayAuthenticationError.createContextualError({\n        apiKeyProvided: authMethod === \"api-key\",\n        oidcTokenProvided: authMethod === \"oidc\",\n        statusCode,\n        cause\n      });\n    case \"invalid_request_error\":\n      return new GatewayInvalidRequestError({ message, statusCode, cause });\n    case \"rate_limit_exceeded\":\n      return new GatewayRateLimitError({ message, statusCode, cause });\n    case \"model_not_found\": {\n      const modelResult = modelNotFoundParamSchema.safeParse(\n        validatedResponse.error.param\n      );\n      return new GatewayModelNotFoundError({\n        message,\n        statusCode,\n        modelId: modelResult.success ? modelResult.data.modelId : void 0,\n        cause\n      });\n    }\n    case \"internal_server_error\":\n      return new GatewayInternalServerError({ message, statusCode, cause });\n    default:\n      return new GatewayInternalServerError({ message, statusCode, cause });\n  }\n}\nvar gatewayErrorResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).nullish()\n  })\n});\n\n// src/errors/as-gateway-error.ts\nfunction asGatewayError(error, authMethod) {\n  var _a8;\n  if (GatewayError.isInstance(error)) {\n    return error;\n  }\n  if (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n    return createGatewayErrorFromResponse({\n      response: extractApiCallResponse(error),\n      statusCode: (_a8 = error.statusCode) != null ? _a8 : 500,\n      defaultMessage: \"Gateway request failed\",\n      cause: error,\n      authMethod\n    });\n  }\n  return createGatewayErrorFromResponse({\n    response: {},\n    statusCode: 500,\n    defaultMessage: error instanceof Error ? `Gateway request failed: ${error.message}` : \"Unknown Gateway error\",\n    cause: error,\n    authMethod\n  });\n}\n\n// src/errors/extract-api-call-response.ts\nfunction extractApiCallResponse(error) {\n  if (error.data !== void 0) {\n    return error.data;\n  }\n  if (error.responseBody != null) {\n    try {\n      return JSON.parse(error.responseBody);\n    } catch (e) {\n      return error.responseBody;\n    }\n  }\n  return {};\n}\n\n// src/errors/parse-auth-method.ts\n\nvar GATEWAY_AUTH_METHOD_HEADER = \"ai-gateway-auth-method\";\nfunction parseAuthMethod(headers) {\n  const result = gatewayAuthMethodSchema.safeParse(\n    headers[GATEWAY_AUTH_METHOD_HEADER]\n  );\n  return result.success ? result.data : void 0;\n}\nvar gatewayAuthMethodSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"api-key\"),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"oidc\")\n]);\n\n// src/gateway-fetch-metadata.ts\n\n\nvar GatewayFetchMetadata = class {\n  constructor(config) {\n    this.config = config;\n  }\n  async getAvailableModels() {\n    try {\n      const { value } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.getFromApi)({\n        url: `${this.config.baseURL}/config`,\n        headers: await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers()),\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n          gatewayFetchMetadataSchema\n        ),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any(),\n          errorToMessage: (data) => data\n        }),\n        fetch: this.config.fetch\n      });\n      return value;\n    } catch (error) {\n      throw asGatewayError(error);\n    }\n  }\n};\nvar gatewayLanguageModelSpecificationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  specificationVersion: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"v2\"),\n  provider: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  modelId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar gatewayLanguageModelPricingSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  input_cache_read: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  input_cache_write: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n}).transform(({ input, output, input_cache_read, input_cache_write }) => ({\n  input,\n  output,\n  ...input_cache_read ? { cachedInputTokens: input_cache_read } : {},\n  ...input_cache_write ? { cacheCreationInputTokens: input_cache_write } : {}\n}));\nvar gatewayLanguageModelEntrySchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  description: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  pricing: gatewayLanguageModelPricingSchema.nullish(),\n  specification: gatewayLanguageModelSpecificationSchema,\n  modelType: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"language\", \"embedding\", \"image\"]).nullish()\n});\nvar gatewayFetchMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  models: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(gatewayLanguageModelEntrySchema)\n});\n\n// src/gateway-language-model.ts\n\n\nvar GatewayLanguageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = { \"*/*\": [/.*/] };\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs(options) {\n    const { abortSignal: _abortSignal, ...optionsWithoutSignal } = options;\n    return {\n      args: this.maybeEncodeFileParts(optionsWithoutSignal),\n      warnings: []\n    };\n  }\n  async doGenerate(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue: rawResponse\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, false),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: args,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.any()),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        ...responseBody,\n        request: { body: args },\n        response: { headers: responseHeaders, body: rawResponse },\n        warnings\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, true),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: args,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createEventSourceResponseHandler)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.any()),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        stream: response.pipeThrough(\n          new TransformStream({\n            start(controller) {\n              if (warnings.length > 0) {\n                controller.enqueue({ type: \"stream-start\", warnings });\n              }\n            },\n            transform(chunk, controller) {\n              if (chunk.success) {\n                const streamPart = chunk.value;\n                if (streamPart.type === \"raw\" && !options.includeRawChunks) {\n                  return;\n                }\n                if (streamPart.type === \"response-metadata\" && streamPart.timestamp && typeof streamPart.timestamp === \"string\") {\n                  streamPart.timestamp = new Date(streamPart.timestamp);\n                }\n                controller.enqueue(streamPart);\n              } else {\n                controller.error(\n                  chunk.error\n                );\n              }\n            }\n          })\n        ),\n        request: { body: args },\n        response: { headers: responseHeaders }\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  isFilePart(part) {\n    return part && typeof part === \"object\" && \"type\" in part && part.type === \"file\";\n  }\n  /**\n   * Encodes file parts in the prompt to base64. Mutates the passed options\n   * instance directly to avoid copying the file data.\n   * @param options - The options to encode.\n   * @returns The options with the file parts encoded.\n   */\n  maybeEncodeFileParts(options) {\n    for (const message of options.prompt) {\n      for (const part of message.content) {\n        if (this.isFilePart(part)) {\n          const filePart = part;\n          if (filePart.data instanceof Uint8Array) {\n            const buffer = Uint8Array.from(filePart.data);\n            const base64Data = Buffer.from(buffer).toString(\"base64\");\n            filePart.data = new URL(\n              `data:${filePart.mediaType || \"application/octet-stream\"};base64,${base64Data}`\n            );\n          }\n        }\n      }\n    }\n    return options;\n  }\n  getUrl() {\n    return `${this.config.baseURL}/language-model`;\n  }\n  getModelConfigHeaders(modelId, streaming) {\n    return {\n      \"ai-language-model-specification-version\": \"2\",\n      \"ai-language-model-id\": modelId,\n      \"ai-language-model-streaming\": String(streaming)\n    };\n  }\n};\n\n// src/gateway-embedding-model.ts\n\n\nvar GatewayEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a8;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          headers != null ? headers : {},\n          this.getModelConfigHeaders(),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: {\n          input: values.length === 1 ? values[0] : values,\n          ...providerOptions ? { providerOptions } : {}\n        },\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n          gatewayEmbeddingResponseSchema\n        ),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        embeddings: responseBody.embeddings,\n        usage: (_a8 = responseBody.usage) != null ? _a8 : void 0,\n        providerMetadata: responseBody.providerMetadata,\n        response: { headers: responseHeaders, body: rawValue }\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  getUrl() {\n    return `${this.config.baseURL}/embedding-model`;\n  }\n  getModelConfigHeaders() {\n    return {\n      \"ai-embedding-model-specification-version\": \"2\",\n      \"ai-model-id\": this.modelId\n    };\n  }\n};\nvar gatewayEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  embeddings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() }).nullish(),\n  providerMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown())).optional()\n});\n\n// src/vercel-environment.ts\nasync function getVercelOidcToken() {\n  var _a8, _b8;\n  const token = (_b8 = (_a8 = getContext().headers) == null ? void 0 : _a8[\"x-vercel-oidc-token\"]) != null ? _b8 : process.env.VERCEL_OIDC_TOKEN;\n  if (!token) {\n    throw new GatewayAuthenticationError({\n      message: \"OIDC token not available\",\n      statusCode: 401\n    });\n  }\n  return token;\n}\nasync function getVercelRequestId() {\n  var _a8;\n  return (_a8 = getContext().headers) == null ? void 0 : _a8[\"x-vercel-id\"];\n}\nvar SYMBOL_FOR_REQ_CONTEXT = Symbol.for(\"@vercel/request-context\");\nfunction getContext() {\n  var _a8, _b8, _c;\n  const fromSymbol = globalThis;\n  return (_c = (_b8 = (_a8 = fromSymbol[SYMBOL_FOR_REQ_CONTEXT]) == null ? void 0 : _a8.get) == null ? void 0 : _b8.call(_a8)) != null ? _c : {};\n}\n\n// src/gateway-provider.ts\nvar AI_GATEWAY_PROTOCOL_VERSION = \"0.0.1\";\nfunction createGatewayProvider(options = {}) {\n  var _a8, _b8;\n  let pendingMetadata = null;\n  let metadataCache = null;\n  const cacheRefreshMillis = (_a8 = options.metadataCacheRefreshMillis) != null ? _a8 : 1e3 * 60 * 5;\n  let lastFetchTime = 0;\n  const baseURL = (_b8 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.withoutTrailingSlash)(options.baseURL)) != null ? _b8 : \"https://ai-gateway.vercel.sh/v1/ai\";\n  const getHeaders = async () => {\n    const auth = await getGatewayAuthToken(options);\n    if (auth) {\n      return {\n        Authorization: `Bearer ${auth.token}`,\n        \"ai-gateway-protocol-version\": AI_GATEWAY_PROTOCOL_VERSION,\n        [GATEWAY_AUTH_METHOD_HEADER]: auth.authMethod,\n        ...options.headers\n      };\n    }\n    throw GatewayAuthenticationError.createContextualError({\n      apiKeyProvided: false,\n      oidcTokenProvided: false,\n      statusCode: 401\n    });\n  };\n  const createO11yHeaders = () => {\n    const deploymentId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_DEPLOYMENT_ID\"\n    });\n    const environment = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_ENV\"\n    });\n    const region = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_REGION\"\n    });\n    return async () => {\n      const requestId = await getVercelRequestId();\n      return {\n        ...deploymentId && { \"ai-o11y-deployment-id\": deploymentId },\n        ...environment && { \"ai-o11y-environment\": environment },\n        ...region && { \"ai-o11y-region\": region },\n        ...requestId && { \"ai-o11y-request-id\": requestId }\n      };\n    };\n  };\n  const createLanguageModel = (modelId) => {\n    return new GatewayLanguageModel(modelId, {\n      provider: \"gateway\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders()\n    });\n  };\n  const getAvailableModels = async () => {\n    var _a9, _b9, _c;\n    const now = (_c = (_b9 = (_a9 = options._internal) == null ? void 0 : _a9.currentDate) == null ? void 0 : _b9.call(_a9).getTime()) != null ? _c : Date.now();\n    if (!pendingMetadata || now - lastFetchTime > cacheRefreshMillis) {\n      lastFetchTime = now;\n      pendingMetadata = new GatewayFetchMetadata({\n        baseURL,\n        headers: getHeaders,\n        fetch: options.fetch\n      }).getAvailableModels().then((metadata) => {\n        metadataCache = metadata;\n        return metadata;\n      }).catch(async (error) => {\n        throw asGatewayError(error, parseAuthMethod(await getHeaders()));\n      });\n    }\n    return metadataCache ? Promise.resolve(metadataCache) : pendingMetadata;\n  };\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Gateway Provider model function cannot be called with the new keyword.\"\n      );\n    }\n    return createLanguageModel(modelId);\n  };\n  provider.getAvailableModels = getAvailableModels;\n  provider.imageModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({ modelId, modelType: \"imageModel\" });\n  };\n  provider.languageModel = createLanguageModel;\n  provider.textEmbeddingModel = (modelId) => {\n    return new GatewayEmbeddingModel(modelId, {\n      provider: \"gateway\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders()\n    });\n  };\n  return provider;\n}\nvar gateway = createGatewayProvider();\nasync function getGatewayAuthToken(options) {\n  const apiKey = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n    settingValue: options.apiKey,\n    environmentVariableName: \"AI_GATEWAY_API_KEY\"\n  });\n  if (apiKey) {\n    return {\n      token: apiKey,\n      authMethod: \"api-key\"\n    };\n  }\n  try {\n    const oidcToken = await getVercelOidcToken();\n    return {\n      token: oidcToken,\n      authMethod: \"oidc\"\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/gateway/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/google/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@ai-sdk/google/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleGenerativeAI: () => (/* binding */ createGoogleGenerativeAI),\n/* harmony export */   google: () => (/* binding */ google)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/classic/schemas.js\");\n// src/google-provider.ts\n\n\n// src/google-generative-ai-embedding-model.ts\n\n\n\n\n// src/google-error.ts\n\n\nvar googleErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullable(),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n});\nvar googleFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: googleErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/google-generative-ai-embedding-options.ts\n\nvar googleGenerativeAIEmbeddingProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Optional. Optional reduced dimension for the output embedding.\n   * If set, excessive values in the output embedding are truncated from the end.\n   */\n  outputDimensionality: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Optional. Specifies the task type for generating embeddings.\n   * Supported task types:\n   * - SEMANTIC_SIMILARITY: Optimized for text similarity.\n   * - CLASSIFICATION: Optimized for text classification.\n   * - CLUSTERING: Optimized for clustering texts based on similarity.\n   * - RETRIEVAL_DOCUMENT: Optimized for document retrieval.\n   * - RETRIEVAL_QUERY: Optimized for query-based retrieval.\n   * - QUESTION_ANSWERING: Optimized for answering questions.\n   * - FACT_VERIFICATION: Optimized for verifying factual information.\n   * - CODE_RETRIEVAL_QUERY: Optimized for retrieving code blocks based on natural language queries.\n   */\n  taskType: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"SEMANTIC_SIMILARITY\",\n    \"CLASSIFICATION\",\n    \"CLUSTERING\",\n    \"RETRIEVAL_DOCUMENT\",\n    \"RETRIEVAL_QUERY\",\n    \"QUESTION_ANSWERING\",\n    \"FACT_VERIFICATION\",\n    \"CODE_RETRIEVAL_QUERY\"\n  ]).optional()\n});\n\n// src/google-generative-ai-embedding-model.ts\nvar GoogleGenerativeAIEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    const googleOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"google\",\n      providerOptions,\n      schema: googleGenerativeAIEmbeddingProviderOptions\n    });\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const mergedHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      headers\n    );\n    if (values.length === 1) {\n      const {\n        responseHeaders: responseHeaders2,\n        value: response2,\n        rawValue: rawValue2\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n        url: `${this.config.baseURL}/models/${this.modelId}:embedContent`,\n        headers: mergedHeaders,\n        body: {\n          model: `models/${this.modelId}`,\n          content: {\n            parts: [{ text: values[0] }]\n          },\n          outputDimensionality: googleOptions == null ? void 0 : googleOptions.outputDimensionality,\n          taskType: googleOptions == null ? void 0 : googleOptions.taskType\n        },\n        failedResponseHandler: googleFailedResponseHandler,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n          googleGenerativeAISingleEmbeddingResponseSchema\n        ),\n        abortSignal,\n        fetch: this.config.fetch\n      });\n      return {\n        embeddings: [response2.embedding.values],\n        usage: void 0,\n        response: { headers: responseHeaders2, body: rawValue2 }\n      };\n    }\n    const {\n      responseHeaders,\n      value: response,\n      rawValue\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: `${this.config.baseURL}/models/${this.modelId}:batchEmbedContents`,\n      headers: mergedHeaders,\n      body: {\n        requests: values.map((value) => ({\n          model: `models/${this.modelId}`,\n          content: { role: \"user\", parts: [{ text: value }] },\n          outputDimensionality: googleOptions == null ? void 0 : googleOptions.outputDimensionality,\n          taskType: googleOptions == null ? void 0 : googleOptions.taskType\n        }))\n      },\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        googleGenerativeAITextEmbeddingResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      embeddings: response.embeddings.map((item) => item.values),\n      usage: void 0,\n      response: { headers: responseHeaders, body: rawValue }\n    };\n  }\n};\nvar googleGenerativeAITextEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  embeddings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ values: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()) }))\n});\nvar googleGenerativeAISingleEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  embedding: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ values: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()) })\n});\n\n// src/google-generative-ai-language-model.ts\n\n\n\n// src/convert-json-schema-to-openapi-schema.ts\nfunction convertJSONSchemaToOpenAPISchema(jsonSchema) {\n  if (jsonSchema == null || isEmptyObjectSchema(jsonSchema)) {\n    return void 0;\n  }\n  if (typeof jsonSchema === \"boolean\") {\n    return { type: \"boolean\", properties: {} };\n  }\n  const {\n    type,\n    description,\n    required,\n    properties,\n    items,\n    allOf,\n    anyOf,\n    oneOf,\n    format,\n    const: constValue,\n    minLength,\n    enum: enumValues\n  } = jsonSchema;\n  const result = {};\n  if (description)\n    result.description = description;\n  if (required)\n    result.required = required;\n  if (format)\n    result.format = format;\n  if (constValue !== void 0) {\n    result.enum = [constValue];\n  }\n  if (type) {\n    if (Array.isArray(type)) {\n      if (type.includes(\"null\")) {\n        result.type = type.filter((t) => t !== \"null\")[0];\n        result.nullable = true;\n      } else {\n        result.type = type;\n      }\n    } else if (type === \"null\") {\n      result.type = \"null\";\n    } else {\n      result.type = type;\n    }\n  }\n  if (enumValues !== void 0) {\n    result.enum = enumValues;\n  }\n  if (properties != null) {\n    result.properties = Object.entries(properties).reduce(\n      (acc, [key, value]) => {\n        acc[key] = convertJSONSchemaToOpenAPISchema(value);\n        return acc;\n      },\n      {}\n    );\n  }\n  if (items) {\n    result.items = Array.isArray(items) ? items.map(convertJSONSchemaToOpenAPISchema) : convertJSONSchemaToOpenAPISchema(items);\n  }\n  if (allOf) {\n    result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (anyOf) {\n    if (anyOf.some(\n      (schema) => typeof schema === \"object\" && (schema == null ? void 0 : schema.type) === \"null\"\n    )) {\n      const nonNullSchemas = anyOf.filter(\n        (schema) => !(typeof schema === \"object\" && (schema == null ? void 0 : schema.type) === \"null\")\n      );\n      if (nonNullSchemas.length === 1) {\n        const converted = convertJSONSchemaToOpenAPISchema(nonNullSchemas[0]);\n        if (typeof converted === \"object\") {\n          result.nullable = true;\n          Object.assign(result, converted);\n        }\n      } else {\n        result.anyOf = nonNullSchemas.map(convertJSONSchemaToOpenAPISchema);\n        result.nullable = true;\n      }\n    } else {\n      result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);\n    }\n  }\n  if (oneOf) {\n    result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (minLength !== void 0) {\n    result.minLength = minLength;\n  }\n  return result;\n}\nfunction isEmptyObjectSchema(jsonSchema) {\n  return jsonSchema != null && typeof jsonSchema === \"object\" && jsonSchema.type === \"object\" && (jsonSchema.properties == null || Object.keys(jsonSchema.properties).length === 0) && !jsonSchema.additionalProperties;\n}\n\n// src/convert-to-google-generative-ai-messages.ts\n\n\nfunction convertToGoogleGenerativeAIMessages(prompt, options) {\n  var _a;\n  const systemInstructionParts = [];\n  const contents = [];\n  let systemMessagesAllowed = true;\n  const isGemmaModel = (_a = options == null ? void 0 : options.isGemmaModel) != null ? _a : false;\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        if (!systemMessagesAllowed) {\n          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n            functionality: \"system messages are only supported at the beginning of the conversation\"\n          });\n        }\n        systemInstructionParts.push({ text: content });\n        break;\n      }\n      case \"user\": {\n        systemMessagesAllowed = false;\n        const parts = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              parts.push({ text: part.text });\n              break;\n            }\n            case \"file\": {\n              const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n              parts.push(\n                part.data instanceof URL ? {\n                  fileData: {\n                    mimeType: mediaType,\n                    fileUri: part.data.toString()\n                  }\n                } : {\n                  inlineData: {\n                    mimeType: mediaType,\n                    data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                  }\n                }\n              );\n              break;\n            }\n          }\n        }\n        contents.push({ role: \"user\", parts });\n        break;\n      }\n      case \"assistant\": {\n        systemMessagesAllowed = false;\n        contents.push({\n          role: \"model\",\n          parts: content.map((part) => {\n            var _a2, _b, _c, _d, _e, _f;\n            switch (part.type) {\n              case \"text\": {\n                return part.text.length === 0 ? void 0 : {\n                  text: part.text,\n                  thoughtSignature: (_b = (_a2 = part.providerOptions) == null ? void 0 : _a2.google) == null ? void 0 : _b.thoughtSignature\n                };\n              }\n              case \"reasoning\": {\n                return part.text.length === 0 ? void 0 : {\n                  text: part.text,\n                  thought: true,\n                  thoughtSignature: (_d = (_c = part.providerOptions) == null ? void 0 : _c.google) == null ? void 0 : _d.thoughtSignature\n                };\n              }\n              case \"file\": {\n                if (part.mediaType !== \"image/png\") {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: \"Only PNG images are supported in assistant messages\"\n                  });\n                }\n                if (part.data instanceof URL) {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: \"File data URLs in assistant messages are not supported\"\n                  });\n                }\n                return {\n                  inlineData: {\n                    mimeType: part.mediaType,\n                    data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                  }\n                };\n              }\n              case \"tool-call\": {\n                return {\n                  functionCall: {\n                    name: part.toolName,\n                    args: part.input\n                  },\n                  thoughtSignature: (_f = (_e = part.providerOptions) == null ? void 0 : _e.google) == null ? void 0 : _f.thoughtSignature\n                };\n              }\n            }\n          }).filter((part) => part !== void 0)\n        });\n        break;\n      }\n      case \"tool\": {\n        systemMessagesAllowed = false;\n        const parts = [];\n        for (const part of content) {\n          const output = part.output;\n          if (output.type === \"content\") {\n            for (const contentPart of output.value) {\n              switch (contentPart.type) {\n                case \"text\":\n                  parts.push({\n                    functionResponse: {\n                      name: part.toolName,\n                      response: {\n                        name: part.toolName,\n                        content: contentPart.text\n                      }\n                    }\n                  });\n                  break;\n                case \"media\":\n                  parts.push(\n                    {\n                      inlineData: {\n                        mimeType: contentPart.mediaType,\n                        data: contentPart.data\n                      }\n                    },\n                    {\n                      text: \"Tool executed successfully and returned this image as a response\"\n                    }\n                  );\n                  break;\n                default:\n                  parts.push({ text: JSON.stringify(contentPart) });\n                  break;\n              }\n            }\n          } else {\n            parts.push({\n              functionResponse: {\n                name: part.toolName,\n                response: {\n                  name: part.toolName,\n                  content: output.value\n                }\n              }\n            });\n          }\n        }\n        contents.push({\n          role: \"user\",\n          parts\n        });\n        break;\n      }\n    }\n  }\n  if (isGemmaModel && systemInstructionParts.length > 0 && contents.length > 0 && contents[0].role === \"user\") {\n    const systemText = systemInstructionParts.map((part) => part.text).join(\"\\n\\n\");\n    contents[0].parts.unshift({ text: systemText + \"\\n\\n\" });\n  }\n  return {\n    systemInstruction: systemInstructionParts.length > 0 && !isGemmaModel ? { parts: systemInstructionParts } : void 0,\n    contents\n  };\n}\n\n// src/get-model-path.ts\nfunction getModelPath(modelId) {\n  return modelId.includes(\"/\") ? modelId : `models/${modelId}`;\n}\n\n// src/google-generative-ai-options.ts\n\nvar googleGenerativeAIProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  responseModalities: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"TEXT\", \"IMAGE\"])).optional(),\n  thinkingConfig: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    thinkingBudget: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    includeThoughts: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n  }).optional(),\n  /**\n  Optional.\n  The name of the cached content used as context to serve the prediction.\n  Format: cachedContents/{cachedContent}\n     */\n  cachedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Optional. Enable structured output. Default is true.\n   *\n   * This is useful when the JSON Schema contains elements that are\n   * not supported by the OpenAPI schema version that\n   * Google Generative AI uses. You can use this to disable\n   * structured outputs if you need to.\n   */\n  structuredOutputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n  Optional. A list of unique safety settings for blocking unsafe content.\n   */\n  safetySettings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      category: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"HARM_CATEGORY_UNSPECIFIED\",\n        \"HARM_CATEGORY_HATE_SPEECH\",\n        \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        \"HARM_CATEGORY_HARASSMENT\",\n        \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        \"HARM_CATEGORY_CIVIC_INTEGRITY\"\n      ]),\n      threshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n        \"BLOCK_LOW_AND_ABOVE\",\n        \"BLOCK_MEDIUM_AND_ABOVE\",\n        \"BLOCK_ONLY_HIGH\",\n        \"BLOCK_NONE\",\n        \"OFF\"\n      ])\n    })\n  ).optional(),\n  threshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\",\n    \"OFF\"\n  ]).optional(),\n  /**\n   * Optional. Enables timestamp understanding for audio-only files.\n   *\n   * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/audio-understanding\n   */\n  audioTimestamp: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Optional. Defines labels used in billing reports. Available on Vertex AI only.\n   *\n   * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/add-labels-to-api-calls\n   */\n  labels: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n});\n\n// src/google-prepare-tools.ts\n\nfunction prepareTools({\n  tools,\n  toolChoice,\n  modelId\n}) {\n  var _a;\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  const isGemini2 = modelId.includes(\"gemini-2\");\n  const supportsDynamicRetrieval = modelId.includes(\"gemini-1.5-flash\") && !modelId.includes(\"-8b\");\n  if (tools == null) {\n    return { tools: void 0, toolConfig: void 0, toolWarnings };\n  }\n  const hasFunctionTools = tools.some((tool) => tool.type === \"function\");\n  const hasProviderDefinedTools = tools.some(\n    (tool) => tool.type === \"provider-defined\"\n  );\n  if (hasFunctionTools && hasProviderDefinedTools) {\n    toolWarnings.push({\n      type: \"unsupported-tool\",\n      tool: tools.find((tool) => tool.type === \"function\"),\n      details: \"Cannot mix function tools with provider-defined tools in the same request. Please use either function tools or provider-defined tools, but not both.\"\n    });\n  }\n  if (hasProviderDefinedTools) {\n    const googleTools2 = {};\n    const providerDefinedTools = tools.filter(\n      (tool) => tool.type === \"provider-defined\"\n    );\n    providerDefinedTools.forEach((tool) => {\n      switch (tool.id) {\n        case \"google.google_search\":\n          if (isGemini2) {\n            googleTools2.googleSearch = {};\n          } else if (supportsDynamicRetrieval) {\n            googleTools2.googleSearchRetrieval = {\n              dynamicRetrievalConfig: {\n                mode: tool.args.mode,\n                dynamicThreshold: tool.args.dynamicThreshold\n              }\n            };\n          } else {\n            googleTools2.googleSearchRetrieval = {};\n          }\n          break;\n        case \"google.url_context\":\n          if (isGemini2) {\n            googleTools2.urlContext = {};\n          } else {\n            toolWarnings.push({\n              type: \"unsupported-tool\",\n              tool,\n              details: \"The URL context tool is not supported with other Gemini models than Gemini 2.\"\n            });\n          }\n          break;\n        case \"google.code_execution\":\n          if (isGemini2) {\n            googleTools2.codeExecution = {};\n          } else {\n            toolWarnings.push({\n              type: \"unsupported-tool\",\n              tool,\n              details: \"The code execution tools is not supported with other Gemini models than Gemini 2.\"\n            });\n          }\n          break;\n        default:\n          toolWarnings.push({ type: \"unsupported-tool\", tool });\n          break;\n      }\n    });\n    return {\n      tools: Object.keys(googleTools2).length > 0 ? googleTools2 : void 0,\n      toolConfig: void 0,\n      toolWarnings\n    };\n  }\n  const functionDeclarations = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        functionDeclarations.push({\n          name: tool.name,\n          description: (_a = tool.description) != null ? _a : \"\",\n          parameters: convertJSONSchemaToOpenAPISchema(tool.inputSchema)\n        });\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return {\n      tools: { functionDeclarations },\n      toolConfig: void 0,\n      toolWarnings\n    };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: \"AUTO\" } },\n        toolWarnings\n      };\n    case \"none\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: \"NONE\" } },\n        toolWarnings\n      };\n    case \"required\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: \"ANY\" } },\n        toolWarnings\n      };\n    case \"tool\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: {\n          functionCallingConfig: {\n            mode: \"ANY\",\n            allowedFunctionNames: [toolChoice.toolName]\n          }\n        },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/map-google-generative-ai-finish-reason.ts\nfunction mapGoogleGenerativeAIFinishReason({\n  finishReason,\n  hasToolCalls\n}) {\n  switch (finishReason) {\n    case \"STOP\":\n      return hasToolCalls ? \"tool-calls\" : \"stop\";\n    case \"MAX_TOKENS\":\n      return \"length\";\n    case \"IMAGE_SAFETY\":\n    case \"RECITATION\":\n    case \"SAFETY\":\n    case \"BLOCKLIST\":\n    case \"PROHIBITED_CONTENT\":\n    case \"SPII\":\n      return \"content-filter\";\n    case \"FINISH_REASON_UNSPECIFIED\":\n    case \"OTHER\":\n      return \"other\";\n    case \"MALFORMED_FUNCTION_CALL\":\n      return \"error\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/tool/google-search.ts\n\n\nvar groundingChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  web: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ uri: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n  retrievedContext: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ uri: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish()\n});\nvar groundingMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  webSearchQueries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n  retrievalQueries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n  searchEntryPoint: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ renderedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n  groundingChunks: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(groundingChunkSchema).nullish(),\n  groundingSupports: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      segment: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        startIndex: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        endIndex: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      segment_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      groundingChunkIndices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).nullish(),\n      supportChunkIndices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).nullish(),\n      confidenceScores: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).nullish(),\n      confidenceScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).nullish()\n    })\n  ).nullish(),\n  retrievalMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      webDynamicRetrievalScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({})\n  ]).nullish()\n});\nvar googleSearch = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"google.google_search\",\n  name: \"google_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    mode: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"MODE_DYNAMIC\", \"MODE_UNSPECIFIED\"]).default(\"MODE_UNSPECIFIED\"),\n    dynamicThreshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().default(1)\n  })\n});\n\n// src/tool/url-context.ts\n\n\nvar urlMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  retrievedUrl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  urlRetrievalStatus: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar urlContextMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  urlMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(urlMetadataSchema)\n});\nvar urlContext = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"google.url_context\",\n  name: \"url_context\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({})\n});\n\n// src/google-generative-ai-language-model.ts\nvar GoogleGenerativeAILanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    var _a;\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = (_a = config.generateId) != null ? _a : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  get supportedUrls() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).supportedUrls) == null ? void 0 : _b.call(_a)) != null ? _c : {};\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b;\n    const warnings = [];\n    const googleOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"google\",\n      providerOptions,\n      schema: googleGenerativeAIProviderOptions\n    });\n    if (((_a = googleOptions == null ? void 0 : googleOptions.thinkingConfig) == null ? void 0 : _a.includeThoughts) === true && !this.config.provider.startsWith(\"google.vertex.\")) {\n      warnings.push({\n        type: \"other\",\n        message: `The 'includeThoughts' option is only supported with the Google Vertex provider and might not be supported or could behave unexpectedly with the current Google provider (${this.config.provider}).`\n      });\n    }\n    const isGemmaModel = this.modelId.toLowerCase().startsWith(\"gemma-\");\n    const { contents, systemInstruction } = convertToGoogleGenerativeAIMessages(\n      prompt,\n      { isGemmaModel }\n    );\n    const {\n      tools: googleTools2,\n      toolConfig: googleToolConfig,\n      toolWarnings\n    } = prepareTools({\n      tools,\n      toolChoice,\n      modelId: this.modelId\n    });\n    return {\n      args: {\n        generationConfig: {\n          // standardized settings:\n          maxOutputTokens,\n          temperature,\n          topK,\n          topP,\n          frequencyPenalty,\n          presencePenalty,\n          stopSequences,\n          seed,\n          // response format:\n          responseMimeType: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? \"application/json\" : void 0,\n          responseSchema: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && // Google GenAI does not support all OpenAPI Schema features,\n          // so this is needed as an escape hatch:\n          // TODO convert into provider option\n          ((_b = googleOptions == null ? void 0 : googleOptions.structuredOutputs) != null ? _b : true) ? convertJSONSchemaToOpenAPISchema(responseFormat.schema) : void 0,\n          ...(googleOptions == null ? void 0 : googleOptions.audioTimestamp) && {\n            audioTimestamp: googleOptions.audioTimestamp\n          },\n          // provider options:\n          responseModalities: googleOptions == null ? void 0 : googleOptions.responseModalities,\n          thinkingConfig: googleOptions == null ? void 0 : googleOptions.thinkingConfig\n        },\n        contents,\n        systemInstruction: isGemmaModel ? void 0 : systemInstruction,\n        safetySettings: googleOptions == null ? void 0 : googleOptions.safetySettings,\n        tools: googleTools2,\n        toolConfig: googleToolConfig,\n        cachedContent: googleOptions == null ? void 0 : googleOptions.cachedContent,\n        labels: googleOptions == null ? void 0 : googleOptions.labels\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;\n    const { args, warnings } = await this.getArgs(options);\n    const body = JSON.stringify(args);\n    const mergedHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      options.headers\n    );\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId\n      )}:generateContent`,\n      headers: mergedHeaders,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(responseSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const candidate = response.candidates[0];\n    const content = [];\n    const parts = (_b = (_a = candidate.content) == null ? void 0 : _a.parts) != null ? _b : [];\n    const usageMetadata = response.usageMetadata;\n    let lastCodeExecutionToolCallId;\n    for (const part of parts) {\n      if (\"executableCode\" in part && ((_c = part.executableCode) == null ? void 0 : _c.code)) {\n        const toolCallId = this.config.generateId();\n        lastCodeExecutionToolCallId = toolCallId;\n        content.push({\n          type: \"tool-call\",\n          toolCallId,\n          toolName: \"code_execution\",\n          input: JSON.stringify(part.executableCode),\n          providerExecuted: true\n        });\n      } else if (\"codeExecutionResult\" in part && part.codeExecutionResult) {\n        content.push({\n          type: \"tool-result\",\n          // Assumes a result directly follows its corresponding call part.\n          toolCallId: lastCodeExecutionToolCallId,\n          toolName: \"code_execution\",\n          result: {\n            outcome: part.codeExecutionResult.outcome,\n            output: part.codeExecutionResult.output\n          },\n          providerExecuted: true\n        });\n        lastCodeExecutionToolCallId = void 0;\n      } else if (\"text\" in part && part.text != null && part.text.length > 0) {\n        content.push({\n          type: part.thought === true ? \"reasoning\" : \"text\",\n          text: part.text,\n          providerMetadata: part.thoughtSignature ? { google: { thoughtSignature: part.thoughtSignature } } : void 0\n        });\n      } else if (\"functionCall\" in part) {\n        content.push({\n          type: \"tool-call\",\n          toolCallId: this.config.generateId(),\n          toolName: part.functionCall.name,\n          input: JSON.stringify(part.functionCall.args),\n          providerMetadata: part.thoughtSignature ? { google: { thoughtSignature: part.thoughtSignature } } : void 0\n        });\n      } else if (\"inlineData\" in part) {\n        content.push({\n          type: \"file\",\n          data: part.inlineData.data,\n          mediaType: part.inlineData.mimeType\n        });\n      }\n    }\n    const sources = (_d = extractSources({\n      groundingMetadata: candidate.groundingMetadata,\n      generateId: this.config.generateId\n    })) != null ? _d : [];\n    for (const source of sources) {\n      content.push(source);\n    }\n    return {\n      content,\n      finishReason: mapGoogleGenerativeAIFinishReason({\n        finishReason: candidate.finishReason,\n        hasToolCalls: content.some((part) => part.type === \"tool-call\")\n      }),\n      usage: {\n        inputTokens: (_e = usageMetadata == null ? void 0 : usageMetadata.promptTokenCount) != null ? _e : void 0,\n        outputTokens: (_f = usageMetadata == null ? void 0 : usageMetadata.candidatesTokenCount) != null ? _f : void 0,\n        totalTokens: (_g = usageMetadata == null ? void 0 : usageMetadata.totalTokenCount) != null ? _g : void 0,\n        reasoningTokens: (_h = usageMetadata == null ? void 0 : usageMetadata.thoughtsTokenCount) != null ? _h : void 0,\n        cachedInputTokens: (_i = usageMetadata == null ? void 0 : usageMetadata.cachedContentTokenCount) != null ? _i : void 0\n      },\n      warnings,\n      providerMetadata: {\n        google: {\n          groundingMetadata: (_j = candidate.groundingMetadata) != null ? _j : null,\n          urlContextMetadata: (_k = candidate.urlContextMetadata) != null ? _k : null,\n          safetyRatings: (_l = candidate.safetyRatings) != null ? _l : null,\n          usageMetadata: usageMetadata != null ? usageMetadata : null\n        }\n      },\n      request: { body },\n      response: {\n        // TODO timestamp, model id, id\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = JSON.stringify(args);\n    const headers = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      options.headers\n    );\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId\n      )}:streamGenerateContent?alt=sse`,\n      headers,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(chunkSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let providerMetadata = void 0;\n    const generateId3 = this.config.generateId;\n    let hasToolCalls = false;\n    let currentTextBlockId = null;\n    let currentReasoningBlockId = null;\n    let blockCounter = 0;\n    const emittedSourceUrls = /* @__PURE__ */ new Set();\n    let lastCodeExecutionToolCallId;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            const usageMetadata = value.usageMetadata;\n            if (usageMetadata != null) {\n              usage.inputTokens = (_a = usageMetadata.promptTokenCount) != null ? _a : void 0;\n              usage.outputTokens = (_b = usageMetadata.candidatesTokenCount) != null ? _b : void 0;\n              usage.totalTokens = (_c = usageMetadata.totalTokenCount) != null ? _c : void 0;\n              usage.reasoningTokens = (_d = usageMetadata.thoughtsTokenCount) != null ? _d : void 0;\n              usage.cachedInputTokens = (_e = usageMetadata.cachedContentTokenCount) != null ? _e : void 0;\n            }\n            const candidate = (_f = value.candidates) == null ? void 0 : _f[0];\n            if (candidate == null) {\n              return;\n            }\n            const content = candidate.content;\n            const sources = extractSources({\n              groundingMetadata: candidate.groundingMetadata,\n              generateId: generateId3\n            });\n            if (sources != null) {\n              for (const source of sources) {\n                if (source.sourceType === \"url\" && !emittedSourceUrls.has(source.url)) {\n                  emittedSourceUrls.add(source.url);\n                  controller.enqueue(source);\n                }\n              }\n            }\n            if (content != null) {\n              const parts = (_g = content.parts) != null ? _g : [];\n              for (const part of parts) {\n                if (\"executableCode\" in part && ((_h = part.executableCode) == null ? void 0 : _h.code)) {\n                  const toolCallId = generateId3();\n                  lastCodeExecutionToolCallId = toolCallId;\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId,\n                    toolName: \"code_execution\",\n                    input: JSON.stringify(part.executableCode),\n                    providerExecuted: true\n                  });\n                  hasToolCalls = true;\n                } else if (\"codeExecutionResult\" in part && part.codeExecutionResult) {\n                  const toolCallId = lastCodeExecutionToolCallId;\n                  if (toolCallId) {\n                    controller.enqueue({\n                      type: \"tool-result\",\n                      toolCallId,\n                      toolName: \"code_execution\",\n                      result: {\n                        outcome: part.codeExecutionResult.outcome,\n                        output: part.codeExecutionResult.output\n                      },\n                      providerExecuted: true\n                    });\n                    lastCodeExecutionToolCallId = void 0;\n                  }\n                } else if (\"text\" in part && part.text != null && part.text.length > 0) {\n                  if (part.thought === true) {\n                    if (currentTextBlockId !== null) {\n                      controller.enqueue({\n                        type: \"text-end\",\n                        id: currentTextBlockId\n                      });\n                      currentTextBlockId = null;\n                    }\n                    if (currentReasoningBlockId === null) {\n                      currentReasoningBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: \"reasoning-start\",\n                        id: currentReasoningBlockId,\n                        providerMetadata: part.thoughtSignature ? {\n                          google: {\n                            thoughtSignature: part.thoughtSignature\n                          }\n                        } : void 0\n                      });\n                    }\n                    controller.enqueue({\n                      type: \"reasoning-delta\",\n                      id: currentReasoningBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature ? {\n                        google: { thoughtSignature: part.thoughtSignature }\n                      } : void 0\n                    });\n                  } else {\n                    if (currentReasoningBlockId !== null) {\n                      controller.enqueue({\n                        type: \"reasoning-end\",\n                        id: currentReasoningBlockId\n                      });\n                      currentReasoningBlockId = null;\n                    }\n                    if (currentTextBlockId === null) {\n                      currentTextBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: \"text-start\",\n                        id: currentTextBlockId,\n                        providerMetadata: part.thoughtSignature ? {\n                          google: {\n                            thoughtSignature: part.thoughtSignature\n                          }\n                        } : void 0\n                      });\n                    }\n                    controller.enqueue({\n                      type: \"text-delta\",\n                      id: currentTextBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature ? {\n                        google: { thoughtSignature: part.thoughtSignature }\n                      } : void 0\n                    });\n                  }\n                }\n              }\n              const inlineDataParts = getInlineDataParts(content.parts);\n              if (inlineDataParts != null) {\n                for (const part of inlineDataParts) {\n                  controller.enqueue({\n                    type: \"file\",\n                    mediaType: part.inlineData.mimeType,\n                    data: part.inlineData.data\n                  });\n                }\n              }\n              const toolCallDeltas = getToolCallsFromParts({\n                parts: content.parts,\n                generateId: generateId3\n              });\n              if (toolCallDeltas != null) {\n                for (const toolCall of toolCallDeltas) {\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  controller.enqueue({\n                    type: \"tool-input-delta\",\n                    id: toolCall.toolCallId,\n                    delta: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  controller.enqueue({\n                    type: \"tool-input-end\",\n                    id: toolCall.toolCallId,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    input: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  hasToolCalls = true;\n                }\n              }\n            }\n            if (candidate.finishReason != null) {\n              finishReason = mapGoogleGenerativeAIFinishReason({\n                finishReason: candidate.finishReason,\n                hasToolCalls\n              });\n              providerMetadata = {\n                google: {\n                  groundingMetadata: (_i = candidate.groundingMetadata) != null ? _i : null,\n                  urlContextMetadata: (_j = candidate.urlContextMetadata) != null ? _j : null,\n                  safetyRatings: (_k = candidate.safetyRatings) != null ? _k : null\n                }\n              };\n              if (usageMetadata != null) {\n                providerMetadata.google.usageMetadata = usageMetadata;\n              }\n            }\n          },\n          flush(controller) {\n            if (currentTextBlockId !== null) {\n              controller.enqueue({\n                type: \"text-end\",\n                id: currentTextBlockId\n              });\n            }\n            if (currentReasoningBlockId !== null) {\n              controller.enqueue({\n                type: \"reasoning-end\",\n                id: currentReasoningBlockId\n              });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata\n            });\n          }\n        })\n      ),\n      response: { headers: responseHeaders },\n      request: { body }\n    };\n  }\n};\nfunction getToolCallsFromParts({\n  parts,\n  generateId: generateId3\n}) {\n  const functionCallParts = parts == null ? void 0 : parts.filter(\n    (part) => \"functionCall\" in part\n  );\n  return functionCallParts == null || functionCallParts.length === 0 ? void 0 : functionCallParts.map((part) => ({\n    type: \"tool-call\",\n    toolCallId: generateId3(),\n    toolName: part.functionCall.name,\n    args: JSON.stringify(part.functionCall.args),\n    providerMetadata: part.thoughtSignature ? { google: { thoughtSignature: part.thoughtSignature } } : void 0\n  }));\n}\nfunction getInlineDataParts(parts) {\n  return parts == null ? void 0 : parts.filter(\n    (part) => \"inlineData\" in part\n  );\n}\nfunction extractSources({\n  groundingMetadata,\n  generateId: generateId3\n}) {\n  var _a;\n  return (_a = groundingMetadata == null ? void 0 : groundingMetadata.groundingChunks) == null ? void 0 : _a.filter(\n    (chunk) => chunk.web != null\n  ).map((chunk) => ({\n    type: \"source\",\n    sourceType: \"url\",\n    id: generateId3(),\n    url: chunk.web.uri,\n    title: chunk.web.title\n  }));\n}\nvar contentSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  parts: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n      // note: order matters since text can be fully empty\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        functionCall: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          args: zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()\n        }),\n        thoughtSignature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        inlineData: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          mimeType: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        })\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        executableCode: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        }).nullish(),\n        codeExecutionResult: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          outcome: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        }).nullish(),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        thought: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n        thoughtSignature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      })\n    ])\n  ).nullish()\n});\nvar safetyRatingSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  category: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  probability: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  probabilityScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  severity: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  severityScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  blocked: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish()\n});\nvar usageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  cachedContentTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  thoughtsTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  promptTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  candidatesTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  totalTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n});\nvar responseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  candidates: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      content: contentSchema.nullish().or(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({}).strict()),\n      finishReason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      safetyRatings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(safetyRatingSchema).nullish(),\n      groundingMetadata: groundingMetadataSchema.nullish(),\n      urlContextMetadata: urlContextMetadataSchema.nullish()\n    })\n  ),\n  usageMetadata: usageSchema.nullish()\n});\nvar chunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  candidates: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      content: contentSchema.nullish(),\n      finishReason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      safetyRatings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(safetyRatingSchema).nullish(),\n      groundingMetadata: groundingMetadataSchema.nullish(),\n      urlContextMetadata: urlContextMetadataSchema.nullish()\n    })\n  ).nullish(),\n  usageMetadata: usageSchema.nullish()\n});\n\n// src/tool/code-execution.ts\n\n\nvar codeExecution = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"google.code_execution\",\n  name: \"code_execution\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().describe(\"The programming language of the code.\"),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().describe(\"The code to be executed.\")\n  }),\n  outputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    outcome: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().describe('The outcome of the execution (e.g., \"OUTCOME_OK\").'),\n    output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().describe(\"The output from the code execution.\")\n  })\n});\n\n// src/google-tools.ts\nvar googleTools = {\n  /**\n   * Creates a Google search tool that gives Google direct access to real-time web content.\n   * Must have name \"google_search\".\n   */\n  googleSearch,\n  /**\n   * Creates a URL context tool that gives Google direct access to real-time web content.\n   * Must have name \"url_context\".\n   */\n  urlContext,\n  /**\n   * A tool that enables the model to generate and run Python code.\n   * Must have name \"code_execution\".\n   *\n   * @note Ensure the selected model supports Code Execution.\n   * Multi-tool usage with the code execution tool is typically compatible with Gemini >=2 models.\n   *\n   * @see https://ai.google.dev/gemini-api/docs/code-execution (Google AI)\n   * @see https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-execution-api (Vertex AI)\n   */\n  codeExecution\n};\n\n// src/google-generative-ai-image-model.ts\n\n\nvar GoogleGenerativeAIImageModel = class {\n  constructor(modelId, settings, config) {\n    this.modelId = modelId;\n    this.settings = settings;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get maxImagesPerCall() {\n    var _a;\n    return (_a = this.settings.maxImagesPerCall) != null ? _a : 4;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const {\n      prompt,\n      n = 1,\n      size = \"1024x1024\",\n      aspectRatio = \"1:1\",\n      seed,\n      providerOptions,\n      headers,\n      abortSignal\n    } = options;\n    const warnings = [];\n    if (size != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"size\",\n        details: \"This model does not support the `size` option. Use `aspectRatio` instead.\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"seed\",\n        details: \"This model does not support the `seed` option through this provider.\"\n      });\n    }\n    const googleOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"google\",\n      providerOptions,\n      schema: googleImageProviderOptionsSchema\n    });\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const parameters = {\n      sampleCount: n\n    };\n    if (aspectRatio != null) {\n      parameters.aspectRatio = aspectRatio;\n    }\n    if (googleOptions) {\n      Object.assign(parameters, googleOptions);\n    }\n    const body = {\n      instances: [{ prompt }],\n      parameters\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: `${this.config.baseURL}/models/${this.modelId}:predict`,\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers), headers),\n      body,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        googleImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: response.predictions.map(\n        (p) => p.bytesBase64Encoded\n      ),\n      warnings: warnings != null ? warnings : [],\n      providerMetadata: {\n        google: {\n          images: response.predictions.map((prediction) => ({\n            // Add any prediction-specific metadata here\n          }))\n        }\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      }\n    };\n  }\n};\nvar googleImageResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  predictions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ bytesBase64Encoded: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })).default([])\n});\nvar googleImageProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  personGeneration: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"dont_allow\", \"allow_adult\", \"allow_all\"]).nullish(),\n  aspectRatio: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"1:1\", \"3:4\", \"4:3\", \"9:16\", \"16:9\"]).nullish()\n});\n\n// src/google-provider.ts\nfunction createGoogleGenerativeAI(options = {}) {\n  var _a;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://generativelanguage.googleapis.com/v1beta\";\n  const getHeaders = () => ({\n    \"x-goog-api-key\": (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"GOOGLE_GENERATIVE_AI_API_KEY\",\n      description: \"Google Generative AI\"\n    }),\n    ...options.headers\n  });\n  const createChatModel = (modelId) => {\n    var _a2;\n    return new GoogleGenerativeAILanguageModel(modelId, {\n      provider: \"google.generative-ai\",\n      baseURL,\n      headers: getHeaders,\n      generateId: (_a2 = options.generateId) != null ? _a2 : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId,\n      supportedUrls: () => ({\n        \"*\": [\n          // Google Generative Language \"files\" endpoint\n          // e.g. https://generativelanguage.googleapis.com/v1beta/files/...\n          new RegExp(`^${baseURL}/files/.*$`),\n          // YouTube URLs (public or unlisted videos)\n          new RegExp(\n            `^https://(?:www\\\\.)?youtube\\\\.com/watch\\\\?v=[\\\\w-]+(?:&[\\\\w=&.-]*)?$`\n          ),\n          new RegExp(`^https://youtu\\\\.be/[\\\\w-]+(?:\\\\?[\\\\w=&.-]*)?$`)\n        ]\n      }),\n      fetch: options.fetch\n    });\n  };\n  const createEmbeddingModel = (modelId) => new GoogleGenerativeAIEmbeddingModel(modelId, {\n    provider: \"google.generative-ai\",\n    baseURL,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createImageModel = (modelId, settings = {}) => new GoogleGenerativeAIImageModel(modelId, settings, {\n    provider: \"google.generative-ai\",\n    baseURL,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Google Generative AI model function cannot be called with the new keyword.\"\n      );\n    }\n    return createChatModel(modelId);\n  };\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.generativeAI = createChatModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.tools = googleTools;\n  return provider;\n}\nvar google = createGoogleGenerativeAI();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/google/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/openai/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@ai-sdk/openai/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOpenAI: () => (/* binding */ createOpenAI),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/classic/coerce.js\");\n// src/openai-provider.ts\n\n\n// src/chat/openai-chat-language-model.ts\n\n\n\n\n// src/openai-error.ts\n\n\nvar openaiErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    // The additional information below is handled loosely to support\n    // OpenAI-compatible providers that have slightly different error\n    // responses:\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).nullish()\n  })\n});\nvar openaiFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: openaiErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/chat/convert-to-openai-chat-messages.ts\n\n\nfunction convertToOpenAIChatMessages({\n  prompt,\n  systemMessageMode = \"system\"\n}) {\n  const messages = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            messages.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            messages.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        if (content.length === 1 && content[0].type === \"text\") {\n          messages.push({ role: \"user\", content: content[0].text });\n          break;\n        }\n        messages.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a, _b, _c;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"image_url\",\n                    image_url: {\n                      url: part.data instanceof URL ? part.data.toString() : `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`,\n                      // OpenAI specific extension: image detail\n                      detail: (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.imageDetail\n                    }\n                  };\n                } else if (part.mediaType.startsWith(\"audio/\")) {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"audio file parts with URLs\"\n                    });\n                  }\n                  switch (part.mediaType) {\n                    case \"audio/wav\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"wav\"\n                        }\n                      };\n                    }\n                    case \"audio/mp3\":\n                    case \"audio/mpeg\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"mp3\"\n                        }\n                      };\n                    }\n                    default: {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `audio content parts with media type ${part.mediaType}`\n                      });\n                    }\n                  }\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"PDF file parts with URLs\"\n                    });\n                  }\n                  return {\n                    type: \"file\",\n                    file: typeof part.data === \"string\" && part.data.startsWith(\"file-\") ? { file_id: part.data } : {\n                      filename: (_c = part.filename) != null ? _c : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        let text = \"\";\n        const toolCalls = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              text += part.text;\n              break;\n            }\n            case \"tool-call\": {\n              toolCalls.push({\n                id: part.toolCallId,\n                type: \"function\",\n                function: {\n                  name: part.toolName,\n                  arguments: JSON.stringify(part.input)\n                }\n              });\n              break;\n            }\n          }\n        }\n        messages.push({\n          role: \"assistant\",\n          content: text,\n          tool_calls: toolCalls.length > 0 ? toolCalls : void 0\n        });\n        break;\n      }\n      case \"tool\": {\n        for (const toolResponse of content) {\n          const output = toolResponse.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          messages.push({\n            role: \"tool\",\n            tool_call_id: toolResponse.toolCallId,\n            content: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { messages, warnings };\n}\n\n// src/chat/get-response-metadata.ts\nfunction getResponseMetadata({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/chat/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/chat/openai-chat-options.ts\n\nvar openaiProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a JSON object that maps tokens (specified by their token ID in\n   * the GPT tokenizer) to an associated bias value from -100 to 100.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_3__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional(),\n  /**\n   * Whether to enable parallel function calling during tool use. Default to true.\n   */\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to\n   * monitor and detect abuse.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Reasoning effort for reasoning models. Defaults to `medium`.\n   */\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"minimal\", \"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * Maximum number of completion tokens to generate. Useful for reasoning models.\n   */\n  maxCompletionTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Whether to enable persistence in responses API.\n   */\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Metadata to associate with the request.\n   */\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(64), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(512)).optional(),\n  /**\n   * Parameters for prediction mode.\n   */\n  prediction: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.any()).optional(),\n  /**\n   * Whether to use structured outputs.\n   *\n   * @default true\n   */\n  structuredOutputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Service tier for the request.\n   * - 'auto': Default service tier\n   * - 'flex': 50% cheaper processing at the cost of increased latency. Only available for o3 and o4-mini models.\n   * - 'priority': Higher-speed processing with predictably low latency at premium cost. Available for Enterprise customers.\n   *\n   * @default 'auto'\n   */\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\"]).optional(),\n  /**\n   * Whether to use strict JSON schema validation.\n   *\n   * @default false\n   */\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Controls the verbosity of the model's responses.\n   * Lower values will result in more concise responses, while higher values will result in more verbose responses.\n   */\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * A cache key for prompt caching. Allows manual control over prompt caching behavior.\n   * Useful for improving cache hit rates and working around automatic caching issues.\n   */\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * A stable identifier used to help detect users of your application\n   * that may be violating OpenAI's usage policies. The IDs should be a\n   * string that uniquely identifies each user. We recommend hashing their\n   * username or email address, in order to avoid sending us any identifying\n   * information.\n   */\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/chat/openai-chat-prepare-tools.ts\n\n\n// src/tool/file-search.ts\n\n\nvar comparisonFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"eq\", \"ne\", \"gt\", \"gte\", \"lt\", \"lte\"]),\n  value: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean()])\n});\nvar compoundFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"and\", \"or\"]),\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, zod_v4__WEBPACK_IMPORTED_MODULE_0__.lazy(() => compoundFilterSchema)])\n  )\n});\nvar filtersSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, compoundFilterSchema]);\nvar fileSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  vectorStoreIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  maxNumResults: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  ranking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    ranker: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"default-2024-08-21\"]).optional()\n  }).optional(),\n  filters: filtersSchema.optional()\n});\nvar fileSearch = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.file_search\",\n  name: \"file_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n});\n\n// src/tool/web-search-preview.ts\n\n\nvar webSearchPreviewArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Search context size to use for the web search.\n   * - high: Most comprehensive context, highest cost, slower response\n   * - medium: Balanced context, cost, and latency (default)\n   * - low: Least context, lowest cost, fastest response\n   */\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * User location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Type of location (always 'approximate')\n     */\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    /**\n     * Two-letter ISO country code (e.g., 'US', 'GB')\n     */\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * City name (free text, e.g., 'Minneapolis')\n     */\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * Region name (free text, e.g., 'Minnesota')\n     */\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * IANA timezone (e.g., 'America/Chicago')\n     */\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearchPreview = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search_preview\",\n  name: \"web_search_preview\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      })\n    ]).nullish()\n  })\n});\n\n// src/chat/openai-chat-prepare-tools.ts\nfunction prepareChatTools({\n  tools,\n  toolChoice,\n  structuredOutputs,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: tool.inputSchema,\n            strict: structuredOutputs ? strictJsonSchema : void 0\n          }\n        });\n        break;\n      case \"provider-defined\":\n        switch (tool.id) {\n          case \"openai.file_search\": {\n            const args = fileSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"file_search\",\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking ? { ranker: args.ranking.ranker } : void 0,\n              filters: args.filters\n            });\n            break;\n          }\n          case \"openai.web_search_preview\": {\n            const args = webSearchPreviewArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search_preview\",\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: {\n          type: \"function\",\n          function: {\n            name: toolChoice.toolName\n          }\n        },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/chat/openai-chat-language-model.ts\nvar OpenAIChatLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiProviderOptions\n    })) != null ? _a : {};\n    const structuredOutputs = (_b = openaiOptions.structuredOutputs) != null ? _b : true;\n    if (topK != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"topK\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && !structuredOutputs) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format schema is only supported with structuredOutputs\"\n      });\n    }\n    const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages(\n      {\n        prompt,\n        systemMessageMode: getSystemMessageMode(this.modelId)\n      }\n    );\n    warnings.push(...messageWarnings);\n    const strictJsonSchema = (_c = openaiOptions.strictJsonSchema) != null ? _c : false;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // model specific settings:\n      logit_bias: openaiOptions.logitBias,\n      logprobs: openaiOptions.logprobs === true || typeof openaiOptions.logprobs === \"number\" ? true : void 0,\n      top_logprobs: typeof openaiOptions.logprobs === \"number\" ? openaiOptions.logprobs : typeof openaiOptions.logprobs === \"boolean\" ? openaiOptions.logprobs ? 0 : void 0 : void 0,\n      user: openaiOptions.user,\n      parallel_tool_calls: openaiOptions.parallelToolCalls,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      presence_penalty: presencePenalty,\n      response_format: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? structuredOutputs && responseFormat.schema != null ? {\n        type: \"json_schema\",\n        json_schema: {\n          schema: responseFormat.schema,\n          strict: strictJsonSchema,\n          name: (_d = responseFormat.name) != null ? _d : \"response\",\n          description: responseFormat.description\n        }\n      } : { type: \"json_object\" } : void 0,\n      stop: stopSequences,\n      seed,\n      verbosity: openaiOptions.textVerbosity,\n      // openai specific settings:\n      // TODO AI SDK 6: remove, we auto-map maxOutputTokens now\n      max_completion_tokens: openaiOptions.maxCompletionTokens,\n      store: openaiOptions.store,\n      metadata: openaiOptions.metadata,\n      prediction: openaiOptions.prediction,\n      reasoning_effort: openaiOptions.reasoningEffort,\n      service_tier: openaiOptions.serviceTier,\n      prompt_cache_key: openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions.safetyIdentifier,\n      // messages:\n      messages\n    };\n    if (isReasoningModel(this.modelId)) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.frequency_penalty != null) {\n        baseArgs.frequency_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"frequencyPenalty\",\n          details: \"frequencyPenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.presence_penalty != null) {\n        baseArgs.presence_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"presencePenalty\",\n          details: \"presencePenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logit_bias != null) {\n        baseArgs.logit_bias = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logitBias is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logprobs != null) {\n        baseArgs.logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_logprobs != null) {\n        baseArgs.top_logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"topLogprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.max_tokens != null) {\n        if (baseArgs.max_completion_tokens == null) {\n          baseArgs.max_completion_tokens = baseArgs.max_tokens;\n        }\n        baseArgs.max_tokens = void 0;\n      }\n    } else if (this.modelId.startsWith(\"gpt-4o-search-preview\") || this.modelId.startsWith(\"gpt-4o-mini-search-preview\")) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for the search preview models and has been removed.\"\n        });\n      }\n    }\n    if (openaiOptions.serviceTier === \"flex\" && !supportsFlexProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    if (openaiOptions.serviceTier === \"priority\" && !supportsPriorityProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareChatTools({\n      tools,\n      toolChoice,\n      structuredOutputs,\n      strictJsonSchema\n    });\n    return {\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n    const { args: body, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiChatResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const content = [];\n    const text = choice.message.content;\n    if (text != null && text.length > 0) {\n      content.push({ type: \"text\", text });\n    }\n    for (const toolCall of (_a = choice.message.tool_calls) != null ? _a : []) {\n      content.push({\n        type: \"tool-call\",\n        toolCallId: (_b = toolCall.id) != null ? _b : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        toolName: toolCall.function.name,\n        input: toolCall.function.arguments\n      });\n    }\n    for (const annotation of (_c = choice.message.annotations) != null ? _c : []) {\n      content.push({\n        type: \"source\",\n        sourceType: \"url\",\n        id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        url: annotation.url,\n        title: annotation.title\n      });\n    }\n    const completionTokenDetails = (_d = response.usage) == null ? void 0 : _d.completion_tokens_details;\n    const promptTokenDetails = (_e = response.usage) == null ? void 0 : _e.prompt_tokens_details;\n    const providerMetadata = { openai: {} };\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) {\n      providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;\n    }\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) {\n      providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;\n    }\n    if (((_f = choice.logprobs) == null ? void 0 : _f.content) != null) {\n      providerMetadata.openai.logprobs = choice.logprobs.content;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIFinishReason(choice.finish_reason),\n      usage: {\n        inputTokens: (_h = (_g = response.usage) == null ? void 0 : _g.prompt_tokens) != null ? _h : void 0,\n        outputTokens: (_j = (_i = response.usage) == null ? void 0 : _i.completion_tokens) != null ? _j : void 0,\n        totalTokens: (_l = (_k = response.usage) == null ? void 0 : _k.total_tokens) != null ? _l : void 0,\n        reasoningTokens: (_m = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null ? _m : void 0,\n        cachedInputTokens: (_n = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null ? _n : void 0\n      },\n      request: { body },\n      response: {\n        ...getResponseMetadata(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiChatChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const toolCalls = [];\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    let isActiveText = false;\n    const providerMetadata = { openai: {} };\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata(value)\n              });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = (_a = value.usage.prompt_tokens) != null ? _a : void 0;\n              usage.outputTokens = (_b = value.usage.completion_tokens) != null ? _b : void 0;\n              usage.totalTokens = (_c = value.usage.total_tokens) != null ? _c : void 0;\n              usage.reasoningTokens = (_e = (_d = value.usage.completion_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : void 0;\n              usage.cachedInputTokens = (_g = (_f = value.usage.prompt_tokens_details) == null ? void 0 : _f.cached_tokens) != null ? _g : void 0;\n              if (((_h = value.usage.completion_tokens_details) == null ? void 0 : _h.accepted_prediction_tokens) != null) {\n                providerMetadata.openai.acceptedPredictionTokens = (_i = value.usage.completion_tokens_details) == null ? void 0 : _i.accepted_prediction_tokens;\n              }\n              if (((_j = value.usage.completion_tokens_details) == null ? void 0 : _j.rejected_prediction_tokens) != null) {\n                providerMetadata.openai.rejectedPredictionTokens = (_k = value.usage.completion_tokens_details) == null ? void 0 : _k.rejected_prediction_tokens;\n              }\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason(choice.finish_reason);\n            }\n            if (((_l = choice == null ? void 0 : choice.logprobs) == null ? void 0 : _l.content) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs.content;\n            }\n            if ((choice == null ? void 0 : choice.delta) == null) {\n              return;\n            }\n            const delta = choice.delta;\n            if (delta.content != null) {\n              if (!isActiveText) {\n                controller.enqueue({ type: \"text-start\", id: \"0\" });\n                isActiveText = true;\n              }\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: delta.content\n              });\n            }\n            if (delta.tool_calls != null) {\n              for (const toolCallDelta of delta.tool_calls) {\n                const index = toolCallDelta.index;\n                if (toolCalls[index] == null) {\n                  if (toolCallDelta.type !== \"function\") {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function' type.`\n                    });\n                  }\n                  if (toolCallDelta.id == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'id' to be a string.`\n                    });\n                  }\n                  if (((_m = toolCallDelta.function) == null ? void 0 : _m.name) == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function.name' to be a string.`\n                    });\n                  }\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCallDelta.id,\n                    toolName: toolCallDelta.function.name\n                  });\n                  toolCalls[index] = {\n                    id: toolCallDelta.id,\n                    type: \"function\",\n                    function: {\n                      name: toolCallDelta.function.name,\n                      arguments: (_n = toolCallDelta.function.arguments) != null ? _n : \"\"\n                    },\n                    hasFinished: false\n                  };\n                  const toolCall2 = toolCalls[index];\n                  if (((_o = toolCall2.function) == null ? void 0 : _o.name) != null && ((_p = toolCall2.function) == null ? void 0 : _p.arguments) != null) {\n                    if (toolCall2.function.arguments.length > 0) {\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: toolCall2.id,\n                        delta: toolCall2.function.arguments\n                      });\n                    }\n                    if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall2.function.arguments)) {\n                      controller.enqueue({\n                        type: \"tool-input-end\",\n                        id: toolCall2.id\n                      });\n                      controller.enqueue({\n                        type: \"tool-call\",\n                        toolCallId: (_q = toolCall2.id) != null ? _q : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                        toolName: toolCall2.function.name,\n                        input: toolCall2.function.arguments\n                      });\n                      toolCall2.hasFinished = true;\n                    }\n                  }\n                  continue;\n                }\n                const toolCall = toolCalls[index];\n                if (toolCall.hasFinished) {\n                  continue;\n                }\n                if (((_r = toolCallDelta.function) == null ? void 0 : _r.arguments) != null) {\n                  toolCall.function.arguments += (_t = (_s = toolCallDelta.function) == null ? void 0 : _s.arguments) != null ? _t : \"\";\n                }\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.id,\n                  delta: (_u = toolCallDelta.function.arguments) != null ? _u : \"\"\n                });\n                if (((_v = toolCall.function) == null ? void 0 : _v.name) != null && ((_w = toolCall.function) == null ? void 0 : _w.arguments) != null && (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall.function.arguments)) {\n                  controller.enqueue({\n                    type: \"tool-input-end\",\n                    id: toolCall.id\n                  });\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: (_x = toolCall.id) != null ? _x : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                    toolName: toolCall.function.name,\n                    input: toolCall.function.arguments\n                  });\n                  toolCall.hasFinished = true;\n                }\n              }\n            }\n            if (delta.annotations != null) {\n              for (const annotation of delta.annotations) {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              }\n            }\n          },\n          flush(controller) {\n            if (isActiveText) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              ...providerMetadata != null ? { providerMetadata } : {}\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar openaiTokenUsageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  prompt_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  }).nullish(),\n  completion_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    accepted_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    rejected_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  }).nullish()\n}).nullish();\nvar openaiChatResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\").nullish(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\"),\n            function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n            })\n          })\n        ).nullish(),\n        annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n            start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ).nullish()\n      }),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n              })\n            )\n          })\n        ).nullish()\n      }).nullish(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    })\n  ),\n  usage: openaiTokenUsageSchema\n});\nvar openaiChatChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          role: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"assistant\"]).nullish(),\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n          tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\").nullish(),\n              function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n              })\n            })\n          ).nullish(),\n          annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n              start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n            })\n          ).nullish()\n        }).nullish(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                  token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                  logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n                })\n              )\n            })\n          ).nullish()\n        }).nullish(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      })\n    ),\n    usage: openaiTokenUsageSchema\n  }),\n  openaiErrorDataSchema\n]);\nfunction isReasoningModel(modelId) {\n  return (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\")) && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsFlexProcessing(modelId) {\n  return modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsPriorityProcessing(modelId) {\n  return modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n}\nfunction getSystemMessageMode(modelId) {\n  var _a, _b;\n  if (!isReasoningModel(modelId)) {\n    return \"system\";\n  }\n  return (_b = (_a = reasoningModels[modelId]) == null ? void 0 : _a.systemMessageMode) != null ? _b : \"developer\";\n}\nvar reasoningModels = {\n  \"o1-mini\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-mini-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  o3: {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini-2025-01-31\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  }\n};\n\n// src/completion/openai-completion-language-model.ts\n\n\n\n// src/completion/convert-to-openai-completion-prompt.ts\n\nfunction convertToOpenAICompletionPrompt({\n  prompt,\n  user = \"user\",\n  assistant = \"assistant\"\n}) {\n  let text = \"\";\n  if (prompt[0].role === \"system\") {\n    text += `${prompt[0].content}\n\n`;\n    prompt = prompt.slice(1);\n  }\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidPromptError({\n          message: \"Unexpected system message in prompt: ${content}\",\n          prompt\n        });\n      }\n      case \"user\": {\n        const userMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n          }\n        }).filter(Boolean).join(\"\");\n        text += `${user}:\n${userMessage}\n\n`;\n        break;\n      }\n      case \"assistant\": {\n        const assistantMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n            case \"tool-call\": {\n              throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                functionality: \"tool-call messages\"\n              });\n            }\n          }\n        }).join(\"\");\n        text += `${assistant}:\n${assistantMessage}\n\n`;\n        break;\n      }\n      case \"tool\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"tool messages\"\n        });\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  text += `${assistant}:\n`;\n  return {\n    prompt: text,\n    stopSequences: [`\n${user}:`]\n  };\n}\n\n// src/completion/get-response-metadata.ts\nfunction getResponseMetadata2({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/completion/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason2(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/completion/openai-completion-options.ts\n\nvar openaiCompletionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n  Echo back the prompt in addition to the completion.\n     */\n  echo: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n  Modify the likelihood of specified tokens appearing in the completion.\n  \n  Accepts a JSON object that maps tokens (specified by their token ID in\n  the GPT tokenizer) to an associated bias value from -100 to 100. You\n  can use this tokenizer tool to convert text to token IDs. Mathematically,\n  the bias is added to the logits generated by the model prior to sampling.\n  The exact effect will vary per model, but values between -1 and 1 should\n  decrease or increase likelihood of selection; values like -100 or 100\n  should result in a ban or exclusive selection of the relevant token.\n  \n  As an example, you can pass {\"50256\": -100} to prevent the <|endoftext|>\n  token from being generated.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n  /**\n  The suffix that comes after a completion of inserted text.\n   */\n  suffix: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n  Return the log probabilities of the tokens. Including logprobs will increase\n  the response size and can slow down response times. However, it can\n  be useful to better understand how the model is behaving.\n  Setting to true will return the log probabilities of the tokens that\n  were generated.\n  Setting to a number will return the log probabilities of the top n\n  tokens that were generated.\n     */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional()\n});\n\n// src/completion/openai-completion-language-model.ts\nvar OpenAICompletionLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      // No URLs are supported for completion models.\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get providerOptionsName() {\n    return this.config.provider.split(\".\")[0].trim();\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences: userStopSequences,\n    responseFormat,\n    tools,\n    toolChoice,\n    seed,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openaiOptions = {\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: \"openai\",\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      }),\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: this.providerOptionsName,\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      })\n    };\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (tools == null ? void 0 : tools.length) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"tools\" });\n    }\n    if (toolChoice != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"toolChoice\" });\n    }\n    if (responseFormat != null && responseFormat.type !== \"text\") {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format is not supported.\"\n      });\n    }\n    const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({ prompt });\n    const stop = [...stopSequences != null ? stopSequences : [], ...userStopSequences != null ? userStopSequences : []];\n    return {\n      args: {\n        // model id:\n        model: this.modelId,\n        // model specific settings:\n        echo: openaiOptions.echo,\n        logit_bias: openaiOptions.logitBias,\n        logprobs: (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? 0 : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === false ? void 0 : openaiOptions == null ? void 0 : openaiOptions.logprobs,\n        suffix: openaiOptions.suffix,\n        user: openaiOptions.user,\n        // standardized settings:\n        max_tokens: maxOutputTokens,\n        temperature,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n        seed,\n        // prompt:\n        prompt: completionPrompt,\n        // stop sequences:\n        stop: stop.length > 0 ? stop : void 0\n      },\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const { args, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: args,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiCompletionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const providerMetadata = { openai: {} };\n    if (choice.logprobs != null) {\n      providerMetadata.openai.logprobs = choice.logprobs;\n    }\n    return {\n      content: [{ type: \"text\", text: choice.text }],\n      usage: {\n        inputTokens: (_a = response.usage) == null ? void 0 : _a.prompt_tokens,\n        outputTokens: (_b = response.usage) == null ? void 0 : _b.completion_tokens,\n        totalTokens: (_c = response.usage) == null ? void 0 : _c.total_tokens\n      },\n      finishReason: mapOpenAIFinishReason2(choice.finish_reason),\n      request: { body: args },\n      response: {\n        ...getResponseMetadata2(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiCompletionChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const providerMetadata = { openai: {} };\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata2(value)\n              });\n              controller.enqueue({ type: \"text-start\", id: \"0\" });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens;\n              usage.outputTokens = value.usage.completion_tokens;\n              usage.totalTokens = value.usage.total_tokens;\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason2(choice.finish_reason);\n            }\n            if ((choice == null ? void 0 : choice.logprobs) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs;\n            }\n            if ((choice == null ? void 0 : choice.text) != null && choice.text.length > 0) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: choice.text\n              });\n            }\n          },\n          flush(controller) {\n            if (!isFirstChunk) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              providerMetadata,\n              usage\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar openaiCompletionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n        token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n        top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n      }).nullish()\n    })\n  ),\n  usage: usageSchema.nullish()\n});\nvar openaiCompletionChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n          token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n          top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n        }).nullish()\n      })\n    ),\n    usage: usageSchema.nullish()\n  }),\n  openaiErrorDataSchema\n]);\n\n// src/embedding/openai-embedding-model.ts\n\n\n\n\n// src/embedding/openai-embedding-options.ts\n\nvar openaiEmbeddingProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n  The number of dimensions the resulting output embeddings should have.\n  Only supported in text-embedding-3 and later models.\n     */\n  dimensions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n  */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/embedding/openai-embedding-model.ts\nvar OpenAIEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a;\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiEmbeddingProviderOptions\n    })) != null ? _a : {};\n    const {\n      responseHeaders,\n      value: response,\n      rawValue\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/embeddings\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        input: values,\n        encoding_format: \"float\",\n        dimensions: openaiOptions.dimensions,\n        user: openaiOptions.user\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTextEmbeddingResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      embeddings: response.data.map((item) => item.embedding),\n      usage: response.usage ? { tokens: response.usage.prompt_tokens } : void 0,\n      response: { headers: responseHeaders, body: rawValue }\n    };\n  }\n};\nvar openaiTextEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ embedding: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()) })),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() }).nullish()\n});\n\n// src/image/openai-image-model.ts\n\n\n\n// src/image/openai-image-options.ts\nvar modelMaxImagesPerCall = {\n  \"dall-e-3\": 1,\n  \"dall-e-2\": 10,\n  \"gpt-image-1\": 10\n};\nvar hasDefaultResponseFormat = /* @__PURE__ */ new Set([\"gpt-image-1\"]);\n\n// src/image/openai-image-model.ts\nvar OpenAIImageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get maxImagesPerCall() {\n    var _a;\n    return (_a = modelMaxImagesPerCall[this.modelId]) != null ? _a : 1;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doGenerate({\n    prompt,\n    n,\n    size,\n    aspectRatio,\n    seed,\n    providerOptions,\n    headers,\n    abortSignal\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    if (aspectRatio != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"aspectRatio\",\n        details: \"This model does not support aspect ratio. Use `size` instead.\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/images/generations\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        prompt,\n        n,\n        size,\n        ...(_d = providerOptions.openai) != null ? _d : {},\n        ...!hasDefaultResponseFormat.has(this.modelId) ? { response_format: \"b64_json\" } : {}\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: response.data.map((item) => item.b64_json),\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      },\n      providerMetadata: {\n        openai: {\n          images: response.data.map(\n            (item) => item.revised_prompt ? {\n              revisedPrompt: item.revised_prompt\n            } : null\n          )\n        }\n      }\n    };\n  }\n};\nvar openaiImageResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ b64_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), revised_prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional() })\n  )\n});\n\n// src/tool/code-interpreter.ts\n\n\nvar codeInterpreterArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  container: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      fileIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n    })\n  ]).optional()\n});\nvar codeInterpreterToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.code_interpreter\",\n  name: \"code_interpreter\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({})\n});\nvar codeInterpreter = (args = {}) => {\n  return codeInterpreterToolFactory(args);\n};\n\n// src/tool/web-search.ts\n\n\nvar webSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n  }).optional(),\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearchToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      })\n    ]).nullish()\n  })\n});\nvar webSearch = (args = {}) => {\n  return webSearchToolFactory(args);\n};\n\n// src/openai-tools.ts\nvar openaiTools = {\n  /**\n   * The Code Interpreter tool allows models to write and run Python code in a\n   * sandboxed environment to solve complex problems in domains like data analysis,\n   * coding, and math.\n   *\n   * @param container - The container to use for the code interpreter.\n   *\n   * Must have name `code_interpreter`.\n   */\n  codeInterpreter,\n  /**\n   * File search is a tool available in the Responses API. It enables models to\n   * retrieve information in a knowledge base of previously uploaded files through\n   * semantic and keyword search.\n   *\n   * Must have name `file_search`.\n   *\n   * @param vectorStoreIds - The vector store IDs to use for the file search.\n   * @param maxNumResults - The maximum number of results to return.\n   * @param ranking - The ranking options to use for the file search.\n   * @param filters - The filters to use for the file search.\n   */\n  fileSearch,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search_preview`.\n   *\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   *\n   * @deprecated Use `webSearch` instead.\n   */\n  webSearchPreview,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search`.\n   *\n   * @param filters - The filters to use for the web search.\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   */\n  webSearch\n};\n\n// src/responses/openai-responses-language-model.ts\n\n\n\n\n// src/responses/convert-to-openai-responses-messages.ts\n\n\n\n\nfunction isFileId(data, prefixes) {\n  if (!prefixes) return false;\n  return prefixes.some((prefix) => data.startsWith(prefix));\n}\nasync function convertToOpenAIResponsesMessages({\n  prompt,\n  systemMessageMode,\n  fileIdPrefixes\n}) {\n  var _a, _b, _c, _d, _e, _f;\n  const messages = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            messages.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            messages.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        messages.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a2, _b2, _c2;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"input_text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"input_image\",\n                    ...part.data instanceof URL ? { image_url: part.data.toString() } : typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      image_url: `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    },\n                    detail: (_b2 = (_a2 = part.providerOptions) == null ? void 0 : _a2.openai) == null ? void 0 : _b2.imageDetail\n                  };\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    return {\n                      type: \"input_file\",\n                      file_url: part.data.toString()\n                    };\n                  }\n                  return {\n                    type: \"input_file\",\n                    ...typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      filename: (_c2 = part.filename) != null ? _c2 : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        const reasoningMessages = {};\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              messages.push({\n                role: \"assistant\",\n                content: [{ type: \"output_text\", text: part.text }],\n                id: (_c = (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.itemId) != null ? _c : void 0\n              });\n              break;\n            }\n            case \"tool-call\": {\n              if (part.providerExecuted) {\n                break;\n              }\n              messages.push({\n                type: \"function_call\",\n                call_id: part.toolCallId,\n                name: part.toolName,\n                arguments: JSON.stringify(part.input),\n                id: (_f = (_e = (_d = part.providerOptions) == null ? void 0 : _d.openai) == null ? void 0 : _e.itemId) != null ? _f : void 0\n              });\n              break;\n            }\n            case \"tool-result\": {\n              warnings.push({\n                type: \"other\",\n                message: `tool result parts in assistant messages are not supported for OpenAI responses`\n              });\n              break;\n            }\n            case \"reasoning\": {\n              const providerOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                provider: \"openai\",\n                providerOptions: part.providerOptions,\n                schema: openaiResponsesReasoningProviderOptionsSchema\n              });\n              const reasoningId = providerOptions == null ? void 0 : providerOptions.itemId;\n              if (reasoningId != null) {\n                const existingReasoningMessage = reasoningMessages[reasoningId];\n                const summaryParts = [];\n                if (part.text.length > 0) {\n                  summaryParts.push({ type: \"summary_text\", text: part.text });\n                } else if (existingReasoningMessage !== void 0) {\n                  warnings.push({\n                    type: \"other\",\n                    message: `Cannot append empty reasoning part to existing reasoning sequence. Skipping reasoning part: ${JSON.stringify(part)}.`\n                  });\n                }\n                if (existingReasoningMessage === void 0) {\n                  reasoningMessages[reasoningId] = {\n                    type: \"reasoning\",\n                    id: reasoningId,\n                    encrypted_content: providerOptions == null ? void 0 : providerOptions.reasoningEncryptedContent,\n                    summary: summaryParts\n                  };\n                  messages.push(reasoningMessages[reasoningId]);\n                } else {\n                  existingReasoningMessage.summary.push(...summaryParts);\n                }\n              } else {\n                warnings.push({\n                  type: \"other\",\n                  message: `Non-OpenAI reasoning parts are not supported. Skipping reasoning part: ${JSON.stringify(part)}.`\n                });\n              }\n              break;\n            }\n          }\n        }\n        break;\n      }\n      case \"tool\": {\n        for (const part of content) {\n          const output = part.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          messages.push({\n            type: \"function_call_output\",\n            call_id: part.toolCallId,\n            output: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { messages, warnings };\n}\nvar openaiResponsesReasoningProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  itemId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningEncryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n});\n\n// src/responses/map-openai-responses-finish-reason.ts\nfunction mapOpenAIResponseFinishReason({\n  finishReason,\n  hasFunctionCall\n}) {\n  switch (finishReason) {\n    case void 0:\n    case null:\n      return hasFunctionCall ? \"tool-calls\" : \"stop\";\n    case \"max_output_tokens\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    default:\n      return hasFunctionCall ? \"tool-calls\" : \"unknown\";\n  }\n}\n\n// src/responses/openai-responses-prepare-tools.ts\n\nfunction prepareResponsesTools({\n  tools,\n  toolChoice,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema,\n          strict: strictJsonSchema\n        });\n        break;\n      case \"provider-defined\": {\n        switch (tool.id) {\n          case \"openai.file_search\": {\n            const args = fileSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"file_search\",\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking ? { ranker: args.ranking.ranker } : void 0,\n              filters: args.filters\n            });\n            break;\n          }\n          case \"openai.web_search_preview\": {\n            const args = webSearchPreviewArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search_preview\",\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.web_search\": {\n            const args = webSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search\",\n              filters: args.filters != null ? { allowed_domains: args.filters.allowedDomains } : void 0,\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.code_interpreter\": {\n            const args = codeInterpreterArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"code_interpreter\",\n              container: args.container == null ? { type: \"auto\", file_ids: void 0 } : typeof args.container === \"string\" ? args.container : { type: \"auto\", file_ids: args.container.fileIds }\n            });\n            break;\n          }\n          default: {\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n          }\n        }\n        break;\n      }\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: toolChoice.toolName === \"code_interpreter\" || toolChoice.toolName === \"file_search\" || toolChoice.toolName === \"web_search_preview\" || toolChoice.toolName === \"web_search\" ? { type: toolChoice.toolName } : { type: \"function\", name: toolChoice.toolName },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/responses/openai-responses-language-model.ts\nvar webSearchCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n      query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ]).nullish()\n});\nvar TOP_LOGPROBS_MAX = 20;\nvar LOGPROBS_SCHEMA = zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      })\n    )\n  })\n);\nvar OpenAIResponsesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/],\n      \"application/pdf\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    maxOutputTokens,\n    temperature,\n    stopSequences,\n    topP,\n    topK,\n    presencePenalty,\n    frequencyPenalty,\n    seed,\n    prompt,\n    providerOptions,\n    tools,\n    toolChoice,\n    responseFormat\n  }) {\n    var _a, _b, _c;\n    const warnings = [];\n    const modelConfig = getResponsesModelConfig(this.modelId);\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (stopSequences != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"stopSequences\" });\n    }\n    const { messages, warnings: messageWarnings } = await convertToOpenAIResponsesMessages({\n      prompt,\n      systemMessageMode: modelConfig.systemMessageMode,\n      fileIdPrefixes: this.config.fileIdPrefixes\n    });\n    warnings.push(...messageWarnings);\n    const openaiOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiResponsesProviderOptionsSchema\n    });\n    const strictJsonSchema = (_a = openaiOptions == null ? void 0 : openaiOptions.strictJsonSchema) != null ? _a : false;\n    let include = openaiOptions == null ? void 0 : openaiOptions.include;\n    const topLogprobs = typeof (openaiOptions == null ? void 0 : openaiOptions.logprobs) === \"number\" ? openaiOptions == null ? void 0 : openaiOptions.logprobs : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? TOP_LOGPROBS_MAX : void 0;\n    include = topLogprobs ? Array.isArray(include) ? [...include, \"message.output_text.logprobs\"] : [\"message.output_text.logprobs\"] : include;\n    const webSearchToolName = (_b = tools == null ? void 0 : tools.find(\n      (tool) => tool.type === \"provider-defined\" && (tool.id === \"openai.web_search\" || tool.id === \"openai.web_search_preview\")\n    )) == null ? void 0 : _b.name;\n    include = webSearchToolName ? Array.isArray(include) ? [...include, \"web_search_call.action.sources\"] : [\"web_search_call.action.sources\"] : include;\n    const baseArgs = {\n      model: this.modelId,\n      input: messages,\n      temperature,\n      top_p: topP,\n      max_output_tokens: maxOutputTokens,\n      ...((responseFormat == null ? void 0 : responseFormat.type) === \"json\" || (openaiOptions == null ? void 0 : openaiOptions.textVerbosity)) && {\n        text: {\n          ...(responseFormat == null ? void 0 : responseFormat.type) === \"json\" && {\n            format: responseFormat.schema != null ? {\n              type: \"json_schema\",\n              strict: strictJsonSchema,\n              name: (_c = responseFormat.name) != null ? _c : \"response\",\n              description: responseFormat.description,\n              schema: responseFormat.schema\n            } : { type: \"json_object\" }\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.textVerbosity) && {\n            verbosity: openaiOptions.textVerbosity\n          }\n        }\n      },\n      // provider options:\n      metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,\n      parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,\n      previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,\n      store: openaiOptions == null ? void 0 : openaiOptions.store,\n      user: openaiOptions == null ? void 0 : openaiOptions.user,\n      instructions: openaiOptions == null ? void 0 : openaiOptions.instructions,\n      service_tier: openaiOptions == null ? void 0 : openaiOptions.serviceTier,\n      include,\n      prompt_cache_key: openaiOptions == null ? void 0 : openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions == null ? void 0 : openaiOptions.safetyIdentifier,\n      top_logprobs: topLogprobs,\n      // model-specific settings:\n      ...modelConfig.isReasoningModel && ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null || (openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) && {\n        reasoning: {\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && {\n            effort: openaiOptions.reasoningEffort\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null && {\n            summary: openaiOptions.reasoningSummary\n          }\n        }\n      },\n      ...modelConfig.requiredAutoTruncation && {\n        truncation: \"auto\"\n      }\n    };\n    if (modelConfig.isReasoningModel) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n    } else {\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningEffort\",\n          details: \"reasoningEffort is not supported for non-reasoning models\"\n        });\n      }\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningSummary\",\n          details: \"reasoningSummary is not supported for non-reasoning models\"\n        });\n      }\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"flex\" && !modelConfig.supportsFlexProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      delete baseArgs.service_tier;\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"priority\" && !modelConfig.supportsPriorityProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      delete baseArgs.service_tier;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareResponsesTools({\n      tools,\n      toolChoice,\n      strictJsonSchema\n    });\n    return {\n      webSearchToolName,\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const url = this.config.url({\n      path: \"/responses\",\n      modelId: this.modelId\n    });\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url,\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }).nullish(),\n          model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n                role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"output_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                    logprobs: LOGPROBS_SCHEMA.nullish(),\n                    annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                      zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                          url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                          title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n                          file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                          filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                          index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"container_file_citation\")\n                        })\n                      ])\n                    )\n                  })\n                )\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_interpreter_call\")\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n                call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              }),\n              webSearchCallItem,\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n                queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n                results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                      score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                    })\n                  })\n                ).nullish()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                summary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"summary_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                  })\n                )\n              })\n            ])\n          ),\n          service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n          incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullable(),\n          usage: usageSchema2\n        })\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    if (response.error) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.APICallError({\n        message: response.error.message,\n        url,\n        requestBodyValues: body,\n        statusCode: 400,\n        responseHeaders,\n        responseBody: rawResponse,\n        isRetryable: false\n      });\n    }\n    const content = [];\n    const logprobs = [];\n    let hasFunctionCall = false;\n    for (const part of response.output) {\n      switch (part.type) {\n        case \"reasoning\": {\n          if (part.summary.length === 0) {\n            part.summary.push({ type: \"summary_text\", text: \"\" });\n          }\n          for (const summary of part.summary) {\n            content.push({\n              type: \"reasoning\",\n              text: summary.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id,\n                  reasoningEncryptedContent: (_a = part.encrypted_content) != null ? _a : null\n                }\n              }\n            });\n          }\n          break;\n        }\n        case \"message\": {\n          for (const contentPart of part.content) {\n            if (((_c = (_b = options.providerOptions) == null ? void 0 : _b.openai) == null ? void 0 : _c.logprobs) && contentPart.logprobs) {\n              logprobs.push(contentPart.logprobs);\n            }\n            content.push({\n              type: \"text\",\n              text: contentPart.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id\n                }\n              }\n            });\n            for (const annotation of contentPart.annotations) {\n              if (annotation.type === \"url_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_f = (_e = (_d = this.config).generateId) == null ? void 0 : _e.call(_d)) != null ? _f : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              } else if (annotation.type === \"file_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_i = (_h = (_g = this.config).generateId) == null ? void 0 : _h.call(_g)) != null ? _i : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_k = (_j = annotation.quote) != null ? _j : annotation.filename) != null ? _k : \"Document\",\n                  filename: (_l = annotation.filename) != null ? _l : annotation.file_id\n                });\n              }\n            }\n          }\n          break;\n        }\n        case \"function_call\": {\n          hasFunctionCall = true;\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.call_id,\n            toolName: part.name,\n            input: part.arguments,\n            providerMetadata: {\n              openai: {\n                itemId: part.id\n              }\n            }\n          });\n          break;\n        }\n        case \"web_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            input: JSON.stringify({ action: part.action }),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            result: { status: part.status },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"computer_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            input: \"\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            result: {\n              type: \"computer_use_tool_result\",\n              status: part.status || \"completed\"\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"file_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            input: \"\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            result: {\n              type: \"file_search_tool_result\",\n              status: part.status || \"completed\",\n              ...part.queries && { queries: part.queries },\n              ...part.results && { results: part.results }\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n      }\n    }\n    const providerMetadata = {\n      openai: { responseId: response.id }\n    };\n    if (logprobs.length > 0) {\n      providerMetadata.openai.logprobs = logprobs;\n    }\n    if (typeof response.service_tier === \"string\") {\n      providerMetadata.openai.serviceTier = response.service_tier;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIResponseFinishReason({\n        finishReason: (_m = response.incomplete_details) == null ? void 0 : _m.reason,\n        hasFunctionCall\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        reasoningTokens: (_o = (_n = response.usage.output_tokens_details) == null ? void 0 : _n.reasoning_tokens) != null ? _o : void 0,\n        cachedInputTokens: (_q = (_p = response.usage.input_tokens_details) == null ? void 0 : _p.cached_tokens) != null ? _q : void 0\n      },\n      request: { body },\n      response: {\n        id: response.id,\n        timestamp: new Date(response.created_at * 1e3),\n        modelId: response.model,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/responses\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: {\n        ...body,\n        stream: true\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiResponsesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const self = this;\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const logprobs = [];\n    let responseId = null;\n    const ongoingToolCalls = {};\n    let hasFunctionCall = false;\n    const activeReasoning = {};\n    let serviceTier;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (isResponseOutputItemAddedChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: value.item.name,\n                  toolCallId: value.item.call_id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.call_id,\n                  toolName: value.item.name\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\"\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"computer_use\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"computer_use\"\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"file_search\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"file_search\"\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-start\",\n                  id: value.item.id,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (isResponseOutputItemAddedReasoningChunk(value)) {\n                activeReasoning[value.item.id] = {\n                  encryptedContent: value.item.encrypted_content,\n                  summaryParts: [0]\n                };\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item.id}:0`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id,\n                      reasoningEncryptedContent: (_a = value.item.encrypted_content) != null ? _a : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseOutputItemDoneChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                hasFunctionCall = true;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.call_id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.call_id,\n                  toolName: value.item.name,\n                  input: value.item.arguments,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  input: JSON.stringify({ action: value.item.action }),\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  result: { status: value.item.status },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  input: \"\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  result: {\n                    type: \"computer_use_tool_result\",\n                    status: value.item.status || \"completed\"\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  input: \"\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  result: {\n                    type: \"file_search_tool_result\",\n                    status: value.item.status || \"completed\",\n                    ...value.item.queries && { queries: value.item.queries },\n                    ...value.item.results && { results: value.item.results }\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-end\",\n                  id: value.item.id\n                });\n              } else if (isResponseOutputItemDoneReasoningChunk(value)) {\n                const activeReasoningPart = activeReasoning[value.item.id];\n                for (const summaryIndex of activeReasoningPart.summaryParts) {\n                  controller.enqueue({\n                    type: \"reasoning-end\",\n                    id: `${value.item.id}:${summaryIndex}`,\n                    providerMetadata: {\n                      openai: {\n                        itemId: value.item.id,\n                        reasoningEncryptedContent: (_b = value.item.encrypted_content) != null ? _b : null\n                      }\n                    }\n                  });\n                }\n                delete activeReasoning[value.item.id];\n              }\n            } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.toolCallId,\n                  delta: value.delta\n                });\n              }\n            } else if (isResponseCreatedChunk(value)) {\n              responseId = value.response.id;\n              controller.enqueue({\n                type: \"response-metadata\",\n                id: value.response.id,\n                timestamp: new Date(value.response.created_at * 1e3),\n                modelId: value.response.model\n              });\n            } else if (isTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: value.item_id,\n                delta: value.delta\n              });\n              if (((_d = (_c = options.providerOptions) == null ? void 0 : _c.openai) == null ? void 0 : _d.logprobs) && value.logprobs) {\n                logprobs.push(value.logprobs);\n              }\n            } else if (isResponseReasoningSummaryPartAddedChunk(value)) {\n              if (value.summary_index > 0) {\n                (_e = activeReasoning[value.item_id]) == null ? void 0 : _e.summaryParts.push(\n                  value.summary_index\n                );\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item_id}:${value.summary_index}`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item_id,\n                      reasoningEncryptedContent: (_g = (_f = activeReasoning[value.item_id]) == null ? void 0 : _f.encryptedContent) != null ? _g : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseReasoningSummaryTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"reasoning-delta\",\n                id: `${value.item_id}:${value.summary_index}`,\n                delta: value.delta,\n                providerMetadata: {\n                  openai: {\n                    itemId: value.item_id\n                  }\n                }\n              });\n            } else if (isResponseFinishedChunk(value)) {\n              finishReason = mapOpenAIResponseFinishReason({\n                finishReason: (_h = value.response.incomplete_details) == null ? void 0 : _h.reason,\n                hasFunctionCall\n              });\n              usage.inputTokens = value.response.usage.input_tokens;\n              usage.outputTokens = value.response.usage.output_tokens;\n              usage.totalTokens = value.response.usage.input_tokens + value.response.usage.output_tokens;\n              usage.reasoningTokens = (_j = (_i = value.response.usage.output_tokens_details) == null ? void 0 : _i.reasoning_tokens) != null ? _j : void 0;\n              usage.cachedInputTokens = (_l = (_k = value.response.usage.input_tokens_details) == null ? void 0 : _k.cached_tokens) != null ? _l : void 0;\n              if (typeof value.response.service_tier === \"string\") {\n                serviceTier = value.response.service_tier;\n              }\n            } else if (isResponseAnnotationAddedChunk(value)) {\n              if (value.annotation.type === \"url_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_o = (_n = (_m = self.config).generateId) == null ? void 0 : _n.call(_m)) != null ? _o : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: value.annotation.url,\n                  title: value.annotation.title\n                });\n              } else if (value.annotation.type === \"file_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_r = (_q = (_p = self.config).generateId) == null ? void 0 : _q.call(_p)) != null ? _r : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_t = (_s = value.annotation.quote) != null ? _s : value.annotation.filename) != null ? _t : \"Document\",\n                  filename: (_u = value.annotation.filename) != null ? _u : value.annotation.file_id\n                });\n              }\n            } else if (isErrorChunk(value)) {\n              controller.enqueue({ type: \"error\", error: value });\n            }\n          },\n          flush(controller) {\n            const providerMetadata = {\n              openai: {\n                responseId\n              }\n            };\n            if (logprobs.length > 0) {\n              providerMetadata.openai.logprobs = logprobs;\n            }\n            if (serviceTier !== void 0) {\n              providerMetadata.openai.serviceTier = serviceTier;\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema2 = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  input_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish(),\n  output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  output_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish()\n});\nvar textDeltaChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  logprobs: LOGPROBS_SCHEMA.nullish()\n});\nvar errorChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  sequence_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar responseFinishedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"response.completed\", \"response.incomplete\"]),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n    usage: usageSchema2,\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n  })\n});\nvar responseCreatedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.created\"),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n  })\n});\nvar responseOutputItemAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.added\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n      }).nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n      results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        })\n      ).optional()\n    })\n  ])\n});\nvar responseOutputItemDoneSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.done\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n    }),\n    webSearchCallItem,\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\"),\n      queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n      results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        })\n      ).nullish()\n    })\n  ])\n});\nvar responseFunctionCallArgumentsDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.function_call_arguments.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar responseAnnotationAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.annotation.added\"),\n  annotation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    })\n  ])\n});\nvar responseReasoningSummaryPartAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_part.added\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar responseReasoningSummaryTextDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar openaiResponsesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  textDeltaChunkSchema,\n  responseFinishedChunkSchema,\n  responseCreatedChunkSchema,\n  responseOutputItemAddedSchema,\n  responseOutputItemDoneSchema,\n  responseFunctionCallArgumentsDeltaSchema,\n  responseAnnotationAddedSchema,\n  responseReasoningSummaryPartAddedSchema,\n  responseReasoningSummaryTextDeltaSchema,\n  errorChunkSchema,\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).loose()\n  // fallback for unknown chunks\n]);\nfunction isTextDeltaChunk(chunk) {\n  return chunk.type === \"response.output_text.delta\";\n}\nfunction isResponseOutputItemDoneChunk(chunk) {\n  return chunk.type === \"response.output_item.done\";\n}\nfunction isResponseOutputItemDoneReasoningChunk(chunk) {\n  return isResponseOutputItemDoneChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseFinishedChunk(chunk) {\n  return chunk.type === \"response.completed\" || chunk.type === \"response.incomplete\";\n}\nfunction isResponseCreatedChunk(chunk) {\n  return chunk.type === \"response.created\";\n}\nfunction isResponseFunctionCallArgumentsDeltaChunk(chunk) {\n  return chunk.type === \"response.function_call_arguments.delta\";\n}\nfunction isResponseOutputItemAddedChunk(chunk) {\n  return chunk.type === \"response.output_item.added\";\n}\nfunction isResponseOutputItemAddedReasoningChunk(chunk) {\n  return isResponseOutputItemAddedChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseAnnotationAddedChunk(chunk) {\n  return chunk.type === \"response.output_text.annotation.added\";\n}\nfunction isResponseReasoningSummaryPartAddedChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_part.added\";\n}\nfunction isResponseReasoningSummaryTextDeltaChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_text.delta\";\n}\nfunction isErrorChunk(chunk) {\n  return chunk.type === \"error\";\n}\nfunction getResponsesModelConfig(modelId) {\n  const supportsFlexProcessing2 = modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n  const supportsPriorityProcessing2 = modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n  const defaults = {\n    requiredAutoTruncation: false,\n    systemMessageMode: \"system\",\n    supportsFlexProcessing: supportsFlexProcessing2,\n    supportsPriorityProcessing: supportsPriorityProcessing2\n  };\n  if (modelId.startsWith(\"gpt-5-chat\")) {\n    return {\n      ...defaults,\n      isReasoningModel: false\n    };\n  }\n  if (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\") || modelId.startsWith(\"codex-\") || modelId.startsWith(\"computer-use\")) {\n    if (modelId.startsWith(\"o1-mini\") || modelId.startsWith(\"o1-preview\")) {\n      return {\n        ...defaults,\n        isReasoningModel: true,\n        systemMessageMode: \"remove\"\n      };\n    }\n    return {\n      ...defaults,\n      isReasoningModel: true,\n      systemMessageMode: \"developer\"\n    };\n  }\n  return {\n    ...defaults,\n    isReasoningModel: false\n  };\n}\nvar openaiResponsesProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  previousResponseId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningSummary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\"]).nullish(),\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"reasoning.encrypted_content\",\n      \"file_search_call.results\",\n      \"message.output_text.logprobs\"\n    ])\n  ).nullish(),\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).nullish(),\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   *\n   * @see https://platform.openai.com/docs/api-reference/responses/create\n   * @see https://cookbook.openai.com/examples/using_logprobs\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(TOP_LOGPROBS_MAX)]).optional()\n});\n\n// src/speech/openai-speech-model.ts\n\n\nvar OpenAIProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  speed: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0.25).max(4).default(1).nullish()\n});\nvar OpenAISpeechModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    text,\n    voice = \"alloy\",\n    outputFormat = \"mp3\",\n    speed,\n    instructions,\n    language,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: OpenAIProviderOptionsSchema\n    });\n    const requestBody = {\n      model: this.modelId,\n      input: text,\n      voice,\n      response_format: \"mp3\",\n      speed,\n      instructions\n    };\n    if (outputFormat) {\n      if ([\"mp3\", \"opus\", \"aac\", \"flac\", \"wav\", \"pcm\"].includes(outputFormat)) {\n        requestBody.response_format = outputFormat;\n      } else {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"outputFormat\",\n          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`\n        });\n      }\n    }\n    if (openAIOptions) {\n      const speechModelOptions = {};\n      for (const key in speechModelOptions) {\n        const value = speechModelOptions[key];\n        if (value !== void 0) {\n          requestBody[key] = value;\n        }\n      }\n    }\n    if (language) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"language\",\n        details: `OpenAI speech models do not support language selection. Language parameter \"${language}\" was ignored.`\n      });\n    }\n    return {\n      requestBody,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { requestBody, warnings } = await this.getArgs(options);\n    const {\n      value: audio,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/audio/speech\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: requestBody,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createBinaryResponseHandler)(),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      audio,\n      warnings,\n      request: {\n        body: JSON.stringify(requestBody)\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\n\n// src/transcription/openai-transcription-model.ts\n\n\n\n// src/transcription/openai-transcription-options.ts\n\nvar openAITranscriptionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Additional information to include in the transcription response.\n   */\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * The language of the input audio in ISO-639-1 format.\n   */\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * An optional text to guide the model's style or continue a previous audio segment.\n   */\n  prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * The sampling temperature, between 0 and 1.\n   * @default 0\n   */\n  temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1).default(0).optional(),\n  /**\n   * The timestamp granularities to populate for this transcription.\n   * @default ['segment']\n   */\n  timestampGranularities: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"word\", \"segment\"])).default([\"segment\"]).optional()\n});\n\n// src/transcription/openai-transcription-model.ts\nvar languageMap = {\n  afrikaans: \"af\",\n  arabic: \"ar\",\n  armenian: \"hy\",\n  azerbaijani: \"az\",\n  belarusian: \"be\",\n  bosnian: \"bs\",\n  bulgarian: \"bg\",\n  catalan: \"ca\",\n  chinese: \"zh\",\n  croatian: \"hr\",\n  czech: \"cs\",\n  danish: \"da\",\n  dutch: \"nl\",\n  english: \"en\",\n  estonian: \"et\",\n  finnish: \"fi\",\n  french: \"fr\",\n  galician: \"gl\",\n  german: \"de\",\n  greek: \"el\",\n  hebrew: \"he\",\n  hindi: \"hi\",\n  hungarian: \"hu\",\n  icelandic: \"is\",\n  indonesian: \"id\",\n  italian: \"it\",\n  japanese: \"ja\",\n  kannada: \"kn\",\n  kazakh: \"kk\",\n  korean: \"ko\",\n  latvian: \"lv\",\n  lithuanian: \"lt\",\n  macedonian: \"mk\",\n  malay: \"ms\",\n  marathi: \"mr\",\n  maori: \"mi\",\n  nepali: \"ne\",\n  norwegian: \"no\",\n  persian: \"fa\",\n  polish: \"pl\",\n  portuguese: \"pt\",\n  romanian: \"ro\",\n  russian: \"ru\",\n  serbian: \"sr\",\n  slovak: \"sk\",\n  slovenian: \"sl\",\n  spanish: \"es\",\n  swahili: \"sw\",\n  swedish: \"sv\",\n  tagalog: \"tl\",\n  tamil: \"ta\",\n  thai: \"th\",\n  turkish: \"tr\",\n  ukrainian: \"uk\",\n  urdu: \"ur\",\n  vietnamese: \"vi\",\n  welsh: \"cy\"\n};\nvar OpenAITranscriptionModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    audio,\n    mediaType,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openAITranscriptionProviderOptions\n    });\n    const formData = new FormData();\n    const blob = audio instanceof Uint8Array ? new Blob([audio]) : new Blob([(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertBase64ToUint8Array)(audio)]);\n    formData.append(\"model\", this.modelId);\n    const fileExtension = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.mediaTypeToExtension)(mediaType);\n    formData.append(\n      \"file\",\n      new File([blob], \"audio\", { type: mediaType }),\n      `audio.${fileExtension}`\n    );\n    if (openAIOptions) {\n      const transcriptionModelOptions = {\n        include: openAIOptions.include,\n        language: openAIOptions.language,\n        prompt: openAIOptions.prompt,\n        // https://platform.openai.com/docs/api-reference/audio/createTranscription#audio_createtranscription-response_format\n        // prefer verbose_json to get segments for models that support it\n        response_format: [\n          \"gpt-4o-transcribe\",\n          \"gpt-4o-mini-transcribe\"\n        ].includes(this.modelId) ? \"json\" : \"verbose_json\",\n        temperature: openAIOptions.temperature,\n        timestamp_granularities: openAIOptions.timestampGranularities\n      };\n      for (const [key, value] of Object.entries(transcriptionModelOptions)) {\n        if (value != null) {\n          if (Array.isArray(value)) {\n            for (const item of value) {\n              formData.append(`${key}[]`, String(item));\n            }\n          } else {\n            formData.append(key, String(value));\n          }\n        }\n      }\n    }\n    return {\n      formData,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { formData, warnings } = await this.getArgs(options);\n    const {\n      value: response,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postFormDataToApi)({\n      url: this.config.url({\n        path: \"/audio/transcriptions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      formData,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTranscriptionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const language = response.language != null && response.language in languageMap ? languageMap[response.language] : void 0;\n    return {\n      text: response.text,\n      segments: (_g = (_f = (_d = response.segments) == null ? void 0 : _d.map((segment) => ({\n        text: segment.text,\n        startSecond: segment.start,\n        endSecond: segment.end\n      }))) != null ? _f : (_e = response.words) == null ? void 0 : _e.map((word) => ({\n        text: word.word,\n        startSecond: word.start,\n        endSecond: word.end\n      }))) != null ? _g : [],\n      language,\n      durationInSeconds: (_h = response.duration) != null ? _h : void 0,\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\nvar openaiTranscriptionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  words: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      word: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    })\n  ).nullish(),\n  segments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      seek: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n      temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      avg_logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      compression_ratio: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      no_speech_prob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    })\n  ).nullish()\n});\n\n// src/openai-provider.ts\nfunction createOpenAI(options = {}) {\n  var _a, _b;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.openai.com/v1\";\n  const providerName = (_b = options.name) != null ? _b : \"openai\";\n  const getHeaders = () => ({\n    Authorization: `Bearer ${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"OPENAI_API_KEY\",\n      description: \"OpenAI\"\n    })}`,\n    \"OpenAI-Organization\": options.organization,\n    \"OpenAI-Project\": options.project,\n    ...options.headers\n  });\n  const createChatModel = (modelId) => new OpenAIChatLanguageModel(modelId, {\n    provider: `${providerName}.chat`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createCompletionModel = (modelId) => new OpenAICompletionLanguageModel(modelId, {\n    provider: `${providerName}.completion`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createEmbeddingModel = (modelId) => new OpenAIEmbeddingModel(modelId, {\n    provider: `${providerName}.embedding`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createImageModel = (modelId) => new OpenAIImageModel(modelId, {\n    provider: `${providerName}.image`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createTranscriptionModel = (modelId) => new OpenAITranscriptionModel(modelId, {\n    provider: `${providerName}.transcription`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createSpeechModel = (modelId) => new OpenAISpeechModel(modelId, {\n    provider: `${providerName}.speech`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createLanguageModel = (modelId) => {\n    if (new.target) {\n      throw new Error(\n        \"The OpenAI model function cannot be called with the new keyword.\"\n      );\n    }\n    return createResponsesModel(modelId);\n  };\n  const createResponsesModel = (modelId) => {\n    return new OpenAIResponsesLanguageModel(modelId, {\n      provider: `${providerName}.responses`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      fileIdPrefixes: [\"file-\"]\n    });\n  };\n  const provider = function(modelId) {\n    return createLanguageModel(modelId);\n  };\n  provider.languageModel = createLanguageModel;\n  provider.chat = createChatModel;\n  provider.completion = createCompletionModel;\n  provider.responses = createResponsesModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.transcription = createTranscriptionModel;\n  provider.transcriptionModel = createTranscriptionModel;\n  provider.speech = createSpeechModel;\n  provider.speechModel = createSpeechModel;\n  provider.tools = openaiTools;\n  return provider;\n}\nvar openai = createOpenAI();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/openai/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@ai-sdk/provider-utils/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventSourceParserStream: () => (/* reexport safe */ eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_1__.EventSourceParserStream),\n/* harmony export */   asSchema: () => (/* binding */ asSchema),\n/* harmony export */   asValidator: () => (/* binding */ asValidator),\n/* harmony export */   combineHeaders: () => (/* binding */ combineHeaders),\n/* harmony export */   convertAsyncIteratorToReadableStream: () => (/* binding */ convertAsyncIteratorToReadableStream),\n/* harmony export */   convertBase64ToUint8Array: () => (/* binding */ convertBase64ToUint8Array),\n/* harmony export */   convertToBase64: () => (/* binding */ convertToBase64),\n/* harmony export */   convertUint8ArrayToBase64: () => (/* binding */ convertUint8ArrayToBase64),\n/* harmony export */   createBinaryResponseHandler: () => (/* binding */ createBinaryResponseHandler),\n/* harmony export */   createEventSourceResponseHandler: () => (/* binding */ createEventSourceResponseHandler),\n/* harmony export */   createIdGenerator: () => (/* binding */ createIdGenerator),\n/* harmony export */   createJsonErrorResponseHandler: () => (/* binding */ createJsonErrorResponseHandler),\n/* harmony export */   createJsonResponseHandler: () => (/* binding */ createJsonResponseHandler),\n/* harmony export */   createJsonStreamResponseHandler: () => (/* binding */ createJsonStreamResponseHandler),\n/* harmony export */   createProviderDefinedToolFactory: () => (/* binding */ createProviderDefinedToolFactory),\n/* harmony export */   createProviderDefinedToolFactoryWithOutputSchema: () => (/* binding */ createProviderDefinedToolFactoryWithOutputSchema),\n/* harmony export */   createStatusCodeErrorResponseHandler: () => (/* binding */ createStatusCodeErrorResponseHandler),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   dynamicTool: () => (/* binding */ dynamicTool),\n/* harmony export */   executeTool: () => (/* binding */ executeTool),\n/* harmony export */   extractResponseHeaders: () => (/* binding */ extractResponseHeaders),\n/* harmony export */   generateId: () => (/* binding */ generateId),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   getFromApi: () => (/* binding */ getFromApi),\n/* harmony export */   injectJsonInstructionIntoMessages: () => (/* binding */ injectJsonInstructionIntoMessages),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isParsableJson: () => (/* binding */ isParsableJson),\n/* harmony export */   isUrlSupported: () => (/* binding */ isUrlSupported),\n/* harmony export */   isValidator: () => (/* binding */ isValidator),\n/* harmony export */   jsonSchema: () => (/* binding */ jsonSchema),\n/* harmony export */   loadApiKey: () => (/* binding */ loadApiKey),\n/* harmony export */   loadOptionalSetting: () => (/* binding */ loadOptionalSetting),\n/* harmony export */   loadSetting: () => (/* binding */ loadSetting),\n/* harmony export */   mediaTypeToExtension: () => (/* binding */ mediaTypeToExtension),\n/* harmony export */   parseJSON: () => (/* binding */ parseJSON),\n/* harmony export */   parseJsonEventStream: () => (/* binding */ parseJsonEventStream),\n/* harmony export */   parseProviderOptions: () => (/* binding */ parseProviderOptions),\n/* harmony export */   postFormDataToApi: () => (/* binding */ postFormDataToApi),\n/* harmony export */   postJsonToApi: () => (/* binding */ postJsonToApi),\n/* harmony export */   postToApi: () => (/* binding */ postToApi),\n/* harmony export */   removeUndefinedEntries: () => (/* binding */ removeUndefinedEntries),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   safeParseJSON: () => (/* binding */ safeParseJSON),\n/* harmony export */   safeValidateTypes: () => (/* binding */ safeValidateTypes),\n/* harmony export */   standardSchemaValidator: () => (/* binding */ standardSchemaValidator),\n/* harmony export */   tool: () => (/* binding */ tool),\n/* harmony export */   validateTypes: () => (/* binding */ validateTypes),\n/* harmony export */   validator: () => (/* binding */ validator),\n/* harmony export */   validatorSymbol: () => (/* binding */ validatorSymbol),\n/* harmony export */   withoutTrailingSlash: () => (/* binding */ withoutTrailingSlash),\n/* harmony export */   zodSchema: () => (/* binding */ zodSchema)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventsource-parser/stream */ \"(rsc)/./node_modules/eventsource-parser/dist/stream.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/core/to-json-schema.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/zod/v4/classic/parse.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/zod/v3/types.js\");\n// src/combine-headers.ts\nfunction combineHeaders(...headers) {\n  return headers.reduce(\n    (combinedHeaders, currentHeaders) => ({\n      ...combinedHeaders,\n      ...currentHeaders != null ? currentHeaders : {}\n    }),\n    {}\n  );\n}\n\n// src/convert-async-iterator-to-readable-stream.ts\nfunction convertAsyncIteratorToReadableStream(iterator) {\n  return new ReadableStream({\n    /**\n     * Called when the consumer wants to pull more data from the stream.\n     *\n     * @param {ReadableStreamDefaultController<T>} controller - The controller to enqueue data into the stream.\n     * @returns {Promise<void>}\n     */\n    async pull(controller) {\n      try {\n        const { value, done } = await iterator.next();\n        if (done) {\n          controller.close();\n        } else {\n          controller.enqueue(value);\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n    /**\n     * Called when the consumer cancels the stream.\n     */\n    cancel() {\n    }\n  });\n}\n\n// src/delay.ts\nasync function delay(delayInMs, options) {\n  if (delayInMs == null) {\n    return Promise.resolve();\n  }\n  const signal = options == null ? void 0 : options.abortSignal;\n  return new Promise((resolve2, reject) => {\n    if (signal == null ? void 0 : signal.aborted) {\n      reject(createAbortError());\n      return;\n    }\n    const timeoutId = setTimeout(() => {\n      cleanup();\n      resolve2();\n    }, delayInMs);\n    const cleanup = () => {\n      clearTimeout(timeoutId);\n      signal == null ? void 0 : signal.removeEventListener(\"abort\", onAbort);\n    };\n    const onAbort = () => {\n      cleanup();\n      reject(createAbortError());\n    };\n    signal == null ? void 0 : signal.addEventListener(\"abort\", onAbort);\n  });\n}\nfunction createAbortError() {\n  return new DOMException(\"Delay was aborted\", \"AbortError\");\n}\n\n// src/extract-response-headers.ts\nfunction extractResponseHeaders(response) {\n  return Object.fromEntries([...response.headers]);\n}\n\n// src/generate-id.ts\n\nvar createIdGenerator = ({\n  prefix,\n  size = 16,\n  alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  separator = \"-\"\n} = {}) => {\n  const generator = () => {\n    const alphabetLength = alphabet.length;\n    const chars = new Array(size);\n    for (let i = 0; i < size; i++) {\n      chars[i] = alphabet[Math.random() * alphabetLength | 0];\n    }\n    return chars.join(\"\");\n  };\n  if (prefix == null) {\n    return generator;\n  }\n  if (alphabet.includes(separator)) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidArgumentError({\n      argument: \"separator\",\n      message: `The separator \"${separator}\" must not be part of the alphabet \"${alphabet}\".`\n    });\n  }\n  return () => `${prefix}${separator}${generator()}`;\n};\nvar generateId = createIdGenerator();\n\n// src/get-error-message.ts\nfunction getErrorMessage(error) {\n  if (error == null) {\n    return \"unknown error\";\n  }\n  if (typeof error === \"string\") {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return JSON.stringify(error);\n}\n\n// src/get-from-api.ts\n\n\n// src/handle-fetch-error.ts\n\n\n// src/is-abort-error.ts\nfunction isAbortError(error) {\n  return (error instanceof Error || error instanceof DOMException) && (error.name === \"AbortError\" || error.name === \"ResponseAborted\" || // Next.js\n  error.name === \"TimeoutError\");\n}\n\n// src/handle-fetch-error.ts\nvar FETCH_FAILED_ERROR_MESSAGES = [\"fetch failed\", \"failed to fetch\"];\nfunction handleFetchError({\n  error,\n  url,\n  requestBodyValues\n}) {\n  if (isAbortError(error)) {\n    return error;\n  }\n  if (error instanceof TypeError && FETCH_FAILED_ERROR_MESSAGES.includes(error.message.toLowerCase())) {\n    const cause = error.cause;\n    if (cause != null) {\n      return new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: `Cannot connect to API: ${cause.message}`,\n        cause,\n        url,\n        requestBodyValues,\n        isRetryable: true\n        // retry when network error\n      });\n    }\n  }\n  return error;\n}\n\n// src/remove-undefined-entries.ts\nfunction removeUndefinedEntries(record) {\n  return Object.fromEntries(\n    Object.entries(record).filter(([_key, value]) => value != null)\n  );\n}\n\n// src/get-from-api.ts\nvar getOriginalFetch = () => globalThis.fetch;\nvar getFromApi = async ({\n  url,\n  headers = {},\n  successfulResponseHandler,\n  failedResponseHandler,\n  abortSignal,\n  fetch = getOriginalFetch()\n}) => {\n  try {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: removeUndefinedEntries(headers),\n      signal: abortSignal\n    });\n    const responseHeaders = extractResponseHeaders(response);\n    if (!response.ok) {\n      let errorInformation;\n      try {\n        errorInformation = await failedResponseHandler({\n          response,\n          url,\n          requestBodyValues: {}\n        });\n      } catch (error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n          message: \"Failed to process error response\",\n          cause: error,\n          statusCode: response.status,\n          url,\n          responseHeaders,\n          requestBodyValues: {}\n        });\n      }\n      throw errorInformation.value;\n    }\n    try {\n      return await successfulResponseHandler({\n        response,\n        url,\n        requestBodyValues: {}\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n      }\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: \"Failed to process successful response\",\n        cause: error,\n        statusCode: response.status,\n        url,\n        responseHeaders,\n        requestBodyValues: {}\n      });\n    }\n  } catch (error) {\n    throw handleFetchError({ error, url, requestBodyValues: {} });\n  }\n};\n\n// src/inject-json-instruction.ts\nvar DEFAULT_SCHEMA_PREFIX = \"JSON schema:\";\nvar DEFAULT_SCHEMA_SUFFIX = \"You MUST answer with a JSON object that matches the JSON schema above.\";\nvar DEFAULT_GENERIC_SUFFIX = \"You MUST answer with JSON.\";\nfunction injectJsonInstruction({\n  prompt,\n  schema,\n  schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : void 0,\n  schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX\n}) {\n  return [\n    prompt != null && prompt.length > 0 ? prompt : void 0,\n    prompt != null && prompt.length > 0 ? \"\" : void 0,\n    // add a newline if prompt is not null\n    schemaPrefix,\n    schema != null ? JSON.stringify(schema) : void 0,\n    schemaSuffix\n  ].filter((line) => line != null).join(\"\\n\");\n}\nfunction injectJsonInstructionIntoMessages({\n  messages,\n  schema,\n  schemaPrefix,\n  schemaSuffix\n}) {\n  var _a, _b;\n  const systemMessage = ((_a = messages[0]) == null ? void 0 : _a.role) === \"system\" ? { ...messages[0] } : { role: \"system\", content: \"\" };\n  systemMessage.content = injectJsonInstruction({\n    prompt: systemMessage.content,\n    schema,\n    schemaPrefix,\n    schemaSuffix\n  });\n  return [\n    systemMessage,\n    ...((_b = messages[0]) == null ? void 0 : _b.role) === \"system\" ? messages.slice(1) : messages\n  ];\n}\n\n// src/is-url-supported.ts\nfunction isUrlSupported({\n  mediaType,\n  url,\n  supportedUrls\n}) {\n  url = url.toLowerCase();\n  mediaType = mediaType.toLowerCase();\n  return Object.entries(supportedUrls).map(([key, value]) => {\n    const mediaType2 = key.toLowerCase();\n    return mediaType2 === \"*\" || mediaType2 === \"*/*\" ? { mediaTypePrefix: \"\", regexes: value } : { mediaTypePrefix: mediaType2.replace(/\\*/, \"\"), regexes: value };\n  }).filter(({ mediaTypePrefix }) => mediaType.startsWith(mediaTypePrefix)).flatMap(({ regexes }) => regexes).some((pattern) => pattern.test(url));\n}\n\n// src/load-api-key.ts\n\nfunction loadApiKey({\n  apiKey,\n  environmentVariableName,\n  apiKeyParameterName = \"apiKey\",\n  description\n}) {\n  if (typeof apiKey === \"string\") {\n    return apiKey;\n  }\n  if (apiKey != null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key must be a string.`\n    });\n  }\n  if (typeof process === \"undefined\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.`\n    });\n  }\n  apiKey = process.env[environmentVariableName];\n  if (apiKey == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.`\n    });\n  }\n  if (typeof apiKey !== \"string\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n    });\n  }\n  return apiKey;\n}\n\n// src/load-optional-setting.ts\nfunction loadOptionalSetting({\n  settingValue,\n  environmentVariableName\n}) {\n  if (typeof settingValue === \"string\") {\n    return settingValue;\n  }\n  if (settingValue != null || typeof process === \"undefined\") {\n    return void 0;\n  }\n  settingValue = process.env[environmentVariableName];\n  if (settingValue == null || typeof settingValue !== \"string\") {\n    return void 0;\n  }\n  return settingValue;\n}\n\n// src/load-setting.ts\n\nfunction loadSetting({\n  settingValue,\n  environmentVariableName,\n  settingName,\n  description\n}) {\n  if (typeof settingValue === \"string\") {\n    return settingValue;\n  }\n  if (settingValue != null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting must be a string.`\n    });\n  }\n  if (typeof process === \"undefined\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting is missing. Pass it using the '${settingName}' parameter. Environment variables is not supported in this environment.`\n    });\n  }\n  settingValue = process.env[environmentVariableName];\n  if (settingValue == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting is missing. Pass it using the '${settingName}' parameter or the ${environmentVariableName} environment variable.`\n    });\n  }\n  if (typeof settingValue !== \"string\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n    });\n  }\n  return settingValue;\n}\n\n// src/media-type-to-extension.ts\nfunction mediaTypeToExtension(mediaType) {\n  var _a;\n  const [_type, subtype = \"\"] = mediaType.toLowerCase().split(\"/\");\n  return (_a = {\n    mpeg: \"mp3\",\n    \"x-wav\": \"wav\",\n    opus: \"ogg\",\n    mp4: \"m4a\",\n    \"x-m4a\": \"m4a\"\n  }[subtype]) != null ? _a : subtype;\n}\n\n// src/parse-json.ts\n\n\n// src/secure-json-parse.ts\nvar suspectProtoRx = /\"__proto__\"\\s*:/;\nvar suspectConstructorRx = /\"constructor\"\\s*:/;\nfunction _parse(text) {\n  const obj = JSON.parse(text);\n  if (obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n  if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {\n    return obj;\n  }\n  return filter(obj);\n}\nfunction filter(obj) {\n  let next = [obj];\n  while (next.length) {\n    const nodes = next;\n    next = [];\n    for (const node of nodes) {\n      if (Object.prototype.hasOwnProperty.call(node, \"__proto__\")) {\n        throw new SyntaxError(\"Object contains forbidden prototype property\");\n      }\n      if (Object.prototype.hasOwnProperty.call(node, \"constructor\") && Object.prototype.hasOwnProperty.call(node.constructor, \"prototype\")) {\n        throw new SyntaxError(\"Object contains forbidden prototype property\");\n      }\n      for (const key in node) {\n        const value = node[key];\n        if (value && typeof value === \"object\") {\n          next.push(value);\n        }\n      }\n    }\n  }\n  return obj;\n}\nfunction secureJsonParse(text) {\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  try {\n    return _parse(text);\n  } finally {\n    Error.stackTraceLimit = stackTraceLimit;\n  }\n}\n\n// src/validate-types.ts\n\n\n// src/validator.ts\n\nvar validatorSymbol = Symbol.for(\"vercel.ai.validator\");\nfunction validator(validate) {\n  return { [validatorSymbol]: true, validate };\n}\nfunction isValidator(value) {\n  return typeof value === \"object\" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && \"validate\" in value;\n}\nfunction asValidator(value) {\n  return isValidator(value) ? value : standardSchemaValidator(value);\n}\nfunction standardSchemaValidator(standardSchema) {\n  return validator(async (value) => {\n    const result = await standardSchema[\"~standard\"].validate(value);\n    return result.issues == null ? { success: true, value: result.value } : {\n      success: false,\n      error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError({\n        value,\n        cause: result.issues\n      })\n    };\n  });\n}\n\n// src/validate-types.ts\nasync function validateTypes({\n  value,\n  schema\n}) {\n  const result = await safeValidateTypes({ value, schema });\n  if (!result.success) {\n    throw _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.wrap({ value, cause: result.error });\n  }\n  return result.value;\n}\nasync function safeValidateTypes({\n  value,\n  schema\n}) {\n  const validator2 = asValidator(schema);\n  try {\n    if (validator2.validate == null) {\n      return { success: true, value, rawValue: value };\n    }\n    const result = await validator2.validate(value);\n    if (result.success) {\n      return { success: true, value: result.value, rawValue: value };\n    }\n    return {\n      success: false,\n      error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.wrap({ value, cause: result.error }),\n      rawValue: value\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.wrap({ value, cause: error }),\n      rawValue: value\n    };\n  }\n}\n\n// src/parse-json.ts\nasync function parseJSON({\n  text,\n  schema\n}) {\n  try {\n    const value = secureJsonParse(text);\n    if (schema == null) {\n      return value;\n    }\n    return validateTypes({ value, schema });\n  } catch (error) {\n    if (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError.isInstance(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.isInstance(error)) {\n      throw error;\n    }\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError({ text, cause: error });\n  }\n}\nasync function safeParseJSON({\n  text,\n  schema\n}) {\n  try {\n    const value = secureJsonParse(text);\n    if (schema == null) {\n      return { success: true, value, rawValue: value };\n    }\n    return await safeValidateTypes({ value, schema });\n  } catch (error) {\n    return {\n      success: false,\n      error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError.isInstance(error) ? error : new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError({ text, cause: error }),\n      rawValue: void 0\n    };\n  }\n}\nfunction isParsableJson(input) {\n  try {\n    secureJsonParse(input);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// src/parse-json-event-stream.ts\n\nfunction parseJsonEventStream({\n  stream,\n  schema\n}) {\n  return stream.pipeThrough(new TextDecoderStream()).pipeThrough(new eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_1__.EventSourceParserStream()).pipeThrough(\n    new TransformStream({\n      async transform({ data }, controller) {\n        if (data === \"[DONE]\") {\n          return;\n        }\n        controller.enqueue(await safeParseJSON({ text: data, schema }));\n      }\n    })\n  );\n}\n\n// src/parse-provider-options.ts\n\nasync function parseProviderOptions({\n  provider,\n  providerOptions,\n  schema\n}) {\n  if ((providerOptions == null ? void 0 : providerOptions[provider]) == null) {\n    return void 0;\n  }\n  const parsedProviderOptions = await safeValidateTypes({\n    value: providerOptions[provider],\n    schema\n  });\n  if (!parsedProviderOptions.success) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidArgumentError({\n      argument: \"providerOptions\",\n      message: `invalid ${provider} provider options`,\n      cause: parsedProviderOptions.error\n    });\n  }\n  return parsedProviderOptions.value;\n}\n\n// src/post-to-api.ts\n\nvar getOriginalFetch2 = () => globalThis.fetch;\nvar postJsonToApi = async ({\n  url,\n  headers,\n  body,\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n}) => postToApi({\n  url,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    ...headers\n  },\n  body: {\n    content: JSON.stringify(body),\n    values: body\n  },\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n});\nvar postFormDataToApi = async ({\n  url,\n  headers,\n  formData,\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n}) => postToApi({\n  url,\n  headers,\n  body: {\n    content: formData,\n    values: Object.fromEntries(formData.entries())\n  },\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n});\nvar postToApi = async ({\n  url,\n  headers = {},\n  body,\n  successfulResponseHandler,\n  failedResponseHandler,\n  abortSignal,\n  fetch = getOriginalFetch2()\n}) => {\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: removeUndefinedEntries(headers),\n      body: body.content,\n      signal: abortSignal\n    });\n    const responseHeaders = extractResponseHeaders(response);\n    if (!response.ok) {\n      let errorInformation;\n      try {\n        errorInformation = await failedResponseHandler({\n          response,\n          url,\n          requestBodyValues: body.values\n        });\n      } catch (error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n          message: \"Failed to process error response\",\n          cause: error,\n          statusCode: response.status,\n          url,\n          responseHeaders,\n          requestBodyValues: body.values\n        });\n      }\n      throw errorInformation.value;\n    }\n    try {\n      return await successfulResponseHandler({\n        response,\n        url,\n        requestBodyValues: body.values\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n      }\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: \"Failed to process successful response\",\n        cause: error,\n        statusCode: response.status,\n        url,\n        responseHeaders,\n        requestBodyValues: body.values\n      });\n    }\n  } catch (error) {\n    throw handleFetchError({ error, url, requestBodyValues: body.values });\n  }\n};\n\n// src/types/tool.ts\nfunction tool(tool2) {\n  return tool2;\n}\nfunction dynamicTool(tool2) {\n  return { ...tool2, type: \"dynamic\" };\n}\n\n// src/provider-defined-tool-factory.ts\nfunction createProviderDefinedToolFactory({\n  id,\n  name,\n  inputSchema\n}) {\n  return ({\n    execute,\n    outputSchema,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable,\n    ...args\n  }) => tool({\n    type: \"provider-defined\",\n    id,\n    name,\n    args,\n    inputSchema,\n    outputSchema,\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable\n  });\n}\nfunction createProviderDefinedToolFactoryWithOutputSchema({\n  id,\n  name,\n  inputSchema,\n  outputSchema\n}) {\n  return ({\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable,\n    ...args\n  }) => tool({\n    type: \"provider-defined\",\n    id,\n    name,\n    args,\n    inputSchema,\n    outputSchema,\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable\n  });\n}\n\n// src/resolve.ts\nasync function resolve(value) {\n  if (typeof value === \"function\") {\n    value = value();\n  }\n  return Promise.resolve(value);\n}\n\n// src/response-handler.ts\n\nvar createJsonErrorResponseHandler = ({\n  errorSchema,\n  errorToMessage,\n  isRetryable\n}) => async ({ response, url, requestBodyValues }) => {\n  const responseBody = await response.text();\n  const responseHeaders = extractResponseHeaders(response);\n  if (responseBody.trim() === \"\") {\n    return {\n      responseHeaders,\n      value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: response.statusText,\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n      })\n    };\n  }\n  try {\n    const parsedError = await parseJSON({\n      text: responseBody,\n      schema: errorSchema\n    });\n    return {\n      responseHeaders,\n      value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: errorToMessage(parsedError),\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        data: parsedError,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response, parsedError)\n      })\n    };\n  } catch (parseError) {\n    return {\n      responseHeaders,\n      value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: response.statusText,\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n      })\n    };\n  }\n};\nvar createEventSourceResponseHandler = (chunkSchema) => async ({ response }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (response.body == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.EmptyResponseBodyError({});\n  }\n  return {\n    responseHeaders,\n    value: parseJsonEventStream({\n      stream: response.body,\n      schema: chunkSchema\n    })\n  };\n};\nvar createJsonStreamResponseHandler = (chunkSchema) => async ({ response }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (response.body == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.EmptyResponseBodyError({});\n  }\n  let buffer = \"\";\n  return {\n    responseHeaders,\n    value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(\n      new TransformStream({\n        async transform(chunkText, controller) {\n          if (chunkText.endsWith(\"\\n\")) {\n            controller.enqueue(\n              await safeParseJSON({\n                text: buffer + chunkText,\n                schema: chunkSchema\n              })\n            );\n            buffer = \"\";\n          } else {\n            buffer += chunkText;\n          }\n        }\n      })\n    )\n  };\n};\nvar createJsonResponseHandler = (responseSchema) => async ({ response, url, requestBodyValues }) => {\n  const responseBody = await response.text();\n  const parsedResult = await safeParseJSON({\n    text: responseBody,\n    schema: responseSchema\n  });\n  const responseHeaders = extractResponseHeaders(response);\n  if (!parsedResult.success) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: \"Invalid JSON response\",\n      cause: parsedResult.error,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody,\n      url,\n      requestBodyValues\n    });\n  }\n  return {\n    responseHeaders,\n    value: parsedResult.value,\n    rawValue: parsedResult.rawValue\n  };\n};\nvar createBinaryResponseHandler = () => async ({ response, url, requestBodyValues }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (!response.body) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: \"Response body is empty\",\n      url,\n      requestBodyValues,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody: void 0\n    });\n  }\n  try {\n    const buffer = await response.arrayBuffer();\n    return {\n      responseHeaders,\n      value: new Uint8Array(buffer)\n    };\n  } catch (error) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: \"Failed to read response as array buffer\",\n      url,\n      requestBodyValues,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody: void 0,\n      cause: error\n    });\n  }\n};\nvar createStatusCodeErrorResponseHandler = () => async ({ response, url, requestBodyValues }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  const responseBody = await response.text();\n  return {\n    responseHeaders,\n    value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: response.statusText,\n      url,\n      requestBodyValues,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody\n    })\n  };\n};\n\n// src/zod-schema.ts\n\n\n// src/zod-to-json-schema/get-relative-path.ts\nvar getRelativePath = (pathA, pathB) => {\n  let i = 0;\n  for (; i < pathA.length && i < pathB.length; i++) {\n    if (pathA[i] !== pathB[i])\n      break;\n  }\n  return [(pathA.length - i).toString(), ...pathB.slice(i)].join(\"/\");\n};\n\n// src/zod-to-json-schema/options.ts\nvar ignoreOverride = Symbol(\n  \"Let zodToJsonSchema decide on which parser to use\"\n);\nvar defaultOptions = {\n  name: void 0,\n  $refStrategy: \"root\",\n  basePath: [\"#\"],\n  effectStrategy: \"input\",\n  pipeStrategy: \"all\",\n  dateStrategy: \"format:date-time\",\n  mapStrategy: \"entries\",\n  removeAdditionalStrategy: \"passthrough\",\n  allowedAdditionalProperties: true,\n  rejectedAdditionalProperties: false,\n  definitionPath: \"definitions\",\n  strictUnions: false,\n  definitions: {},\n  errorMessages: false,\n  patternStrategy: \"escape\",\n  applyRegexFlags: false,\n  emailStrategy: \"format:email\",\n  base64Strategy: \"contentEncoding:base64\",\n  nameStrategy: \"ref\"\n};\nvar getDefaultOptions = (options) => typeof options === \"string\" ? {\n  ...defaultOptions,\n  name: options\n} : {\n  ...defaultOptions,\n  ...options\n};\n\n// src/zod-to-json-schema/select-parser.ts\n\n\n// src/zod-to-json-schema/parsers/any.ts\nfunction parseAnyDef() {\n  return {};\n}\n\n// src/zod-to-json-schema/parsers/array.ts\n\nfunction parseArrayDef(def, refs) {\n  var _a, _b, _c;\n  const res = {\n    type: \"array\"\n  };\n  if (((_a = def.type) == null ? void 0 : _a._def) && ((_c = (_b = def.type) == null ? void 0 : _b._def) == null ? void 0 : _c.typeName) !== zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodAny) {\n    res.items = parseDef(def.type._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"items\"]\n    });\n  }\n  if (def.minLength) {\n    res.minItems = def.minLength.value;\n  }\n  if (def.maxLength) {\n    res.maxItems = def.maxLength.value;\n  }\n  if (def.exactLength) {\n    res.minItems = def.exactLength.value;\n    res.maxItems = def.exactLength.value;\n  }\n  return res;\n}\n\n// src/zod-to-json-schema/parsers/bigint.ts\nfunction parseBigintDef(def) {\n  const res = {\n    type: \"integer\",\n    format: \"int64\"\n  };\n  if (!def.checks)\n    return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        if (check.inclusive) {\n          res.minimum = check.value;\n        } else {\n          res.exclusiveMinimum = check.value;\n        }\n        break;\n      case \"max\":\n        if (check.inclusive) {\n          res.maximum = check.value;\n        } else {\n          res.exclusiveMaximum = check.value;\n        }\n        break;\n      case \"multipleOf\":\n        res.multipleOf = check.value;\n        break;\n    }\n  }\n  return res;\n}\n\n// src/zod-to-json-schema/parsers/boolean.ts\nfunction parseBooleanDef() {\n  return { type: \"boolean\" };\n}\n\n// src/zod-to-json-schema/parsers/branded.ts\nfunction parseBrandedDef(_def, refs) {\n  return parseDef(_def.type._def, refs);\n}\n\n// src/zod-to-json-schema/parsers/catch.ts\nvar parseCatchDef = (def, refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n\n// src/zod-to-json-schema/parsers/date.ts\nfunction parseDateDef(def, refs, overrideDateStrategy) {\n  const strategy = overrideDateStrategy != null ? overrideDateStrategy : refs.dateStrategy;\n  if (Array.isArray(strategy)) {\n    return {\n      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))\n    };\n  }\n  switch (strategy) {\n    case \"string\":\n    case \"format:date-time\":\n      return {\n        type: \"string\",\n        format: \"date-time\"\n      };\n    case \"format:date\":\n      return {\n        type: \"string\",\n        format: \"date\"\n      };\n    case \"integer\":\n      return integerDateParser(def);\n  }\n}\nvar integerDateParser = (def) => {\n  const res = {\n    type: \"integer\",\n    format: \"unix-time\"\n  };\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        res.minimum = check.value;\n        break;\n      case \"max\":\n        res.maximum = check.value;\n        break;\n    }\n  }\n  return res;\n};\n\n// src/zod-to-json-schema/parsers/default.ts\nfunction parseDefaultDef(_def, refs) {\n  return {\n    ...parseDef(_def.innerType._def, refs),\n    default: _def.defaultValue()\n  };\n}\n\n// src/zod-to-json-schema/parsers/effects.ts\nfunction parseEffectsDef(_def, refs) {\n  return refs.effectStrategy === \"input\" ? parseDef(_def.schema._def, refs) : parseAnyDef();\n}\n\n// src/zod-to-json-schema/parsers/enum.ts\nfunction parseEnumDef(def) {\n  return {\n    type: \"string\",\n    enum: Array.from(def.values)\n  };\n}\n\n// src/zod-to-json-schema/parsers/intersection.ts\nvar isJsonSchema7AllOfType = (type) => {\n  if (\"type\" in type && type.type === \"string\")\n    return false;\n  return \"allOf\" in type;\n};\nfunction parseIntersectionDef(def, refs) {\n  const allOf = [\n    parseDef(def.left._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"allOf\", \"0\"]\n    }),\n    parseDef(def.right._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"allOf\", \"1\"]\n    })\n  ].filter((x) => !!x);\n  const mergedAllOf = [];\n  allOf.forEach((schema) => {\n    if (isJsonSchema7AllOfType(schema)) {\n      mergedAllOf.push(...schema.allOf);\n    } else {\n      let nestedSchema = schema;\n      if (\"additionalProperties\" in schema && schema.additionalProperties === false) {\n        const { additionalProperties, ...rest } = schema;\n        nestedSchema = rest;\n      }\n      mergedAllOf.push(nestedSchema);\n    }\n  });\n  return mergedAllOf.length ? { allOf: mergedAllOf } : void 0;\n}\n\n// src/zod-to-json-schema/parsers/literal.ts\nfunction parseLiteralDef(def) {\n  const parsedType = typeof def.value;\n  if (parsedType !== \"bigint\" && parsedType !== \"number\" && parsedType !== \"boolean\" && parsedType !== \"string\") {\n    return {\n      type: Array.isArray(def.value) ? \"array\" : \"object\"\n    };\n  }\n  return {\n    type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n    const: def.value\n  };\n}\n\n// src/zod-to-json-schema/parsers/record.ts\n\n\n// src/zod-to-json-schema/parsers/string.ts\nvar emojiRegex = void 0;\nvar zodPatterns = {\n  /**\n   * `c` was changed to `[cC]` to replicate /i flag\n   */\n  cuid: /^[cC][^\\s-]{8,}$/,\n  cuid2: /^[0-9a-z]+$/,\n  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,\n  /**\n   * `a-z` was added to replicate /i flag\n   */\n  email: /^(?!\\.)(?!.*\\.\\.)([a-zA-Z0-9_'+\\-\\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\\-]*\\.)+[a-zA-Z]{2,}$/,\n  /**\n   * Constructed a valid Unicode RegExp\n   *\n   * Lazily instantiate since this type of regex isn't supported\n   * in all envs (e.g. React Native).\n   *\n   * See:\n   * https://github.com/colinhacks/zod/issues/2433\n   * Fix in Zod:\n   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b\n   */\n  emoji: () => {\n    if (emojiRegex === void 0) {\n      emojiRegex = RegExp(\n        \"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\",\n        \"u\"\n      );\n    }\n    return emojiRegex;\n  },\n  /**\n   * Unused\n   */\n  uuid: /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/,\n  /**\n   * Unused\n   */\n  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,\n  ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/,\n  /**\n   * Unused\n   */\n  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,\n  ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\n  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,\n  base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,\n  nanoid: /^[a-zA-Z0-9_-]{21}$/,\n  jwt: /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/\n};\nfunction parseStringDef(def, refs) {\n  const res = {\n    type: \"string\"\n  };\n  if (def.checks) {\n    for (const check of def.checks) {\n      switch (check.kind) {\n        case \"min\":\n          res.minLength = typeof res.minLength === \"number\" ? Math.max(res.minLength, check.value) : check.value;\n          break;\n        case \"max\":\n          res.maxLength = typeof res.maxLength === \"number\" ? Math.min(res.maxLength, check.value) : check.value;\n          break;\n        case \"email\":\n          switch (refs.emailStrategy) {\n            case \"format:email\":\n              addFormat(res, \"email\", check.message, refs);\n              break;\n            case \"format:idn-email\":\n              addFormat(res, \"idn-email\", check.message, refs);\n              break;\n            case \"pattern:zod\":\n              addPattern(res, zodPatterns.email, check.message, refs);\n              break;\n          }\n          break;\n        case \"url\":\n          addFormat(res, \"uri\", check.message, refs);\n          break;\n        case \"uuid\":\n          addFormat(res, \"uuid\", check.message, refs);\n          break;\n        case \"regex\":\n          addPattern(res, check.regex, check.message, refs);\n          break;\n        case \"cuid\":\n          addPattern(res, zodPatterns.cuid, check.message, refs);\n          break;\n        case \"cuid2\":\n          addPattern(res, zodPatterns.cuid2, check.message, refs);\n          break;\n        case \"startsWith\":\n          addPattern(\n            res,\n            RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`),\n            check.message,\n            refs\n          );\n          break;\n        case \"endsWith\":\n          addPattern(\n            res,\n            RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`),\n            check.message,\n            refs\n          );\n          break;\n        case \"datetime\":\n          addFormat(res, \"date-time\", check.message, refs);\n          break;\n        case \"date\":\n          addFormat(res, \"date\", check.message, refs);\n          break;\n        case \"time\":\n          addFormat(res, \"time\", check.message, refs);\n          break;\n        case \"duration\":\n          addFormat(res, \"duration\", check.message, refs);\n          break;\n        case \"length\":\n          res.minLength = typeof res.minLength === \"number\" ? Math.max(res.minLength, check.value) : check.value;\n          res.maxLength = typeof res.maxLength === \"number\" ? Math.min(res.maxLength, check.value) : check.value;\n          break;\n        case \"includes\": {\n          addPattern(\n            res,\n            RegExp(escapeLiteralCheckValue(check.value, refs)),\n            check.message,\n            refs\n          );\n          break;\n        }\n        case \"ip\": {\n          if (check.version !== \"v6\") {\n            addFormat(res, \"ipv4\", check.message, refs);\n          }\n          if (check.version !== \"v4\") {\n            addFormat(res, \"ipv6\", check.message, refs);\n          }\n          break;\n        }\n        case \"base64url\":\n          addPattern(res, zodPatterns.base64url, check.message, refs);\n          break;\n        case \"jwt\":\n          addPattern(res, zodPatterns.jwt, check.message, refs);\n          break;\n        case \"cidr\": {\n          if (check.version !== \"v6\") {\n            addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);\n          }\n          if (check.version !== \"v4\") {\n            addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);\n          }\n          break;\n        }\n        case \"emoji\":\n          addPattern(res, zodPatterns.emoji(), check.message, refs);\n          break;\n        case \"ulid\": {\n          addPattern(res, zodPatterns.ulid, check.message, refs);\n          break;\n        }\n        case \"base64\": {\n          switch (refs.base64Strategy) {\n            case \"format:binary\": {\n              addFormat(res, \"binary\", check.message, refs);\n              break;\n            }\n            case \"contentEncoding:base64\": {\n              res.contentEncoding = \"base64\";\n              break;\n            }\n            case \"pattern:zod\": {\n              addPattern(res, zodPatterns.base64, check.message, refs);\n              break;\n            }\n          }\n          break;\n        }\n        case \"nanoid\": {\n          addPattern(res, zodPatterns.nanoid, check.message, refs);\n        }\n        case \"toLowerCase\":\n        case \"toUpperCase\":\n        case \"trim\":\n          break;\n        default:\n          /* @__PURE__ */ ((_) => {\n          })(check);\n      }\n    }\n  }\n  return res;\n}\nfunction escapeLiteralCheckValue(literal, refs) {\n  return refs.patternStrategy === \"escape\" ? escapeNonAlphaNumeric(literal) : literal;\n}\nvar ALPHA_NUMERIC = new Set(\n  \"ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789\"\n);\nfunction escapeNonAlphaNumeric(source) {\n  let result = \"\";\n  for (let i = 0; i < source.length; i++) {\n    if (!ALPHA_NUMERIC.has(source[i])) {\n      result += \"\\\\\";\n    }\n    result += source[i];\n  }\n  return result;\n}\nfunction addFormat(schema, value, message, refs) {\n  var _a;\n  if (schema.format || ((_a = schema.anyOf) == null ? void 0 : _a.some((x) => x.format))) {\n    if (!schema.anyOf) {\n      schema.anyOf = [];\n    }\n    if (schema.format) {\n      schema.anyOf.push({\n        format: schema.format\n      });\n      delete schema.format;\n    }\n    schema.anyOf.push({\n      format: value,\n      ...message && refs.errorMessages && { errorMessage: { format: message } }\n    });\n  } else {\n    schema.format = value;\n  }\n}\nfunction addPattern(schema, regex, message, refs) {\n  var _a;\n  if (schema.pattern || ((_a = schema.allOf) == null ? void 0 : _a.some((x) => x.pattern))) {\n    if (!schema.allOf) {\n      schema.allOf = [];\n    }\n    if (schema.pattern) {\n      schema.allOf.push({\n        pattern: schema.pattern\n      });\n      delete schema.pattern;\n    }\n    schema.allOf.push({\n      pattern: stringifyRegExpWithFlags(regex, refs),\n      ...message && refs.errorMessages && { errorMessage: { pattern: message } }\n    });\n  } else {\n    schema.pattern = stringifyRegExpWithFlags(regex, refs);\n  }\n}\nfunction stringifyRegExpWithFlags(regex, refs) {\n  var _a;\n  if (!refs.applyRegexFlags || !regex.flags) {\n    return regex.source;\n  }\n  const flags = {\n    i: regex.flags.includes(\"i\"),\n    // Case-insensitive\n    m: regex.flags.includes(\"m\"),\n    // `^` and `$` matches adjacent to newline characters\n    s: regex.flags.includes(\"s\")\n    // `.` matches newlines\n  };\n  const source = flags.i ? regex.source.toLowerCase() : regex.source;\n  let pattern = \"\";\n  let isEscaped = false;\n  let inCharGroup = false;\n  let inCharRange = false;\n  for (let i = 0; i < source.length; i++) {\n    if (isEscaped) {\n      pattern += source[i];\n      isEscaped = false;\n      continue;\n    }\n    if (flags.i) {\n      if (inCharGroup) {\n        if (source[i].match(/[a-z]/)) {\n          if (inCharRange) {\n            pattern += source[i];\n            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();\n            inCharRange = false;\n          } else if (source[i + 1] === \"-\" && ((_a = source[i + 2]) == null ? void 0 : _a.match(/[a-z]/))) {\n            pattern += source[i];\n            inCharRange = true;\n          } else {\n            pattern += `${source[i]}${source[i].toUpperCase()}`;\n          }\n          continue;\n        }\n      } else if (source[i].match(/[a-z]/)) {\n        pattern += `[${source[i]}${source[i].toUpperCase()}]`;\n        continue;\n      }\n    }\n    if (flags.m) {\n      if (source[i] === \"^\") {\n        pattern += `(^|(?<=[\\r\n]))`;\n        continue;\n      } else if (source[i] === \"$\") {\n        pattern += `($|(?=[\\r\n]))`;\n        continue;\n      }\n    }\n    if (flags.s && source[i] === \".\") {\n      pattern += inCharGroup ? `${source[i]}\\r\n` : `[${source[i]}\\r\n]`;\n      continue;\n    }\n    pattern += source[i];\n    if (source[i] === \"\\\\\") {\n      isEscaped = true;\n    } else if (inCharGroup && source[i] === \"]\") {\n      inCharGroup = false;\n    } else if (!inCharGroup && source[i] === \"[\") {\n      inCharGroup = true;\n    }\n  }\n  try {\n    new RegExp(pattern);\n  } catch (e) {\n    console.warn(\n      `Could not convert regex pattern at ${refs.currentPath.join(\n        \"/\"\n      )} to a flag-independent form! Falling back to the flag-ignorant source`\n    );\n    return regex.source;\n  }\n  return pattern;\n}\n\n// src/zod-to-json-schema/parsers/record.ts\nfunction parseRecordDef(def, refs) {\n  var _a, _b, _c, _d, _e, _f;\n  const schema = {\n    type: \"object\",\n    additionalProperties: (_a = parseDef(def.valueType._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"additionalProperties\"]\n    })) != null ? _a : refs.allowedAdditionalProperties\n  };\n  if (((_b = def.keyType) == null ? void 0 : _b._def.typeName) === zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodString && ((_c = def.keyType._def.checks) == null ? void 0 : _c.length)) {\n    const { type, ...keyType } = parseStringDef(def.keyType._def, refs);\n    return {\n      ...schema,\n      propertyNames: keyType\n    };\n  } else if (((_d = def.keyType) == null ? void 0 : _d._def.typeName) === zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      ...schema,\n      propertyNames: {\n        enum: def.keyType._def.values\n      }\n    };\n  } else if (((_e = def.keyType) == null ? void 0 : _e._def.typeName) === zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodString && ((_f = def.keyType._def.type._def.checks) == null ? void 0 : _f.length)) {\n    const { type, ...keyType } = parseBrandedDef(\n      def.keyType._def,\n      refs\n    );\n    return {\n      ...schema,\n      propertyNames: keyType\n    };\n  }\n  return schema;\n}\n\n// src/zod-to-json-schema/parsers/map.ts\nfunction parseMapDef(def, refs) {\n  if (refs.mapStrategy === \"record\") {\n    return parseRecordDef(def, refs);\n  }\n  const keys = parseDef(def.keyType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\", \"items\", \"0\"]\n  }) || parseAnyDef();\n  const values = parseDef(def.valueType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\", \"items\", \"1\"]\n  }) || parseAnyDef();\n  return {\n    type: \"array\",\n    maxItems: 125,\n    items: {\n      type: \"array\",\n      items: [keys, values],\n      minItems: 2,\n      maxItems: 2\n    }\n  };\n}\n\n// src/zod-to-json-schema/parsers/native-enum.ts\nfunction parseNativeEnumDef(def) {\n  const object = def.values;\n  const actualKeys = Object.keys(def.values).filter((key) => {\n    return typeof object[object[key]] !== \"number\";\n  });\n  const actualValues = actualKeys.map((key) => object[key]);\n  const parsedTypes = Array.from(\n    new Set(actualValues.map((values) => typeof values))\n  );\n  return {\n    type: parsedTypes.length === 1 ? parsedTypes[0] === \"string\" ? \"string\" : \"number\" : [\"string\", \"number\"],\n    enum: actualValues\n  };\n}\n\n// src/zod-to-json-schema/parsers/never.ts\nfunction parseNeverDef() {\n  return { not: parseAnyDef() };\n}\n\n// src/zod-to-json-schema/parsers/null.ts\nfunction parseNullDef() {\n  return {\n    type: \"null\"\n  };\n}\n\n// src/zod-to-json-schema/parsers/union.ts\nvar primitiveMappings = {\n  ZodString: \"string\",\n  ZodNumber: \"number\",\n  ZodBigInt: \"integer\",\n  ZodBoolean: \"boolean\",\n  ZodNull: \"null\"\n};\nfunction parseUnionDef(def, refs) {\n  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;\n  if (options.every(\n    (x) => x._def.typeName in primitiveMappings && (!x._def.checks || !x._def.checks.length)\n  )) {\n    const types = options.reduce((types2, x) => {\n      const type = primitiveMappings[x._def.typeName];\n      return type && !types2.includes(type) ? [...types2, type] : types2;\n    }, []);\n    return {\n      type: types.length > 1 ? types : types[0]\n    };\n  } else if (options.every((x) => x._def.typeName === \"ZodLiteral\" && !x.description)) {\n    const types = options.reduce(\n      (acc, x) => {\n        const type = typeof x._def.value;\n        switch (type) {\n          case \"string\":\n          case \"number\":\n          case \"boolean\":\n            return [...acc, type];\n          case \"bigint\":\n            return [...acc, \"integer\"];\n          case \"object\":\n            if (x._def.value === null)\n              return [...acc, \"null\"];\n          case \"symbol\":\n          case \"undefined\":\n          case \"function\":\n          default:\n            return acc;\n        }\n      },\n      []\n    );\n    if (types.length === options.length) {\n      const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);\n      return {\n        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],\n        enum: options.reduce(\n          (acc, x) => {\n            return acc.includes(x._def.value) ? acc : [...acc, x._def.value];\n          },\n          []\n        )\n      };\n    }\n  } else if (options.every((x) => x._def.typeName === \"ZodEnum\")) {\n    return {\n      type: \"string\",\n      enum: options.reduce(\n        (acc, x) => [\n          ...acc,\n          ...x._def.values.filter((x2) => !acc.includes(x2))\n        ],\n        []\n      )\n    };\n  }\n  return asAnyOf(def, refs);\n}\nvar asAnyOf = (def, refs) => {\n  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map(\n    (x, i) => parseDef(x._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"anyOf\", `${i}`]\n    })\n  ).filter(\n    (x) => !!x && (!refs.strictUnions || typeof x === \"object\" && Object.keys(x).length > 0)\n  );\n  return anyOf.length ? { anyOf } : void 0;\n};\n\n// src/zod-to-json-schema/parsers/nullable.ts\nfunction parseNullableDef(def, refs) {\n  if ([\"ZodString\", \"ZodNumber\", \"ZodBigInt\", \"ZodBoolean\", \"ZodNull\"].includes(\n    def.innerType._def.typeName\n  ) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {\n    return {\n      type: [\n        primitiveMappings[def.innerType._def.typeName],\n        \"null\"\n      ]\n    };\n  }\n  const base = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"anyOf\", \"0\"]\n  });\n  return base && { anyOf: [base, { type: \"null\" }] };\n}\n\n// src/zod-to-json-schema/parsers/number.ts\nfunction parseNumberDef(def) {\n  const res = {\n    type: \"number\"\n  };\n  if (!def.checks)\n    return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"int\":\n        res.type = \"integer\";\n        break;\n      case \"min\":\n        if (check.inclusive) {\n          res.minimum = check.value;\n        } else {\n          res.exclusiveMinimum = check.value;\n        }\n        break;\n      case \"max\":\n        if (check.inclusive) {\n          res.maximum = check.value;\n        } else {\n          res.exclusiveMaximum = check.value;\n        }\n        break;\n      case \"multipleOf\":\n        res.multipleOf = check.value;\n        break;\n    }\n  }\n  return res;\n}\n\n// src/zod-to-json-schema/parsers/object.ts\nfunction parseObjectDef(def, refs) {\n  const result = {\n    type: \"object\",\n    properties: {}\n  };\n  const required = [];\n  const shape = def.shape();\n  for (const propName in shape) {\n    let propDef = shape[propName];\n    if (propDef === void 0 || propDef._def === void 0) {\n      continue;\n    }\n    const propOptional = safeIsOptional(propDef);\n    const parsedDef = parseDef(propDef._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"properties\", propName],\n      propertyPath: [...refs.currentPath, \"properties\", propName]\n    });\n    if (parsedDef === void 0) {\n      continue;\n    }\n    result.properties[propName] = parsedDef;\n    if (!propOptional) {\n      required.push(propName);\n    }\n  }\n  if (required.length) {\n    result.required = required;\n  }\n  const additionalProperties = decideAdditionalProperties(def, refs);\n  if (additionalProperties !== void 0) {\n    result.additionalProperties = additionalProperties;\n  }\n  return result;\n}\nfunction decideAdditionalProperties(def, refs) {\n  if (def.catchall._def.typeName !== \"ZodNever\") {\n    return parseDef(def.catchall._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"additionalProperties\"]\n    });\n  }\n  switch (def.unknownKeys) {\n    case \"passthrough\":\n      return refs.allowedAdditionalProperties;\n    case \"strict\":\n      return refs.rejectedAdditionalProperties;\n    case \"strip\":\n      return refs.removeAdditionalStrategy === \"strict\" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;\n  }\n}\nfunction safeIsOptional(schema) {\n  try {\n    return schema.isOptional();\n  } catch (e) {\n    return true;\n  }\n}\n\n// src/zod-to-json-schema/parsers/optional.ts\nvar parseOptionalDef = (def, refs) => {\n  var _a;\n  if (refs.currentPath.toString() === ((_a = refs.propertyPath) == null ? void 0 : _a.toString())) {\n    return parseDef(def.innerType._def, refs);\n  }\n  const innerSchema = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"anyOf\", \"1\"]\n  });\n  return innerSchema ? { anyOf: [{ not: parseAnyDef() }, innerSchema] } : parseAnyDef();\n};\n\n// src/zod-to-json-schema/parsers/pipeline.ts\nvar parsePipelineDef = (def, refs) => {\n  if (refs.pipeStrategy === \"input\") {\n    return parseDef(def.in._def, refs);\n  } else if (refs.pipeStrategy === \"output\") {\n    return parseDef(def.out._def, refs);\n  }\n  const a = parseDef(def.in._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", \"0\"]\n  });\n  const b = parseDef(def.out._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", a ? \"1\" : \"0\"]\n  });\n  return {\n    allOf: [a, b].filter((x) => x !== void 0)\n  };\n};\n\n// src/zod-to-json-schema/parsers/promise.ts\nfunction parsePromiseDef(def, refs) {\n  return parseDef(def.type._def, refs);\n}\n\n// src/zod-to-json-schema/parsers/set.ts\nfunction parseSetDef(def, refs) {\n  const items = parseDef(def.valueType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\"]\n  });\n  const schema = {\n    type: \"array\",\n    uniqueItems: true,\n    items\n  };\n  if (def.minSize) {\n    schema.minItems = def.minSize.value;\n  }\n  if (def.maxSize) {\n    schema.maxItems = def.maxSize.value;\n  }\n  return schema;\n}\n\n// src/zod-to-json-schema/parsers/tuple.ts\nfunction parseTupleDef(def, refs) {\n  if (def.rest) {\n    return {\n      type: \"array\",\n      minItems: def.items.length,\n      items: def.items.map(\n        (x, i) => parseDef(x._def, {\n          ...refs,\n          currentPath: [...refs.currentPath, \"items\", `${i}`]\n        })\n      ).reduce(\n        (acc, x) => x === void 0 ? acc : [...acc, x],\n        []\n      ),\n      additionalItems: parseDef(def.rest._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"additionalItems\"]\n      })\n    };\n  } else {\n    return {\n      type: \"array\",\n      minItems: def.items.length,\n      maxItems: def.items.length,\n      items: def.items.map(\n        (x, i) => parseDef(x._def, {\n          ...refs,\n          currentPath: [...refs.currentPath, \"items\", `${i}`]\n        })\n      ).reduce(\n        (acc, x) => x === void 0 ? acc : [...acc, x],\n        []\n      )\n    };\n  }\n}\n\n// src/zod-to-json-schema/parsers/undefined.ts\nfunction parseUndefinedDef() {\n  return {\n    not: parseAnyDef()\n  };\n}\n\n// src/zod-to-json-schema/parsers/unknown.ts\nfunction parseUnknownDef() {\n  return parseAnyDef();\n}\n\n// src/zod-to-json-schema/parsers/readonly.ts\nvar parseReadonlyDef = (def, refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n\n// src/zod-to-json-schema/select-parser.ts\nvar selectParser = (def, typeName, refs) => {\n  switch (typeName) {\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodString:\n      return parseStringDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNumber:\n      return parseNumberDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodObject:\n      return parseObjectDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodBigInt:\n      return parseBigintDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodBoolean:\n      return parseBooleanDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodDate:\n      return parseDateDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodUndefined:\n      return parseUndefinedDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNull:\n      return parseNullDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodArray:\n      return parseArrayDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodUnion:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:\n      return parseUnionDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodIntersection:\n      return parseIntersectionDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodTuple:\n      return parseTupleDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodRecord:\n      return parseRecordDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodLiteral:\n      return parseLiteralDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodEnum:\n      return parseEnumDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNativeEnum:\n      return parseNativeEnumDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNullable:\n      return parseNullableDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodOptional:\n      return parseOptionalDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodMap:\n      return parseMapDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodSet:\n      return parseSetDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodLazy:\n      return () => def.getter()._def;\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodPromise:\n      return parsePromiseDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNaN:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNever:\n      return parseNeverDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodEffects:\n      return parseEffectsDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodAny:\n      return parseAnyDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodUnknown:\n      return parseUnknownDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodDefault:\n      return parseDefaultDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodBranded:\n      return parseBrandedDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodReadonly:\n      return parseReadonlyDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodCatch:\n      return parseCatchDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodPipeline:\n      return parsePipelineDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodFunction:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodVoid:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodSymbol:\n      return void 0;\n    default:\n      return /* @__PURE__ */ ((_) => void 0)(typeName);\n  }\n};\n\n// src/zod-to-json-schema/parse-def.ts\nfunction parseDef(def, refs, forceResolution = false) {\n  var _a;\n  const seenItem = refs.seen.get(def);\n  if (refs.override) {\n    const overrideResult = (_a = refs.override) == null ? void 0 : _a.call(\n      refs,\n      def,\n      refs,\n      seenItem,\n      forceResolution\n    );\n    if (overrideResult !== ignoreOverride) {\n      return overrideResult;\n    }\n  }\n  if (seenItem && !forceResolution) {\n    const seenSchema = get$ref(seenItem, refs);\n    if (seenSchema !== void 0) {\n      return seenSchema;\n    }\n  }\n  const newItem = { def, path: refs.currentPath, jsonSchema: void 0 };\n  refs.seen.set(def, newItem);\n  const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);\n  const jsonSchema2 = typeof jsonSchemaOrGetter === \"function\" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;\n  if (jsonSchema2) {\n    addMeta(def, refs, jsonSchema2);\n  }\n  if (refs.postProcess) {\n    const postProcessResult = refs.postProcess(jsonSchema2, def, refs);\n    newItem.jsonSchema = jsonSchema2;\n    return postProcessResult;\n  }\n  newItem.jsonSchema = jsonSchema2;\n  return jsonSchema2;\n}\nvar get$ref = (item, refs) => {\n  switch (refs.$refStrategy) {\n    case \"root\":\n      return { $ref: item.path.join(\"/\") };\n    case \"relative\":\n      return { $ref: getRelativePath(refs.currentPath, item.path) };\n    case \"none\":\n    case \"seen\": {\n      if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {\n        console.warn(\n          `Recursive reference detected at ${refs.currentPath.join(\n            \"/\"\n          )}! Defaulting to any`\n        );\n        return parseAnyDef();\n      }\n      return refs.$refStrategy === \"seen\" ? parseAnyDef() : void 0;\n    }\n  }\n};\nvar addMeta = (def, refs, jsonSchema2) => {\n  if (def.description) {\n    jsonSchema2.description = def.description;\n  }\n  return jsonSchema2;\n};\n\n// src/zod-to-json-schema/refs.ts\nvar getRefs = (options) => {\n  const _options = getDefaultOptions(options);\n  const currentPath = _options.name !== void 0 ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;\n  return {\n    ..._options,\n    currentPath,\n    propertyPath: void 0,\n    seen: new Map(\n      Object.entries(_options.definitions).map(([name, def]) => [\n        def._def,\n        {\n          def: def._def,\n          path: [..._options.basePath, _options.definitionPath, name],\n          // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n          jsonSchema: void 0\n        }\n      ])\n    )\n  };\n};\n\n// src/zod-to-json-schema/zod-to-json-schema.ts\nvar zodToJsonSchema = (schema, options) => {\n  var _a;\n  const refs = getRefs(options);\n  let definitions = typeof options === \"object\" && options.definitions ? Object.entries(options.definitions).reduce(\n    (acc, [name2, schema2]) => {\n      var _a2;\n      return {\n        ...acc,\n        [name2]: (_a2 = parseDef(\n          schema2._def,\n          {\n            ...refs,\n            currentPath: [...refs.basePath, refs.definitionPath, name2]\n          },\n          true\n        )) != null ? _a2 : parseAnyDef()\n      };\n    },\n    {}\n  ) : void 0;\n  const name = typeof options === \"string\" ? options : (options == null ? void 0 : options.nameStrategy) === \"title\" ? void 0 : options == null ? void 0 : options.name;\n  const main = (_a = parseDef(\n    schema._def,\n    name === void 0 ? refs : {\n      ...refs,\n      currentPath: [...refs.basePath, refs.definitionPath, name]\n    },\n    false\n  )) != null ? _a : parseAnyDef();\n  const title = typeof options === \"object\" && options.name !== void 0 && options.nameStrategy === \"title\" ? options.name : void 0;\n  if (title !== void 0) {\n    main.title = title;\n  }\n  const combined = name === void 0 ? definitions ? {\n    ...main,\n    [refs.definitionPath]: definitions\n  } : main : {\n    $ref: [\n      ...refs.$refStrategy === \"relative\" ? [] : refs.basePath,\n      refs.definitionPath,\n      name\n    ].join(\"/\"),\n    [refs.definitionPath]: {\n      ...definitions,\n      [name]: main\n    }\n  };\n  combined.$schema = \"http://json-schema.org/draft-07/schema#\";\n  return combined;\n};\n\n// src/zod-to-json-schema/index.ts\nvar zod_to_json_schema_default = zodToJsonSchema;\n\n// src/zod-schema.ts\nfunction zod3Schema(zodSchema2, options) {\n  var _a;\n  const useReferences = (_a = options == null ? void 0 : options.useReferences) != null ? _a : false;\n  return jsonSchema(\n    zod_to_json_schema_default(zodSchema2, {\n      $refStrategy: useReferences ? \"root\" : \"none\"\n    }),\n    {\n      validate: async (value) => {\n        const result = await zodSchema2.safeParseAsync(value);\n        return result.success ? { success: true, value: result.data } : { success: false, error: result.error };\n      }\n    }\n  );\n}\nfunction zod4Schema(zodSchema2, options) {\n  var _a;\n  const useReferences = (_a = options == null ? void 0 : options.useReferences) != null ? _a : false;\n  const z4JSONSchema = zod_v4__WEBPACK_IMPORTED_MODULE_3__.toJSONSchema(zodSchema2, {\n    target: \"draft-7\",\n    io: \"output\",\n    reused: useReferences ? \"ref\" : \"inline\"\n  });\n  return jsonSchema(z4JSONSchema, {\n    validate: async (value) => {\n      const result = await zod_v4__WEBPACK_IMPORTED_MODULE_4__.safeParseAsync(zodSchema2, value);\n      return result.success ? { success: true, value: result.data } : { success: false, error: result.error };\n    }\n  });\n}\nfunction isZod4Schema(zodSchema2) {\n  return \"_zod\" in zodSchema2;\n}\nfunction zodSchema(zodSchema2, options) {\n  if (isZod4Schema(zodSchema2)) {\n    return zod4Schema(zodSchema2, options);\n  } else {\n    return zod3Schema(zodSchema2, options);\n  }\n}\n\n// src/schema.ts\nvar schemaSymbol = Symbol.for(\"vercel.ai.schema\");\nfunction jsonSchema(jsonSchema2, {\n  validate\n} = {}) {\n  return {\n    [schemaSymbol]: true,\n    _type: void 0,\n    // should never be used directly\n    [validatorSymbol]: true,\n    jsonSchema: jsonSchema2,\n    validate\n  };\n}\nfunction isSchema(value) {\n  return typeof value === \"object\" && value !== null && schemaSymbol in value && value[schemaSymbol] === true && \"jsonSchema\" in value && \"validate\" in value;\n}\nfunction asSchema(schema) {\n  return schema == null ? jsonSchema({\n    properties: {},\n    additionalProperties: false\n  }) : isSchema(schema) ? schema : zodSchema(schema);\n}\n\n// src/uint8-utils.ts\nvar { btoa, atob } = globalThis;\nfunction convertBase64ToUint8Array(base64String) {\n  const base64Url = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const latin1string = atob(base64Url);\n  return Uint8Array.from(latin1string, (byte) => byte.codePointAt(0));\n}\nfunction convertUint8ArrayToBase64(array) {\n  let latin1string = \"\";\n  for (let i = 0; i < array.length; i++) {\n    latin1string += String.fromCodePoint(array[i]);\n  }\n  return btoa(latin1string);\n}\nfunction convertToBase64(value) {\n  return value instanceof Uint8Array ? convertUint8ArrayToBase64(value) : value;\n}\n\n// src/without-trailing-slash.ts\nfunction withoutTrailingSlash(url) {\n  return url == null ? void 0 : url.replace(/\\/$/, \"\");\n}\n\n// src/is-async-iterable.ts\nfunction isAsyncIterable(obj) {\n  return obj != null && typeof obj[Symbol.asyncIterator] === \"function\";\n}\n\n// src/types/execute-tool.ts\nasync function* executeTool({\n  execute,\n  input,\n  options\n}) {\n  const result = execute(input, options);\n  if (isAsyncIterable(result)) {\n    let lastOutput;\n    for await (const output of result) {\n      lastOutput = output;\n      yield { type: \"preliminary\", output };\n    }\n    yield { type: \"final\", output: lastOutput };\n  } else {\n    yield { type: \"final\", output: await result };\n  }\n}\n\n// src/index.ts\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@ai-sdk/provider/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AISDKError: () => (/* binding */ AISDKError),\n/* harmony export */   APICallError: () => (/* binding */ APICallError),\n/* harmony export */   EmptyResponseBodyError: () => (/* binding */ EmptyResponseBodyError),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidPromptError: () => (/* binding */ InvalidPromptError),\n/* harmony export */   InvalidResponseDataError: () => (/* binding */ InvalidResponseDataError),\n/* harmony export */   JSONParseError: () => (/* binding */ JSONParseError),\n/* harmony export */   LoadAPIKeyError: () => (/* binding */ LoadAPIKeyError),\n/* harmony export */   LoadSettingError: () => (/* binding */ LoadSettingError),\n/* harmony export */   NoContentGeneratedError: () => (/* binding */ NoContentGeneratedError),\n/* harmony export */   NoSuchModelError: () => (/* binding */ NoSuchModelError),\n/* harmony export */   TooManyEmbeddingValuesForCallError: () => (/* binding */ TooManyEmbeddingValuesForCallError),\n/* harmony export */   TypeValidationError: () => (/* binding */ TypeValidationError),\n/* harmony export */   UnsupportedFunctionalityError: () => (/* binding */ UnsupportedFunctionalityError),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   isJSONArray: () => (/* binding */ isJSONArray),\n/* harmony export */   isJSONObject: () => (/* binding */ isJSONObject),\n/* harmony export */   isJSONValue: () => (/* binding */ isJSONValue)\n/* harmony export */ });\n// src/errors/ai-sdk-error.ts\nvar marker = \"vercel.ai.error\";\nvar symbol = Symbol.for(marker);\nvar _a;\nvar _AISDKError = class _AISDKError extends Error {\n  /**\n   * Creates an AI SDK Error.\n   *\n   * @param {Object} params - The parameters for creating the error.\n   * @param {string} params.name - The name of the error.\n   * @param {string} params.message - The error message.\n   * @param {unknown} [params.cause] - The underlying cause of the error.\n   */\n  constructor({\n    name: name14,\n    message,\n    cause\n  }) {\n    super(message);\n    this[_a] = true;\n    this.name = name14;\n    this.cause = cause;\n  }\n  /**\n   * Checks if the given error is an AI SDK Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.\n   */\n  static isInstance(error) {\n    return _AISDKError.hasMarker(error, marker);\n  }\n  static hasMarker(error, marker15) {\n    const markerSymbol = Symbol.for(marker15);\n    return error != null && typeof error === \"object\" && markerSymbol in error && typeof error[markerSymbol] === \"boolean\" && error[markerSymbol] === true;\n  }\n};\n_a = symbol;\nvar AISDKError = _AISDKError;\n\n// src/errors/api-call-error.ts\nvar name = \"AI_APICallError\";\nvar marker2 = `vercel.ai.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar APICallError = class extends AISDKError {\n  constructor({\n    message,\n    url,\n    requestBodyValues,\n    statusCode,\n    responseHeaders,\n    responseBody,\n    cause,\n    isRetryable = statusCode != null && (statusCode === 408 || // request timeout\n    statusCode === 409 || // conflict\n    statusCode === 429 || // too many requests\n    statusCode >= 500),\n    // server error\n    data\n  }) {\n    super({ name, message, cause });\n    this[_a2] = true;\n    this.url = url;\n    this.requestBodyValues = requestBodyValues;\n    this.statusCode = statusCode;\n    this.responseHeaders = responseHeaders;\n    this.responseBody = responseBody;\n    this.isRetryable = isRetryable;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker2);\n  }\n};\n_a2 = symbol2;\n\n// src/errors/empty-response-body-error.ts\nvar name2 = \"AI_EmptyResponseBodyError\";\nvar marker3 = `vercel.ai.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar EmptyResponseBodyError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message = \"Empty response body\" } = {}) {\n    super({ name: name2, message });\n    this[_a3] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker3);\n  }\n};\n_a3 = symbol3;\n\n// src/errors/get-error-message.ts\nfunction getErrorMessage(error) {\n  if (error == null) {\n    return \"unknown error\";\n  }\n  if (typeof error === \"string\") {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return JSON.stringify(error);\n}\n\n// src/errors/invalid-argument-error.ts\nvar name3 = \"AI_InvalidArgumentError\";\nvar marker4 = `vercel.ai.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar InvalidArgumentError = class extends AISDKError {\n  constructor({\n    message,\n    cause,\n    argument\n  }) {\n    super({ name: name3, message, cause });\n    this[_a4] = true;\n    this.argument = argument;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker4);\n  }\n};\n_a4 = symbol4;\n\n// src/errors/invalid-prompt-error.ts\nvar name4 = \"AI_InvalidPromptError\";\nvar marker5 = `vercel.ai.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar InvalidPromptError = class extends AISDKError {\n  constructor({\n    prompt,\n    message,\n    cause\n  }) {\n    super({ name: name4, message: `Invalid prompt: ${message}`, cause });\n    this[_a5] = true;\n    this.prompt = prompt;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker5);\n  }\n};\n_a5 = symbol5;\n\n// src/errors/invalid-response-data-error.ts\nvar name5 = \"AI_InvalidResponseDataError\";\nvar marker6 = `vercel.ai.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar InvalidResponseDataError = class extends AISDKError {\n  constructor({\n    data,\n    message = `Invalid response data: ${JSON.stringify(data)}.`\n  }) {\n    super({ name: name5, message });\n    this[_a6] = true;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker6);\n  }\n};\n_a6 = symbol6;\n\n// src/errors/json-parse-error.ts\nvar name6 = \"AI_JSONParseError\";\nvar marker7 = `vercel.ai.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar JSONParseError = class extends AISDKError {\n  constructor({ text, cause }) {\n    super({\n      name: name6,\n      message: `JSON parsing failed: Text: ${text}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a7] = true;\n    this.text = text;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker7);\n  }\n};\n_a7 = symbol7;\n\n// src/errors/load-api-key-error.ts\nvar name7 = \"AI_LoadAPIKeyError\";\nvar marker8 = `vercel.ai.error.${name7}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar LoadAPIKeyError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message }) {\n    super({ name: name7, message });\n    this[_a8] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker8);\n  }\n};\n_a8 = symbol8;\n\n// src/errors/load-setting-error.ts\nvar name8 = \"AI_LoadSettingError\";\nvar marker9 = `vercel.ai.error.${name8}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\nvar LoadSettingError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message }) {\n    super({ name: name8, message });\n    this[_a9] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker9);\n  }\n};\n_a9 = symbol9;\n\n// src/errors/no-content-generated-error.ts\nvar name9 = \"AI_NoContentGeneratedError\";\nvar marker10 = `vercel.ai.error.${name9}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\nvar NoContentGeneratedError = class extends AISDKError {\n  // used in isInstance\n  constructor({\n    message = \"No content generated.\"\n  } = {}) {\n    super({ name: name9, message });\n    this[_a10] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker10);\n  }\n};\n_a10 = symbol10;\n\n// src/errors/no-such-model-error.ts\nvar name10 = \"AI_NoSuchModelError\";\nvar marker11 = `vercel.ai.error.${name10}`;\nvar symbol11 = Symbol.for(marker11);\nvar _a11;\nvar NoSuchModelError = class extends AISDKError {\n  constructor({\n    errorName = name10,\n    modelId,\n    modelType,\n    message = `No such ${modelType}: ${modelId}`\n  }) {\n    super({ name: errorName, message });\n    this[_a11] = true;\n    this.modelId = modelId;\n    this.modelType = modelType;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker11);\n  }\n};\n_a11 = symbol11;\n\n// src/errors/too-many-embedding-values-for-call-error.ts\nvar name11 = \"AI_TooManyEmbeddingValuesForCallError\";\nvar marker12 = `vercel.ai.error.${name11}`;\nvar symbol12 = Symbol.for(marker12);\nvar _a12;\nvar TooManyEmbeddingValuesForCallError = class extends AISDKError {\n  constructor(options) {\n    super({\n      name: name11,\n      message: `Too many values for a single embedding call. The ${options.provider} model \"${options.modelId}\" can only embed up to ${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`\n    });\n    this[_a12] = true;\n    this.provider = options.provider;\n    this.modelId = options.modelId;\n    this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;\n    this.values = options.values;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker12);\n  }\n};\n_a12 = symbol12;\n\n// src/errors/type-validation-error.ts\nvar name12 = \"AI_TypeValidationError\";\nvar marker13 = `vercel.ai.error.${name12}`;\nvar symbol13 = Symbol.for(marker13);\nvar _a13;\nvar _TypeValidationError = class _TypeValidationError extends AISDKError {\n  constructor({ value, cause }) {\n    super({\n      name: name12,\n      message: `Type validation failed: Value: ${JSON.stringify(value)}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a13] = true;\n    this.value = value;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker13);\n  }\n  /**\n   * Wraps an error into a TypeValidationError.\n   * If the cause is already a TypeValidationError with the same value, it returns the cause.\n   * Otherwise, it creates a new TypeValidationError.\n   *\n   * @param {Object} params - The parameters for wrapping the error.\n   * @param {unknown} params.value - The value that failed validation.\n   * @param {unknown} params.cause - The original error or cause of the validation failure.\n   * @returns {TypeValidationError} A TypeValidationError instance.\n   */\n  static wrap({\n    value,\n    cause\n  }) {\n    return _TypeValidationError.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError({ value, cause });\n  }\n};\n_a13 = symbol13;\nvar TypeValidationError = _TypeValidationError;\n\n// src/errors/unsupported-functionality-error.ts\nvar name13 = \"AI_UnsupportedFunctionalityError\";\nvar marker14 = `vercel.ai.error.${name13}`;\nvar symbol14 = Symbol.for(marker14);\nvar _a14;\nvar UnsupportedFunctionalityError = class extends AISDKError {\n  constructor({\n    functionality,\n    message = `'${functionality}' functionality not supported.`\n  }) {\n    super({ name: name13, message });\n    this[_a14] = true;\n    this.functionality = functionality;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker14);\n  }\n};\n_a14 = symbol14;\n\n// src/json-value/is-json.ts\nfunction isJSONValue(value) {\n  if (value === null || typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n    return true;\n  }\n  if (Array.isArray(value)) {\n    return value.every(isJSONValue);\n  }\n  if (typeof value === \"object\") {\n    return Object.entries(value).every(\n      ([key, val]) => typeof key === \"string\" && isJSONValue(val)\n    );\n  }\n  return false;\n}\nfunction isJSONArray(value) {\n  return Array.isArray(value) && value.every(isJSONValue);\n}\nfunction isJSONObject(value) {\n  return value != null && typeof value === \"object\" && Object.entries(value).every(\n    ([key, val]) => typeof key === \"string\" && isJSONValue(val)\n  );\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/anthropic/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@ai-sdk/anthropic/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anthropic: () => (/* binding */ anthropic),\n/* harmony export */   createAnthropic: () => (/* binding */ createAnthropic)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/zod/v4/index.js\");\n// src/anthropic-provider.ts\n\n\n\n// src/anthropic-messages-language-model.ts\n\n\n\n\n// src/anthropic-error.ts\n\n\nvar anthropicErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n});\nvar anthropicFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/anthropic-messages-options.ts\n\nvar anthropicFilePartProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Enable citations for this document\n     */\n    enabled: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean()\n  }).optional(),\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar anthropicProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  sendReasoning: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"enabled\"), zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"disabled\")]),\n    budgetTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n  }).optional(),\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\n\n// src/anthropic-prepare-tools.ts\n\n\n// src/get-cache-control.ts\nfunction getCacheControl(providerMetadata) {\n  var _a;\n  const anthropic2 = providerMetadata == null ? void 0 : providerMetadata.anthropic;\n  const cacheControlValue = (_a = anthropic2 == null ? void 0 : anthropic2.cacheControl) != null ? _a : anthropic2 == null ? void 0 : anthropic2.cache_control;\n  return cacheControlValue;\n}\n\n// src/tool/web-search_20250305.ts\n\n\nvar webSearch_20250305ArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Maximum number of web searches Claude can perform during the conversation.\n   */\n  maxUses: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Optional list of domains that Claude is allowed to search.\n   */\n  allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * Optional list of domains that Claude should avoid when searching.\n   */\n  blockedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * Optional user location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearch_20250305OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    pageAge: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    encryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n);\nvar factory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.web_search_20250305\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  outputSchema: webSearch_20250305OutputSchema\n});\nvar webSearch_20250305 = (args = {}) => {\n  return factory(args);\n};\n\n// src/anthropic-prepare-tools.ts\nfunction isWebSearchTool(tool) {\n  return typeof tool === \"object\" && tool !== null && \"type\" in tool && tool.type === \"web_search_20250305\";\n}\nfunction prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  const betas = /* @__PURE__ */ new Set();\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n  }\n  const anthropicTools2 = [];\n  for (const tool of tools) {\n    if (isWebSearchTool(tool)) {\n      anthropicTools2.push(tool);\n      continue;\n    }\n    switch (tool.type) {\n      case \"function\":\n        const cacheControl = getCacheControl(tool.providerOptions);\n        anthropicTools2.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl\n        });\n        break;\n      case \"provider-defined\":\n        switch (tool.id) {\n          case \"anthropic.computer_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20250124\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.computer_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20241022\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.text_editor_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20250124\"\n            });\n            break;\n          case \"anthropic.text_editor_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20241022\"\n            });\n            break;\n          case \"anthropic.text_editor_20250429\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_based_edit_tool\",\n              type: \"text_editor_20250429\"\n            });\n            break;\n          case \"anthropic.bash_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20250124\"\n            });\n            break;\n          case \"anthropic.bash_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20241022\"\n            });\n            break;\n          case \"anthropic.web_search_20250305\": {\n            const args = webSearch_20250305ArgsSchema.parse(tool.args);\n            anthropicTools2.push({\n              type: \"web_search_20250305\",\n              name: \"web_search\",\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"anthropic.code_execution_20250522\": {\n            betas.add(\"code-execution-2025-05-22\");\n            anthropicTools2.push({\n              type: \"code_execution_20250522\",\n              name: \"code_execution\"\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools2,\n      toolChoice: disableParallelToolUse ? { type: \"auto\", disable_parallel_tool_use: disableParallelToolUse } : void 0,\n      toolWarnings,\n      betas\n    };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"auto\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"required\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"any\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"none\":\n      return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n    case \"tool\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"tool\",\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/convert-to-anthropic-messages-prompt.ts\n\n\n\n// src/tool/code-execution_20250522.ts\n\n\nvar codeExecution_20250522OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n  stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar factory2 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.code_execution_20250522\",\n  name: \"code_execution\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  outputSchema: codeExecution_20250522OutputSchema\n});\nvar codeExecution_20250522 = (args = {}) => {\n  return factory2(args);\n};\n\n// src/convert-to-anthropic-messages-prompt.ts\nfunction convertToString(data) {\n  if (typeof data === \"string\") {\n    return Buffer.from(data, \"base64\").toString(\"utf-8\");\n  }\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n  if (data instanceof URL) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n      functionality: \"URL-based text documents are not supported for citations\"\n    });\n  }\n  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`\n  });\n}\nasync function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings\n}) {\n  var _a, _b, _c, _d, _e;\n  const betas = /* @__PURE__ */ new Set();\n  const blocks = groupIntoBlocks(prompt);\n  let system = void 0;\n  const messages = [];\n  async function shouldEnableCitations(providerMetadata) {\n    var _a2, _b2;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return (_b2 = (_a2 = anthropicOptions == null ? void 0 : anthropicOptions.citations) == null ? void 0 : _a2.enabled) != null ? _b2 : false;\n  }\n  async function getDocumentMetadata(providerMetadata) {\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return {\n      title: anthropicOptions == null ? void 0 : anthropicOptions.title,\n      context: anthropicOptions == null ? void 0 : anthropicOptions.context\n    };\n  }\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n    switch (type) {\n      case \"system\": {\n        if (system != null) {\n          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n            functionality: \"Multiple system messages that are separated by user/assistant messages\"\n          });\n        }\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: \"text\",\n          text: content,\n          cache_control: getCacheControl(providerOptions)\n        }));\n        break;\n      }\n      case \"user\": {\n        const anthropicContent = [];\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case \"user\": {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n                const isLastPart = j === content.length - 1;\n                const cacheControl = (_a = getCacheControl(part.providerOptions)) != null ? _a : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                switch (part.type) {\n                  case \"text\": {\n                    anthropicContent.push({\n                      type: \"text\",\n                      text: part.text,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  case \"file\": {\n                    if (part.mediaType.startsWith(\"image/\")) {\n                      anthropicContent.push({\n                        type: \"image\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType,\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"application/pdf\") {\n                      betas.add(\"pdfs-2024-09-25\");\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: \"application/pdf\",\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        title: (_b = metadata.title) != null ? _b : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"text/plain\") {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"text\",\n                          media_type: \"text/plain\",\n                          data: convertToString(part.data)\n                        },\n                        title: (_c = metadata.title) != null ? _c : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`\n                      });\n                    }\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n            case \"tool\": {\n              for (let i2 = 0; i2 < content.length; i2++) {\n                const part = content[i2];\n                const isLastPart = i2 === content.length - 1;\n                const cacheControl = (_d = getCacheControl(part.providerOptions)) != null ? _d : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                const output = part.output;\n                let contentValue;\n                switch (output.type) {\n                  case \"content\":\n                    contentValue = output.value.map((contentPart) => {\n                      switch (contentPart.type) {\n                        case \"text\":\n                          return {\n                            type: \"text\",\n                            text: contentPart.text,\n                            cache_control: void 0\n                          };\n                        case \"media\": {\n                          if (contentPart.mediaType.startsWith(\"image/\")) {\n                            return {\n                              type: \"image\",\n                              source: {\n                                type: \"base64\",\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data\n                              },\n                              cache_control: void 0\n                            };\n                          }\n                          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case \"text\":\n                  case \"error-text\":\n                    contentValue = output.value;\n                    break;\n                  case \"json\":\n                  case \"error-json\":\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n                anthropicContent.push({\n                  type: \"tool_result\",\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error: output.type === \"error-text\" || output.type === \"error-json\" ? true : void 0,\n                  cache_control: cacheControl\n                });\n              }\n              break;\n            }\n            default: {\n              const _exhaustiveCheck = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n        messages.push({ role: \"user\", content: anthropicContent });\n        break;\n      }\n      case \"assistant\": {\n        const anthropicContent = [];\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n            const cacheControl = (_e = getCacheControl(part.providerOptions)) != null ? _e : isLastContentPart ? getCacheControl(message.providerOptions) : void 0;\n            switch (part.type) {\n              case \"text\": {\n                anthropicContent.push({\n                  type: \"text\",\n                  text: (\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart ? part.text.trim() : part.text\n                  ),\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"reasoning\": {\n                if (sendReasoning) {\n                  const reasoningMetadata = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                    provider: \"anthropic\",\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema\n                  });\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      anthropicContent.push({\n                        type: \"thinking\",\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                        cache_control: cacheControl\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      anthropicContent.push({\n                        type: \"redacted_thinking\",\n                        data: reasoningMetadata.redactedData,\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      warnings.push({\n                        type: \"other\",\n                        message: \"unsupported reasoning metadata\"\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: \"other\",\n                      message: \"unsupported reasoning metadata\"\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: \"other\",\n                    message: \"sending reasoning content is disabled for this model\"\n                  });\n                }\n                break;\n              }\n              case \"tool-call\": {\n                if (part.providerExecuted) {\n                  if (part.toolName === \"web_search\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"web_search\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  if (part.toolName === \"code_execution\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"code_execution\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  warnings.push({\n                    type: \"other\",\n                    message: `provider executed tool call for tool ${part.toolName} is not supported`\n                  });\n                  break;\n                }\n                anthropicContent.push({\n                  type: \"tool_use\",\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"tool-result\": {\n                if (part.toolName === \"web_search\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const webSearchOutput = webSearch_20250305OutputSchema.parse(\n                    output.value\n                  );\n                  anthropicContent.push({\n                    type: \"web_search_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map((result) => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type\n                    })),\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                if (part.toolName === \"code_execution\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const codeExecutionOutput = codeExecution_20250522OutputSchema.parse(output.value);\n                  anthropicContent.push({\n                    type: \"code_execution_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: codeExecutionOutput.type,\n                      stdout: codeExecutionOutput.stdout,\n                      stderr: codeExecutionOutput.stderr,\n                      return_code: codeExecutionOutput.return_code\n                    },\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                warnings.push({\n                  type: \"other\",\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`\n                });\n                break;\n              }\n            }\n          }\n        }\n        messages.push({ role: \"assistant\", content: anthropicContent });\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return {\n    prompt: { system, messages },\n    betas\n  };\n}\nfunction groupIntoBlocks(prompt) {\n  const blocks = [];\n  let currentBlock = void 0;\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case \"system\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"system\") {\n          currentBlock = { type: \"system\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"assistant\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"assistant\") {\n          currentBlock = { type: \"assistant\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"user\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"tool\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return blocks;\n}\n\n// src/map-anthropic-stop-reason.ts\nfunction mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool\n}) {\n  switch (finishReason) {\n    case \"pause_turn\":\n    case \"end_turn\":\n    case \"stop_sequence\":\n      return \"stop\";\n    case \"refusal\":\n      return \"content-filter\";\n    case \"tool_use\":\n      return isJsonResponseFromTool ? \"stop\" : \"tool-calls\";\n    case \"max_tokens\":\n      return \"length\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/anthropic-messages-language-model.ts\nvar citationSchemas = {\n  webSearchResult: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    encrypted_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  pageLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"page_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    start_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    end_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  }),\n  charLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"char_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    start_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    end_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  })\n};\nvar citationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  citationSchemas.webSearchResult,\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nvar documentCitationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nfunction processCitation(citation, citationDocuments, generateId3, onSource) {\n  if (citation.type === \"page_location\" || citation.type === \"char_location\") {\n    const source = createCitationSource(\n      citation,\n      citationDocuments,\n      generateId3\n    );\n    if (source) {\n      onSource(source);\n    }\n  }\n}\nfunction createCitationSource(citation, citationDocuments, generateId3) {\n  var _a;\n  const documentInfo = citationDocuments[citation.document_index];\n  if (!documentInfo) {\n    return null;\n  }\n  const providerMetadata = citation.type === \"page_location\" ? {\n    citedText: citation.cited_text,\n    startPageNumber: citation.start_page_number,\n    endPageNumber: citation.end_page_number\n  } : {\n    citedText: citation.cited_text,\n    startCharIndex: citation.start_char_index,\n    endCharIndex: citation.end_char_index\n  };\n  return {\n    type: \"source\",\n    sourceType: \"document\",\n    id: generateId3(),\n    mediaType: documentInfo.mediaType,\n    title: (_a = citation.document_title) != null ? _a : documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic: providerMetadata\n    }\n  };\n}\nvar AnthropicMessagesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    var _a;\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = (_a = config.generateId) != null ? _a : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId;\n  }\n  supportsUrl(url) {\n    return url.protocol === \"https:\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  get supportedUrls() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).supportedUrls) == null ? void 0 : _b.call(_a)) != null ? _c : {};\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens = 4096,\n    // 4096: max model output tokens TODO update default in v5\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c;\n    const warnings = [];\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"seed\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\") {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"responseFormat\",\n          details: \"JSON response format requires a schema. The response format is ignored.\"\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"tools\",\n          details: \"JSON response format does not support tools. The provided tools are ignored.\"\n        });\n      }\n    }\n    const jsonResponseTool = (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null ? {\n      type: \"function\",\n      name: \"json\",\n      description: \"Respond with a JSON object.\",\n      inputSchema: responseFormat.schema\n    } : void 0;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions,\n      schema: anthropicProviderOptions\n    });\n    const { prompt: messagesPrompt, betas: messagesBetas } = await convertToAnthropicMessagesPrompt({\n      prompt,\n      sendReasoning: (_a = anthropicOptions == null ? void 0 : anthropicOptions.sendReasoning) != null ? _a : true,\n      warnings\n    });\n    const isThinking = ((_b = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _b.type) === \"enabled\";\n    const thinkingBudget = (_c = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _c.budgetTokens;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n      // provider specific settings:\n      ...isThinking && {\n        thinking: { type: \"enabled\", budget_tokens: thinkingBudget }\n      },\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages\n    };\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"thinking requires a budget\"\n        });\n      }\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported when thinking is enabled\"\n        });\n      }\n      if (topK != null) {\n        baseArgs.top_k = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topK\",\n          details: \"topK is not supported when thinking is enabled\"\n        });\n      }\n      if (topP != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported when thinking is enabled\"\n        });\n      }\n      baseArgs.max_tokens = maxOutputTokens + thinkingBudget;\n    }\n    const {\n      tools: anthropicTools2,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas\n    } = prepareTools(\n      jsonResponseTool != null ? {\n        tools: [jsonResponseTool],\n        toolChoice: { type: \"tool\", toolName: jsonResponseTool.name },\n        disableParallelToolUse: true\n      } : {\n        tools: tools != null ? tools : [],\n        toolChoice,\n        disableParallelToolUse: anthropicOptions == null ? void 0 : anthropicOptions.disableParallelToolUse\n      }\n    );\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools2,\n        tool_choice: anthropicToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings],\n      betas: /* @__PURE__ */ new Set([...messagesBetas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null\n    };\n  }\n  async getHeaders({\n    betas,\n    headers\n  }) {\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      betas.size > 0 ? { \"anthropic-beta\": Array.from(betas).join(\",\") } : {},\n      headers\n    );\n  }\n  buildRequestUrl(isStreaming) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).buildRequestUrl) == null ? void 0 : _b.call(_a, this.config.baseURL, isStreaming)) != null ? _c : `${this.config.baseURL}/messages`;\n  }\n  transformRequestBody(args) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).transformRequestBody) == null ? void 0 : _b.call(_a, args)) != null ? _c : args;\n  }\n  extractCitationDocuments(prompt) {\n    const isCitationPart = (part) => {\n      var _a, _b;\n      if (part.type !== \"file\") {\n        return false;\n      }\n      if (part.mediaType !== \"application/pdf\" && part.mediaType !== \"text/plain\") {\n        return false;\n      }\n      const anthropic2 = (_a = part.providerOptions) == null ? void 0 : _a.anthropic;\n      const citationsConfig = anthropic2 == null ? void 0 : anthropic2.citations;\n      return (_b = citationsConfig == null ? void 0 : citationsConfig.enabled) != null ? _b : false;\n    };\n    return prompt.filter((message) => message.role === \"user\").flatMap((message) => message.content).filter(isCitationPart).map((part) => {\n      var _a;\n      const filePart = part;\n      return {\n        title: (_a = filePart.filename) != null ? _a : \"Untitled Document\",\n        filename: filePart.filename,\n        mediaType: filePart.mediaType\n      };\n    });\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e;\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        anthropicMessagesResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const content = [];\n    for (const part of response.content) {\n      switch (part.type) {\n        case \"text\": {\n          if (!usesJsonResponseTool) {\n            content.push({ type: \"text\", text: part.text });\n            if (part.citations) {\n              for (const citation of part.citations) {\n                processCitation(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                  (source) => content.push(source)\n                );\n              }\n            }\n          }\n          break;\n        }\n        case \"thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature\n              }\n            }\n          });\n          break;\n        }\n        case \"redacted_thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: \"\",\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data\n              }\n            }\n          });\n          break;\n        }\n        case \"tool_use\": {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool ? {\n              type: \"text\",\n              text: JSON.stringify(part.input)\n            } : {\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input)\n            }\n          );\n          break;\n        }\n        case \"server_tool_use\": {\n          if (part.name === \"web_search\" || part.name === \"code_execution\") {\n            content.push({\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"web_search_tool_result\": {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              result: part.content.map((result) => {\n                var _a2;\n                return {\n                  url: result.url,\n                  title: result.title,\n                  pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                  encryptedContent: result.encrypted_content,\n                  type: result.type\n                };\n              }),\n              providerExecuted: true\n            });\n            for (const result of part.content) {\n              content.push({\n                type: \"source\",\n                sourceType: \"url\",\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: (_a = result.page_age) != null ? _a : null\n                  }\n                }\n              });\n            }\n          } else {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              isError: true,\n              result: {\n                type: \"web_search_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"code_execution_tool_result\": {\n          if (part.content.type === \"code_execution_result\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code\n              },\n              providerExecuted: true\n            });\n          } else if (part.content.type === \"code_execution_tool_result_error\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              isError: true,\n              result: {\n                type: \"code_execution_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n      }\n    }\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: (_b = response.usage.cache_read_input_tokens) != null ? _b : void 0\n      },\n      request: { body: args },\n      response: {\n        id: (_c = response.id) != null ? _c : void 0,\n        modelId: (_d = response.model) != null ? _d : void 0,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage,\n          cacheCreationInputTokens: (_e = response.usage.cache_creation_input_tokens) != null ? _e : null\n        }\n      }\n    };\n  }\n  async doStream(options) {\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const body = { ...args, stream: true };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        anthropicMessagesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const contentBlocks = {};\n    let providerMetadata = void 0;\n    let blockType = void 0;\n    const generateId3 = this.generateId;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            switch (value.type) {\n              case \"ping\": {\n                return;\n              }\n              case \"content_block_start\": {\n                const contentBlockType = value.content_block.type;\n                blockType = contentBlockType;\n                switch (contentBlockType) {\n                  case \"text\": {\n                    contentBlocks[value.index] = { type: \"text\" };\n                    controller.enqueue({\n                      type: \"text-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"redacted_thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data\n                        }\n                      }\n                    });\n                    return;\n                  }\n                  case \"tool_use\": {\n                    contentBlocks[value.index] = usesJsonResponseTool ? { type: \"text\" } : {\n                      type: \"tool-call\",\n                      toolCallId: value.content_block.id,\n                      toolName: value.content_block.name,\n                      input: \"\"\n                    };\n                    controller.enqueue(\n                      usesJsonResponseTool ? { type: \"text-start\", id: String(value.index) } : {\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name\n                      }\n                    );\n                    return;\n                  }\n                  case \"server_tool_use\": {\n                    if (value.content_block.name === \"web_search\" || value.content_block.name === \"code_execution\") {\n                      contentBlocks[value.index] = {\n                        type: \"tool-call\",\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: \"\",\n                        providerExecuted: true\n                      };\n                      controller.enqueue({\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name,\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"web_search_tool_result\": {\n                    const part = value.content_block;\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        result: part.content.map((result) => {\n                          var _a2;\n                          return {\n                            url: result.url,\n                            title: result.title,\n                            pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                            encryptedContent: result.encrypted_content,\n                            type: result.type\n                          };\n                        }),\n                        providerExecuted: true\n                      });\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: \"source\",\n                          sourceType: \"url\",\n                          id: generateId3(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: (_a = result.page_age) != null ? _a : null\n                            }\n                          }\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        isError: true,\n                        result: {\n                          type: \"web_search_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"code_execution_tool_result\": {\n                    const part = value.content_block;\n                    if (part.content.type === \"code_execution_result\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code\n                        },\n                        providerExecuted: true\n                      });\n                    } else if (part.content.type === \"code_execution_tool_result_error\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        isError: true,\n                        result: {\n                          type: \"code_execution_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"content_block_stop\": {\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n                  switch (contentBlock.type) {\n                    case \"text\": {\n                      controller.enqueue({\n                        type: \"text-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"reasoning\": {\n                      controller.enqueue({\n                        type: \"reasoning-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"tool-call\":\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: \"tool-input-end\",\n                          id: contentBlock.toolCallId\n                        });\n                        controller.enqueue(contentBlock);\n                      }\n                      break;\n                  }\n                  delete contentBlocks[value.index];\n                }\n                blockType = void 0;\n                return;\n              }\n              case \"content_block_delta\": {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case \"text_delta\": {\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n                    controller.enqueue({\n                      type: \"text-delta\",\n                      id: String(value.index),\n                      delta: value.delta.text\n                    });\n                    return;\n                  }\n                  case \"thinking_delta\": {\n                    controller.enqueue({\n                      type: \"reasoning-delta\",\n                      id: String(value.index),\n                      delta: value.delta.thinking\n                    });\n                    return;\n                  }\n                  case \"signature_delta\": {\n                    if (blockType === \"thinking\") {\n                      controller.enqueue({\n                        type: \"reasoning-delta\",\n                        id: String(value.index),\n                        delta: \"\",\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature\n                          }\n                        }\n                      });\n                    }\n                    return;\n                  }\n                  case \"input_json_delta\": {\n                    const contentBlock = contentBlocks[value.index];\n                    const delta = value.delta.partial_json;\n                    if (usesJsonResponseTool) {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"text\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"text-delta\",\n                        id: String(value.index),\n                        delta\n                      });\n                    } else {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"tool-call\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: contentBlock.toolCallId,\n                        delta\n                      });\n                      contentBlock.input += delta;\n                    }\n                    return;\n                  }\n                  case \"citations_delta\": {\n                    const citation = value.delta.citation;\n                    processCitation(\n                      citation,\n                      citationDocuments,\n                      generateId3,\n                      (source) => controller.enqueue(source)\n                    );\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"message_start\": {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens = (_b = value.message.usage.cache_read_input_tokens) != null ? _b : void 0;\n                providerMetadata = {\n                  anthropic: {\n                    usage: value.message.usage,\n                    cacheCreationInputTokens: (_c = value.message.usage.cache_creation_input_tokens) != null ? _c : null\n                  }\n                };\n                controller.enqueue({\n                  type: \"response-metadata\",\n                  id: (_d = value.message.id) != null ? _d : void 0,\n                  modelId: (_e = value.message.model) != null ? _e : void 0\n                });\n                return;\n              }\n              case \"message_delta\": {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens = ((_f = usage.inputTokens) != null ? _f : 0) + ((_g = value.usage.output_tokens) != null ? _g : 0);\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool\n                });\n                return;\n              }\n              case \"message_stop\": {\n                controller.enqueue({\n                  type: \"finish\",\n                  finishReason,\n                  usage,\n                  providerMetadata\n                });\n                return;\n              }\n              case \"error\": {\n                controller.enqueue({ type: \"error\", error: value.error });\n                return;\n              }\n              default: {\n                const _exhaustiveCheck = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar anthropicMessagesResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(citationSchema).optional()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      })\n    ])\n  ),\n  stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.looseObject({\n    input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  })\n});\nvar anthropicMessagesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_start\"),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.looseObject({\n        input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n      })\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_start\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    content_block: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_delta\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"input_json_delta\"),\n        partial_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text_delta\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking_delta\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"signature_delta\"),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"citations_delta\"),\n        citation: citationSchema\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_stop\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n    error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_delta\"),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish() }),\n    usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_stop\")\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"ping\")\n  })\n]);\nvar anthropicReasoningMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  redactedData: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/tool/bash_20241022.ts\n\n\nvar bash_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20241022\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/bash_20250124.ts\n\n\nvar bash_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20250124\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/computer_20241022.ts\n\n\nvar computer_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20241022\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"key\",\n      \"type\",\n      \"mouse_move\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"screenshot\",\n      \"cursor_position\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  })\n});\n\n// src/tool/computer_20250124.ts\n\n\nvar computer_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20250124\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"key\",\n      \"hold_key\",\n      \"type\",\n      \"cursor_position\",\n      \"mouse_move\",\n      \"left_mouse_down\",\n      \"left_mouse_up\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"triple_click\",\n      \"scroll\",\n      \"wait\",\n      \"screenshot\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()]).optional(),\n    duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    scroll_amount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    scroll_direction: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"up\", \"down\", \"left\", \"right\"]).optional(),\n    start_coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()]).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  })\n});\n\n// src/tool/text-editor_20241022.ts\n\n\nvar textEditor_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20241022\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250124.ts\n\n\nvar textEditor_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250124\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250429.ts\n\n\nvar textEditor_20250429 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250429\",\n  name: \"str_replace_based_edit_tool\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/anthropic-tools.ts\nvar anthropicTools = {\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20241022,\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20250124,\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250522,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20241022,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command.\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   */\n  textEditor_20250429,\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_search`.\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305\n};\n\n// src/anthropic-provider.ts\nfunction createAnthropic(options = {}) {\n  var _a;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.anthropic.com/v1\";\n  const getHeaders = () => ({\n    \"anthropic-version\": \"2023-06-01\",\n    \"x-api-key\": (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"ANTHROPIC_API_KEY\",\n      description: \"Anthropic\"\n    }),\n    ...options.headers\n  });\n  const createChatModel = (modelId) => {\n    var _a2;\n    return new AnthropicMessagesLanguageModel(modelId, {\n      provider: \"anthropic.messages\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      generateId: (_a2 = options.generateId) != null ? _a2 : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId,\n      supportedUrls: () => ({\n        \"image/*\": [/^https?:\\/\\/.*$/]\n      })\n    });\n  };\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Anthropic model function cannot be called with the new keyword.\"\n      );\n    }\n    return createChatModel(modelId);\n  };\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.messages = createChatModel;\n  provider.textEmbeddingModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.NoSuchModelError({ modelId, modelType: \"textEmbeddingModel\" });\n  };\n  provider.imageModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.NoSuchModelError({ modelId, modelType: \"imageModel\" });\n  };\n  provider.tools = anthropicTools;\n  return provider;\n}\nvar anthropic = createAnthropic();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/anthropic/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/gateway/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@ai-sdk/gateway/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GatewayAuthenticationError: () => (/* binding */ GatewayAuthenticationError),\n/* harmony export */   GatewayError: () => (/* binding */ GatewayError),\n/* harmony export */   GatewayInternalServerError: () => (/* binding */ GatewayInternalServerError),\n/* harmony export */   GatewayInvalidRequestError: () => (/* binding */ GatewayInvalidRequestError),\n/* harmony export */   GatewayModelNotFoundError: () => (/* binding */ GatewayModelNotFoundError),\n/* harmony export */   GatewayRateLimitError: () => (/* binding */ GatewayRateLimitError),\n/* harmony export */   GatewayResponseError: () => (/* binding */ GatewayResponseError),\n/* harmony export */   createGateway: () => (/* binding */ createGatewayProvider),\n/* harmony export */   createGatewayProvider: () => (/* binding */ createGatewayProvider),\n/* harmony export */   gateway: () => (/* binding */ gateway)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/zod/v4/classic/schemas.js\");\n// src/gateway-provider.ts\n\n\n\n// src/errors/as-gateway-error.ts\n\n\n// src/errors/create-gateway-error.ts\n\n\n// src/errors/gateway-error.ts\nvar marker = \"vercel.ai.gateway.error\";\nvar symbol = Symbol.for(marker);\nvar _a, _b;\nvar GatewayError = class _GatewayError extends (_b = Error, _a = symbol, _b) {\n  constructor({\n    message,\n    statusCode = 500,\n    cause\n  }) {\n    super(message);\n    this[_a] = true;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n  /**\n   * Checks if the given error is a Gateway Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is a Gateway Error, false otherwise.\n   */\n  static isInstance(error) {\n    return _GatewayError.hasMarker(error);\n  }\n  static hasMarker(error) {\n    return typeof error === \"object\" && error !== null && symbol in error && error[symbol] === true;\n  }\n};\n\n// src/errors/gateway-authentication-error.ts\nvar name = \"GatewayAuthenticationError\";\nvar marker2 = `vercel.ai.gateway.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2, _b2;\nvar GatewayAuthenticationError = class _GatewayAuthenticationError extends (_b2 = GatewayError, _a2 = symbol2, _b2) {\n  constructor({\n    message = \"Authentication failed\",\n    statusCode = 401,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a2] = true;\n    // used in isInstance\n    this.name = name;\n    this.type = \"authentication_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol2 in error;\n  }\n  /**\n   * Creates a contextual error message when authentication fails\n   */\n  static createContextualError({\n    apiKeyProvided,\n    oidcTokenProvided,\n    message = \"Authentication failed\",\n    statusCode = 401,\n    cause\n  }) {\n    let contextualMessage;\n    if (apiKeyProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid API key provided.\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else if (oidcTokenProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid OIDC token provided.\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed\n\nAlternative: Provide an API key via 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else {\n      contextualMessage = `AI Gateway authentication failed: No authentication provided.\n\nProvide either an API key or OIDC token.\n\nAPI key instructions:\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.\n\nOIDC token instructions:\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed`;\n    }\n    return new _GatewayAuthenticationError({\n      message: contextualMessage,\n      statusCode,\n      cause\n    });\n  }\n};\n\n// src/errors/gateway-invalid-request-error.ts\nvar name2 = \"GatewayInvalidRequestError\";\nvar marker3 = `vercel.ai.gateway.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3, _b3;\nvar GatewayInvalidRequestError = class extends (_b3 = GatewayError, _a3 = symbol3, _b3) {\n  constructor({\n    message = \"Invalid request\",\n    statusCode = 400,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a3] = true;\n    // used in isInstance\n    this.name = name2;\n    this.type = \"invalid_request_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol3 in error;\n  }\n};\n\n// src/errors/gateway-rate-limit-error.ts\nvar name3 = \"GatewayRateLimitError\";\nvar marker4 = `vercel.ai.gateway.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4, _b4;\nvar GatewayRateLimitError = class extends (_b4 = GatewayError, _a4 = symbol4, _b4) {\n  constructor({\n    message = \"Rate limit exceeded\",\n    statusCode = 429,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a4] = true;\n    // used in isInstance\n    this.name = name3;\n    this.type = \"rate_limit_exceeded\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol4 in error;\n  }\n};\n\n// src/errors/gateway-model-not-found-error.ts\n\nvar name4 = \"GatewayModelNotFoundError\";\nvar marker5 = `vercel.ai.gateway.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar modelNotFoundParamSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  modelId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar _a5, _b5;\nvar GatewayModelNotFoundError = class extends (_b5 = GatewayError, _a5 = symbol5, _b5) {\n  constructor({\n    message = \"Model not found\",\n    statusCode = 404,\n    modelId,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a5] = true;\n    // used in isInstance\n    this.name = name4;\n    this.type = \"model_not_found\";\n    this.modelId = modelId;\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol5 in error;\n  }\n};\n\n// src/errors/gateway-internal-server-error.ts\nvar name5 = \"GatewayInternalServerError\";\nvar marker6 = `vercel.ai.gateway.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6, _b6;\nvar GatewayInternalServerError = class extends (_b6 = GatewayError, _a6 = symbol6, _b6) {\n  constructor({\n    message = \"Internal server error\",\n    statusCode = 500,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a6] = true;\n    // used in isInstance\n    this.name = name5;\n    this.type = \"internal_server_error\";\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol6 in error;\n  }\n};\n\n// src/errors/gateway-response-error.ts\nvar name6 = \"GatewayResponseError\";\nvar marker7 = `vercel.ai.gateway.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7, _b7;\nvar GatewayResponseError = class extends (_b7 = GatewayError, _a7 = symbol7, _b7) {\n  constructor({\n    message = \"Invalid response from Gateway\",\n    statusCode = 502,\n    response,\n    validationError,\n    cause\n  } = {}) {\n    super({ message, statusCode, cause });\n    this[_a7] = true;\n    // used in isInstance\n    this.name = name6;\n    this.type = \"response_error\";\n    this.response = response;\n    this.validationError = validationError;\n  }\n  static isInstance(error) {\n    return GatewayError.hasMarker(error) && symbol7 in error;\n  }\n};\n\n// src/errors/create-gateway-error.ts\nfunction createGatewayErrorFromResponse({\n  response,\n  statusCode,\n  defaultMessage = \"Gateway request failed\",\n  cause,\n  authMethod\n}) {\n  const parseResult = gatewayErrorResponseSchema.safeParse(response);\n  if (!parseResult.success) {\n    return new GatewayResponseError({\n      message: `Invalid error response format: ${defaultMessage}`,\n      statusCode,\n      response,\n      validationError: parseResult.error,\n      cause\n    });\n  }\n  const validatedResponse = parseResult.data;\n  const errorType = validatedResponse.error.type;\n  const message = validatedResponse.error.message;\n  switch (errorType) {\n    case \"authentication_error\":\n      return GatewayAuthenticationError.createContextualError({\n        apiKeyProvided: authMethod === \"api-key\",\n        oidcTokenProvided: authMethod === \"oidc\",\n        statusCode,\n        cause\n      });\n    case \"invalid_request_error\":\n      return new GatewayInvalidRequestError({ message, statusCode, cause });\n    case \"rate_limit_exceeded\":\n      return new GatewayRateLimitError({ message, statusCode, cause });\n    case \"model_not_found\": {\n      const modelResult = modelNotFoundParamSchema.safeParse(\n        validatedResponse.error.param\n      );\n      return new GatewayModelNotFoundError({\n        message,\n        statusCode,\n        modelId: modelResult.success ? modelResult.data.modelId : void 0,\n        cause\n      });\n    }\n    case \"internal_server_error\":\n      return new GatewayInternalServerError({ message, statusCode, cause });\n    default:\n      return new GatewayInternalServerError({ message, statusCode, cause });\n  }\n}\nvar gatewayErrorResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).nullish()\n  })\n});\n\n// src/errors/as-gateway-error.ts\nfunction asGatewayError(error, authMethod) {\n  var _a8;\n  if (GatewayError.isInstance(error)) {\n    return error;\n  }\n  if (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n    return createGatewayErrorFromResponse({\n      response: extractApiCallResponse(error),\n      statusCode: (_a8 = error.statusCode) != null ? _a8 : 500,\n      defaultMessage: \"Gateway request failed\",\n      cause: error,\n      authMethod\n    });\n  }\n  return createGatewayErrorFromResponse({\n    response: {},\n    statusCode: 500,\n    defaultMessage: error instanceof Error ? `Gateway request failed: ${error.message}` : \"Unknown Gateway error\",\n    cause: error,\n    authMethod\n  });\n}\n\n// src/errors/extract-api-call-response.ts\nfunction extractApiCallResponse(error) {\n  if (error.data !== void 0) {\n    return error.data;\n  }\n  if (error.responseBody != null) {\n    try {\n      return JSON.parse(error.responseBody);\n    } catch (e) {\n      return error.responseBody;\n    }\n  }\n  return {};\n}\n\n// src/errors/parse-auth-method.ts\n\nvar GATEWAY_AUTH_METHOD_HEADER = \"ai-gateway-auth-method\";\nfunction parseAuthMethod(headers) {\n  const result = gatewayAuthMethodSchema.safeParse(\n    headers[GATEWAY_AUTH_METHOD_HEADER]\n  );\n  return result.success ? result.data : void 0;\n}\nvar gatewayAuthMethodSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"api-key\"),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"oidc\")\n]);\n\n// src/gateway-fetch-metadata.ts\n\n\nvar GatewayFetchMetadata = class {\n  constructor(config) {\n    this.config = config;\n  }\n  async getAvailableModels() {\n    try {\n      const { value } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.getFromApi)({\n        url: `${this.config.baseURL}/config`,\n        headers: await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers()),\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n          gatewayFetchMetadataSchema\n        ),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any(),\n          errorToMessage: (data) => data\n        }),\n        fetch: this.config.fetch\n      });\n      return value;\n    } catch (error) {\n      throw asGatewayError(error);\n    }\n  }\n};\nvar gatewayLanguageModelSpecificationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  specificationVersion: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"v2\"),\n  provider: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  modelId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar gatewayLanguageModelPricingSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  input_cache_read: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  input_cache_write: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n}).transform(({ input, output, input_cache_read, input_cache_write }) => ({\n  input,\n  output,\n  ...input_cache_read ? { cachedInputTokens: input_cache_read } : {},\n  ...input_cache_write ? { cacheCreationInputTokens: input_cache_write } : {}\n}));\nvar gatewayLanguageModelEntrySchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  description: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  pricing: gatewayLanguageModelPricingSchema.nullish(),\n  specification: gatewayLanguageModelSpecificationSchema,\n  modelType: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"language\", \"embedding\", \"image\"]).nullish()\n});\nvar gatewayFetchMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  models: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(gatewayLanguageModelEntrySchema)\n});\n\n// src/gateway-language-model.ts\n\n\nvar GatewayLanguageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = { \"*/*\": [/.*/] };\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs(options) {\n    const { abortSignal: _abortSignal, ...optionsWithoutSignal } = options;\n    return {\n      args: this.maybeEncodeFileParts(optionsWithoutSignal),\n      warnings: []\n    };\n  }\n  async doGenerate(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue: rawResponse\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, false),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: args,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.any()),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        ...responseBody,\n        request: { body: args },\n        response: { headers: responseHeaders, body: rawResponse },\n        warnings\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, true),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: args,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createEventSourceResponseHandler)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.any()),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        stream: response.pipeThrough(\n          new TransformStream({\n            start(controller) {\n              if (warnings.length > 0) {\n                controller.enqueue({ type: \"stream-start\", warnings });\n              }\n            },\n            transform(chunk, controller) {\n              if (chunk.success) {\n                const streamPart = chunk.value;\n                if (streamPart.type === \"raw\" && !options.includeRawChunks) {\n                  return;\n                }\n                if (streamPart.type === \"response-metadata\" && streamPart.timestamp && typeof streamPart.timestamp === \"string\") {\n                  streamPart.timestamp = new Date(streamPart.timestamp);\n                }\n                controller.enqueue(streamPart);\n              } else {\n                controller.error(\n                  chunk.error\n                );\n              }\n            }\n          })\n        ),\n        request: { body: args },\n        response: { headers: responseHeaders }\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  isFilePart(part) {\n    return part && typeof part === \"object\" && \"type\" in part && part.type === \"file\";\n  }\n  /**\n   * Encodes file parts in the prompt to base64. Mutates the passed options\n   * instance directly to avoid copying the file data.\n   * @param options - The options to encode.\n   * @returns The options with the file parts encoded.\n   */\n  maybeEncodeFileParts(options) {\n    for (const message of options.prompt) {\n      for (const part of message.content) {\n        if (this.isFilePart(part)) {\n          const filePart = part;\n          if (filePart.data instanceof Uint8Array) {\n            const buffer = Uint8Array.from(filePart.data);\n            const base64Data = Buffer.from(buffer).toString(\"base64\");\n            filePart.data = new URL(\n              `data:${filePart.mediaType || \"application/octet-stream\"};base64,${base64Data}`\n            );\n          }\n        }\n      }\n    }\n    return options;\n  }\n  getUrl() {\n    return `${this.config.baseURL}/language-model`;\n  }\n  getModelConfigHeaders(modelId, streaming) {\n    return {\n      \"ai-language-model-specification-version\": \"2\",\n      \"ai-language-model-id\": modelId,\n      \"ai-language-model-streaming\": String(streaming)\n    };\n  }\n};\n\n// src/gateway-embedding-model.ts\n\n\nvar GatewayEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a8;\n    const resolvedHeaders = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.postJsonToApi)({\n        url: this.getUrl(),\n        headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.combineHeaders)(\n          resolvedHeaders,\n          headers != null ? headers : {},\n          this.getModelConfigHeaders(),\n          await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.resolve)(this.config.o11yHeaders)\n        ),\n        body: {\n          input: values.length === 1 ? values[0] : values,\n          ...providerOptions ? { providerOptions } : {}\n        },\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonResponseHandler)(\n          gatewayEmbeddingResponseSchema\n        ),\n        failedResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createJsonErrorResponseHandler)({\n          errorSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any(),\n          errorToMessage: (data) => data\n        }),\n        ...abortSignal && { abortSignal },\n        fetch: this.config.fetch\n      });\n      return {\n        embeddings: responseBody.embeddings,\n        usage: (_a8 = responseBody.usage) != null ? _a8 : void 0,\n        providerMetadata: responseBody.providerMetadata,\n        response: { headers: responseHeaders, body: rawValue }\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n  getUrl() {\n    return `${this.config.baseURL}/embedding-model`;\n  }\n  getModelConfigHeaders() {\n    return {\n      \"ai-embedding-model-specification-version\": \"2\",\n      \"ai-model-id\": this.modelId\n    };\n  }\n};\nvar gatewayEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  embeddings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() }).nullish(),\n  providerMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown())).optional()\n});\n\n// src/vercel-environment.ts\nasync function getVercelOidcToken() {\n  var _a8, _b8;\n  const token = (_b8 = (_a8 = getContext().headers) == null ? void 0 : _a8[\"x-vercel-oidc-token\"]) != null ? _b8 : process.env.VERCEL_OIDC_TOKEN;\n  if (!token) {\n    throw new GatewayAuthenticationError({\n      message: \"OIDC token not available\",\n      statusCode: 401\n    });\n  }\n  return token;\n}\nasync function getVercelRequestId() {\n  var _a8;\n  return (_a8 = getContext().headers) == null ? void 0 : _a8[\"x-vercel-id\"];\n}\nvar SYMBOL_FOR_REQ_CONTEXT = Symbol.for(\"@vercel/request-context\");\nfunction getContext() {\n  var _a8, _b8, _c;\n  const fromSymbol = globalThis;\n  return (_c = (_b8 = (_a8 = fromSymbol[SYMBOL_FOR_REQ_CONTEXT]) == null ? void 0 : _a8.get) == null ? void 0 : _b8.call(_a8)) != null ? _c : {};\n}\n\n// src/gateway-provider.ts\nvar AI_GATEWAY_PROTOCOL_VERSION = \"0.0.1\";\nfunction createGatewayProvider(options = {}) {\n  var _a8, _b8;\n  let pendingMetadata = null;\n  let metadataCache = null;\n  const cacheRefreshMillis = (_a8 = options.metadataCacheRefreshMillis) != null ? _a8 : 1e3 * 60 * 5;\n  let lastFetchTime = 0;\n  const baseURL = (_b8 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.withoutTrailingSlash)(options.baseURL)) != null ? _b8 : \"https://ai-gateway.vercel.sh/v1/ai\";\n  const getHeaders = async () => {\n    const auth = await getGatewayAuthToken(options);\n    if (auth) {\n      return {\n        Authorization: `Bearer ${auth.token}`,\n        \"ai-gateway-protocol-version\": AI_GATEWAY_PROTOCOL_VERSION,\n        [GATEWAY_AUTH_METHOD_HEADER]: auth.authMethod,\n        ...options.headers\n      };\n    }\n    throw GatewayAuthenticationError.createContextualError({\n      apiKeyProvided: false,\n      oidcTokenProvided: false,\n      statusCode: 401\n    });\n  };\n  const createO11yHeaders = () => {\n    const deploymentId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_DEPLOYMENT_ID\"\n    });\n    const environment = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_ENV\"\n    });\n    const region = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n      settingValue: void 0,\n      environmentVariableName: \"VERCEL_REGION\"\n    });\n    return async () => {\n      const requestId = await getVercelRequestId();\n      return {\n        ...deploymentId && { \"ai-o11y-deployment-id\": deploymentId },\n        ...environment && { \"ai-o11y-environment\": environment },\n        ...region && { \"ai-o11y-region\": region },\n        ...requestId && { \"ai-o11y-request-id\": requestId }\n      };\n    };\n  };\n  const createLanguageModel = (modelId) => {\n    return new GatewayLanguageModel(modelId, {\n      provider: \"gateway\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders()\n    });\n  };\n  const getAvailableModels = async () => {\n    var _a9, _b9, _c;\n    const now = (_c = (_b9 = (_a9 = options._internal) == null ? void 0 : _a9.currentDate) == null ? void 0 : _b9.call(_a9).getTime()) != null ? _c : Date.now();\n    if (!pendingMetadata || now - lastFetchTime > cacheRefreshMillis) {\n      lastFetchTime = now;\n      pendingMetadata = new GatewayFetchMetadata({\n        baseURL,\n        headers: getHeaders,\n        fetch: options.fetch\n      }).getAvailableModels().then((metadata) => {\n        metadataCache = metadata;\n        return metadata;\n      }).catch(async (error) => {\n        throw asGatewayError(error, parseAuthMethod(await getHeaders()));\n      });\n    }\n    return metadataCache ? Promise.resolve(metadataCache) : pendingMetadata;\n  };\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Gateway Provider model function cannot be called with the new keyword.\"\n      );\n    }\n    return createLanguageModel(modelId);\n  };\n  provider.getAvailableModels = getAvailableModels;\n  provider.imageModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({ modelId, modelType: \"imageModel\" });\n  };\n  provider.languageModel = createLanguageModel;\n  provider.textEmbeddingModel = (modelId) => {\n    return new GatewayEmbeddingModel(modelId, {\n      provider: \"gateway\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders()\n    });\n  };\n  return provider;\n}\nvar gateway = createGatewayProvider();\nasync function getGatewayAuthToken(options) {\n  const apiKey = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.loadOptionalSetting)({\n    settingValue: options.apiKey,\n    environmentVariableName: \"AI_GATEWAY_API_KEY\"\n  });\n  if (apiKey) {\n    return {\n      token: apiKey,\n      authMethod: \"api-key\"\n    };\n  }\n  try {\n    const oidcToken = await getVercelOidcToken();\n    return {\n      token: oidcToken,\n      authMethod: \"oidc\"\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/gateway/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/google/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@ai-sdk/google/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleGenerativeAI: () => (/* binding */ createGoogleGenerativeAI),\n/* harmony export */   google: () => (/* binding */ google)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/zod/v4/classic/schemas.js\");\n// src/google-provider.ts\n\n\n// src/google-generative-ai-embedding-model.ts\n\n\n\n\n// src/google-error.ts\n\n\nvar googleErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullable(),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n});\nvar googleFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: googleErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/google-generative-ai-embedding-options.ts\n\nvar googleGenerativeAIEmbeddingProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Optional. Optional reduced dimension for the output embedding.\n   * If set, excessive values in the output embedding are truncated from the end.\n   */\n  outputDimensionality: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Optional. Specifies the task type for generating embeddings.\n   * Supported task types:\n   * - SEMANTIC_SIMILARITY: Optimized for text similarity.\n   * - CLASSIFICATION: Optimized for text classification.\n   * - CLUSTERING: Optimized for clustering texts based on similarity.\n   * - RETRIEVAL_DOCUMENT: Optimized for document retrieval.\n   * - RETRIEVAL_QUERY: Optimized for query-based retrieval.\n   * - QUESTION_ANSWERING: Optimized for answering questions.\n   * - FACT_VERIFICATION: Optimized for verifying factual information.\n   * - CODE_RETRIEVAL_QUERY: Optimized for retrieving code blocks based on natural language queries.\n   */\n  taskType: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"SEMANTIC_SIMILARITY\",\n    \"CLASSIFICATION\",\n    \"CLUSTERING\",\n    \"RETRIEVAL_DOCUMENT\",\n    \"RETRIEVAL_QUERY\",\n    \"QUESTION_ANSWERING\",\n    \"FACT_VERIFICATION\",\n    \"CODE_RETRIEVAL_QUERY\"\n  ]).optional()\n});\n\n// src/google-generative-ai-embedding-model.ts\nvar GoogleGenerativeAIEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    const googleOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"google\",\n      providerOptions,\n      schema: googleGenerativeAIEmbeddingProviderOptions\n    });\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const mergedHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      headers\n    );\n    if (values.length === 1) {\n      const {\n        responseHeaders: responseHeaders2,\n        value: response2,\n        rawValue: rawValue2\n      } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n        url: `${this.config.baseURL}/models/${this.modelId}:embedContent`,\n        headers: mergedHeaders,\n        body: {\n          model: `models/${this.modelId}`,\n          content: {\n            parts: [{ text: values[0] }]\n          },\n          outputDimensionality: googleOptions == null ? void 0 : googleOptions.outputDimensionality,\n          taskType: googleOptions == null ? void 0 : googleOptions.taskType\n        },\n        failedResponseHandler: googleFailedResponseHandler,\n        successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n          googleGenerativeAISingleEmbeddingResponseSchema\n        ),\n        abortSignal,\n        fetch: this.config.fetch\n      });\n      return {\n        embeddings: [response2.embedding.values],\n        usage: void 0,\n        response: { headers: responseHeaders2, body: rawValue2 }\n      };\n    }\n    const {\n      responseHeaders,\n      value: response,\n      rawValue\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: `${this.config.baseURL}/models/${this.modelId}:batchEmbedContents`,\n      headers: mergedHeaders,\n      body: {\n        requests: values.map((value) => ({\n          model: `models/${this.modelId}`,\n          content: { role: \"user\", parts: [{ text: value }] },\n          outputDimensionality: googleOptions == null ? void 0 : googleOptions.outputDimensionality,\n          taskType: googleOptions == null ? void 0 : googleOptions.taskType\n        }))\n      },\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        googleGenerativeAITextEmbeddingResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      embeddings: response.embeddings.map((item) => item.values),\n      usage: void 0,\n      response: { headers: responseHeaders, body: rawValue }\n    };\n  }\n};\nvar googleGenerativeAITextEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  embeddings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ values: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()) }))\n});\nvar googleGenerativeAISingleEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  embedding: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ values: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()) })\n});\n\n// src/google-generative-ai-language-model.ts\n\n\n\n// src/convert-json-schema-to-openapi-schema.ts\nfunction convertJSONSchemaToOpenAPISchema(jsonSchema) {\n  if (jsonSchema == null || isEmptyObjectSchema(jsonSchema)) {\n    return void 0;\n  }\n  if (typeof jsonSchema === \"boolean\") {\n    return { type: \"boolean\", properties: {} };\n  }\n  const {\n    type,\n    description,\n    required,\n    properties,\n    items,\n    allOf,\n    anyOf,\n    oneOf,\n    format,\n    const: constValue,\n    minLength,\n    enum: enumValues\n  } = jsonSchema;\n  const result = {};\n  if (description)\n    result.description = description;\n  if (required)\n    result.required = required;\n  if (format)\n    result.format = format;\n  if (constValue !== void 0) {\n    result.enum = [constValue];\n  }\n  if (type) {\n    if (Array.isArray(type)) {\n      if (type.includes(\"null\")) {\n        result.type = type.filter((t) => t !== \"null\")[0];\n        result.nullable = true;\n      } else {\n        result.type = type;\n      }\n    } else if (type === \"null\") {\n      result.type = \"null\";\n    } else {\n      result.type = type;\n    }\n  }\n  if (enumValues !== void 0) {\n    result.enum = enumValues;\n  }\n  if (properties != null) {\n    result.properties = Object.entries(properties).reduce(\n      (acc, [key, value]) => {\n        acc[key] = convertJSONSchemaToOpenAPISchema(value);\n        return acc;\n      },\n      {}\n    );\n  }\n  if (items) {\n    result.items = Array.isArray(items) ? items.map(convertJSONSchemaToOpenAPISchema) : convertJSONSchemaToOpenAPISchema(items);\n  }\n  if (allOf) {\n    result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (anyOf) {\n    if (anyOf.some(\n      (schema) => typeof schema === \"object\" && (schema == null ? void 0 : schema.type) === \"null\"\n    )) {\n      const nonNullSchemas = anyOf.filter(\n        (schema) => !(typeof schema === \"object\" && (schema == null ? void 0 : schema.type) === \"null\")\n      );\n      if (nonNullSchemas.length === 1) {\n        const converted = convertJSONSchemaToOpenAPISchema(nonNullSchemas[0]);\n        if (typeof converted === \"object\") {\n          result.nullable = true;\n          Object.assign(result, converted);\n        }\n      } else {\n        result.anyOf = nonNullSchemas.map(convertJSONSchemaToOpenAPISchema);\n        result.nullable = true;\n      }\n    } else {\n      result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);\n    }\n  }\n  if (oneOf) {\n    result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (minLength !== void 0) {\n    result.minLength = minLength;\n  }\n  return result;\n}\nfunction isEmptyObjectSchema(jsonSchema) {\n  return jsonSchema != null && typeof jsonSchema === \"object\" && jsonSchema.type === \"object\" && (jsonSchema.properties == null || Object.keys(jsonSchema.properties).length === 0) && !jsonSchema.additionalProperties;\n}\n\n// src/convert-to-google-generative-ai-messages.ts\n\n\nfunction convertToGoogleGenerativeAIMessages(prompt, options) {\n  var _a;\n  const systemInstructionParts = [];\n  const contents = [];\n  let systemMessagesAllowed = true;\n  const isGemmaModel = (_a = options == null ? void 0 : options.isGemmaModel) != null ? _a : false;\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        if (!systemMessagesAllowed) {\n          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n            functionality: \"system messages are only supported at the beginning of the conversation\"\n          });\n        }\n        systemInstructionParts.push({ text: content });\n        break;\n      }\n      case \"user\": {\n        systemMessagesAllowed = false;\n        const parts = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              parts.push({ text: part.text });\n              break;\n            }\n            case \"file\": {\n              const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n              parts.push(\n                part.data instanceof URL ? {\n                  fileData: {\n                    mimeType: mediaType,\n                    fileUri: part.data.toString()\n                  }\n                } : {\n                  inlineData: {\n                    mimeType: mediaType,\n                    data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                  }\n                }\n              );\n              break;\n            }\n          }\n        }\n        contents.push({ role: \"user\", parts });\n        break;\n      }\n      case \"assistant\": {\n        systemMessagesAllowed = false;\n        contents.push({\n          role: \"model\",\n          parts: content.map((part) => {\n            var _a2, _b, _c, _d, _e, _f;\n            switch (part.type) {\n              case \"text\": {\n                return part.text.length === 0 ? void 0 : {\n                  text: part.text,\n                  thoughtSignature: (_b = (_a2 = part.providerOptions) == null ? void 0 : _a2.google) == null ? void 0 : _b.thoughtSignature\n                };\n              }\n              case \"reasoning\": {\n                return part.text.length === 0 ? void 0 : {\n                  text: part.text,\n                  thought: true,\n                  thoughtSignature: (_d = (_c = part.providerOptions) == null ? void 0 : _c.google) == null ? void 0 : _d.thoughtSignature\n                };\n              }\n              case \"file\": {\n                if (part.mediaType !== \"image/png\") {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: \"Only PNG images are supported in assistant messages\"\n                  });\n                }\n                if (part.data instanceof URL) {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: \"File data URLs in assistant messages are not supported\"\n                  });\n                }\n                return {\n                  inlineData: {\n                    mimeType: part.mediaType,\n                    data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                  }\n                };\n              }\n              case \"tool-call\": {\n                return {\n                  functionCall: {\n                    name: part.toolName,\n                    args: part.input\n                  },\n                  thoughtSignature: (_f = (_e = part.providerOptions) == null ? void 0 : _e.google) == null ? void 0 : _f.thoughtSignature\n                };\n              }\n            }\n          }).filter((part) => part !== void 0)\n        });\n        break;\n      }\n      case \"tool\": {\n        systemMessagesAllowed = false;\n        const parts = [];\n        for (const part of content) {\n          const output = part.output;\n          if (output.type === \"content\") {\n            for (const contentPart of output.value) {\n              switch (contentPart.type) {\n                case \"text\":\n                  parts.push({\n                    functionResponse: {\n                      name: part.toolName,\n                      response: {\n                        name: part.toolName,\n                        content: contentPart.text\n                      }\n                    }\n                  });\n                  break;\n                case \"media\":\n                  parts.push(\n                    {\n                      inlineData: {\n                        mimeType: contentPart.mediaType,\n                        data: contentPart.data\n                      }\n                    },\n                    {\n                      text: \"Tool executed successfully and returned this image as a response\"\n                    }\n                  );\n                  break;\n                default:\n                  parts.push({ text: JSON.stringify(contentPart) });\n                  break;\n              }\n            }\n          } else {\n            parts.push({\n              functionResponse: {\n                name: part.toolName,\n                response: {\n                  name: part.toolName,\n                  content: output.value\n                }\n              }\n            });\n          }\n        }\n        contents.push({\n          role: \"user\",\n          parts\n        });\n        break;\n      }\n    }\n  }\n  if (isGemmaModel && systemInstructionParts.length > 0 && contents.length > 0 && contents[0].role === \"user\") {\n    const systemText = systemInstructionParts.map((part) => part.text).join(\"\\n\\n\");\n    contents[0].parts.unshift({ text: systemText + \"\\n\\n\" });\n  }\n  return {\n    systemInstruction: systemInstructionParts.length > 0 && !isGemmaModel ? { parts: systemInstructionParts } : void 0,\n    contents\n  };\n}\n\n// src/get-model-path.ts\nfunction getModelPath(modelId) {\n  return modelId.includes(\"/\") ? modelId : `models/${modelId}`;\n}\n\n// src/google-generative-ai-options.ts\n\nvar googleGenerativeAIProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  responseModalities: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"TEXT\", \"IMAGE\"])).optional(),\n  thinkingConfig: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    thinkingBudget: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    includeThoughts: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n  }).optional(),\n  /**\n  Optional.\n  The name of the cached content used as context to serve the prediction.\n  Format: cachedContents/{cachedContent}\n     */\n  cachedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Optional. Enable structured output. Default is true.\n   *\n   * This is useful when the JSON Schema contains elements that are\n   * not supported by the OpenAPI schema version that\n   * Google Generative AI uses. You can use this to disable\n   * structured outputs if you need to.\n   */\n  structuredOutputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n  Optional. A list of unique safety settings for blocking unsafe content.\n   */\n  safetySettings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      category: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"HARM_CATEGORY_UNSPECIFIED\",\n        \"HARM_CATEGORY_HATE_SPEECH\",\n        \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        \"HARM_CATEGORY_HARASSMENT\",\n        \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        \"HARM_CATEGORY_CIVIC_INTEGRITY\"\n      ]),\n      threshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n        \"BLOCK_LOW_AND_ABOVE\",\n        \"BLOCK_MEDIUM_AND_ABOVE\",\n        \"BLOCK_ONLY_HIGH\",\n        \"BLOCK_NONE\",\n        \"OFF\"\n      ])\n    })\n  ).optional(),\n  threshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\",\n    \"OFF\"\n  ]).optional(),\n  /**\n   * Optional. Enables timestamp understanding for audio-only files.\n   *\n   * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/audio-understanding\n   */\n  audioTimestamp: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Optional. Defines labels used in billing reports. Available on Vertex AI only.\n   *\n   * https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/add-labels-to-api-calls\n   */\n  labels: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n});\n\n// src/google-prepare-tools.ts\n\nfunction prepareTools({\n  tools,\n  toolChoice,\n  modelId\n}) {\n  var _a;\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  const isGemini2 = modelId.includes(\"gemini-2\");\n  const supportsDynamicRetrieval = modelId.includes(\"gemini-1.5-flash\") && !modelId.includes(\"-8b\");\n  if (tools == null) {\n    return { tools: void 0, toolConfig: void 0, toolWarnings };\n  }\n  const hasFunctionTools = tools.some((tool) => tool.type === \"function\");\n  const hasProviderDefinedTools = tools.some(\n    (tool) => tool.type === \"provider-defined\"\n  );\n  if (hasFunctionTools && hasProviderDefinedTools) {\n    toolWarnings.push({\n      type: \"unsupported-tool\",\n      tool: tools.find((tool) => tool.type === \"function\"),\n      details: \"Cannot mix function tools with provider-defined tools in the same request. Please use either function tools or provider-defined tools, but not both.\"\n    });\n  }\n  if (hasProviderDefinedTools) {\n    const googleTools2 = {};\n    const providerDefinedTools = tools.filter(\n      (tool) => tool.type === \"provider-defined\"\n    );\n    providerDefinedTools.forEach((tool) => {\n      switch (tool.id) {\n        case \"google.google_search\":\n          if (isGemini2) {\n            googleTools2.googleSearch = {};\n          } else if (supportsDynamicRetrieval) {\n            googleTools2.googleSearchRetrieval = {\n              dynamicRetrievalConfig: {\n                mode: tool.args.mode,\n                dynamicThreshold: tool.args.dynamicThreshold\n              }\n            };\n          } else {\n            googleTools2.googleSearchRetrieval = {};\n          }\n          break;\n        case \"google.url_context\":\n          if (isGemini2) {\n            googleTools2.urlContext = {};\n          } else {\n            toolWarnings.push({\n              type: \"unsupported-tool\",\n              tool,\n              details: \"The URL context tool is not supported with other Gemini models than Gemini 2.\"\n            });\n          }\n          break;\n        case \"google.code_execution\":\n          if (isGemini2) {\n            googleTools2.codeExecution = {};\n          } else {\n            toolWarnings.push({\n              type: \"unsupported-tool\",\n              tool,\n              details: \"The code execution tools is not supported with other Gemini models than Gemini 2.\"\n            });\n          }\n          break;\n        default:\n          toolWarnings.push({ type: \"unsupported-tool\", tool });\n          break;\n      }\n    });\n    return {\n      tools: Object.keys(googleTools2).length > 0 ? googleTools2 : void 0,\n      toolConfig: void 0,\n      toolWarnings\n    };\n  }\n  const functionDeclarations = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        functionDeclarations.push({\n          name: tool.name,\n          description: (_a = tool.description) != null ? _a : \"\",\n          parameters: convertJSONSchemaToOpenAPISchema(tool.inputSchema)\n        });\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return {\n      tools: { functionDeclarations },\n      toolConfig: void 0,\n      toolWarnings\n    };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: \"AUTO\" } },\n        toolWarnings\n      };\n    case \"none\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: \"NONE\" } },\n        toolWarnings\n      };\n    case \"required\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: { functionCallingConfig: { mode: \"ANY\" } },\n        toolWarnings\n      };\n    case \"tool\":\n      return {\n        tools: { functionDeclarations },\n        toolConfig: {\n          functionCallingConfig: {\n            mode: \"ANY\",\n            allowedFunctionNames: [toolChoice.toolName]\n          }\n        },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/map-google-generative-ai-finish-reason.ts\nfunction mapGoogleGenerativeAIFinishReason({\n  finishReason,\n  hasToolCalls\n}) {\n  switch (finishReason) {\n    case \"STOP\":\n      return hasToolCalls ? \"tool-calls\" : \"stop\";\n    case \"MAX_TOKENS\":\n      return \"length\";\n    case \"IMAGE_SAFETY\":\n    case \"RECITATION\":\n    case \"SAFETY\":\n    case \"BLOCKLIST\":\n    case \"PROHIBITED_CONTENT\":\n    case \"SPII\":\n      return \"content-filter\";\n    case \"FINISH_REASON_UNSPECIFIED\":\n    case \"OTHER\":\n      return \"other\";\n    case \"MALFORMED_FUNCTION_CALL\":\n      return \"error\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/tool/google-search.ts\n\n\nvar groundingChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  web: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ uri: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n  retrievedContext: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ uri: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish()\n});\nvar groundingMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  webSearchQueries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n  retrievalQueries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n  searchEntryPoint: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ renderedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n  groundingChunks: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(groundingChunkSchema).nullish(),\n  groundingSupports: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      segment: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        startIndex: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        endIndex: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      segment_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      groundingChunkIndices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).nullish(),\n      supportChunkIndices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).nullish(),\n      confidenceScores: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).nullish(),\n      confidenceScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).nullish()\n    })\n  ).nullish(),\n  retrievalMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      webDynamicRetrievalScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({})\n  ]).nullish()\n});\nvar googleSearch = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"google.google_search\",\n  name: \"google_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    mode: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"MODE_DYNAMIC\", \"MODE_UNSPECIFIED\"]).default(\"MODE_UNSPECIFIED\"),\n    dynamicThreshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().default(1)\n  })\n});\n\n// src/tool/url-context.ts\n\n\nvar urlMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  retrievedUrl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  urlRetrievalStatus: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar urlContextMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  urlMetadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(urlMetadataSchema)\n});\nvar urlContext = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"google.url_context\",\n  name: \"url_context\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({})\n});\n\n// src/google-generative-ai-language-model.ts\nvar GoogleGenerativeAILanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    var _a;\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = (_a = config.generateId) != null ? _a : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  get supportedUrls() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).supportedUrls) == null ? void 0 : _b.call(_a)) != null ? _c : {};\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b;\n    const warnings = [];\n    const googleOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"google\",\n      providerOptions,\n      schema: googleGenerativeAIProviderOptions\n    });\n    if (((_a = googleOptions == null ? void 0 : googleOptions.thinkingConfig) == null ? void 0 : _a.includeThoughts) === true && !this.config.provider.startsWith(\"google.vertex.\")) {\n      warnings.push({\n        type: \"other\",\n        message: `The 'includeThoughts' option is only supported with the Google Vertex provider and might not be supported or could behave unexpectedly with the current Google provider (${this.config.provider}).`\n      });\n    }\n    const isGemmaModel = this.modelId.toLowerCase().startsWith(\"gemma-\");\n    const { contents, systemInstruction } = convertToGoogleGenerativeAIMessages(\n      prompt,\n      { isGemmaModel }\n    );\n    const {\n      tools: googleTools2,\n      toolConfig: googleToolConfig,\n      toolWarnings\n    } = prepareTools({\n      tools,\n      toolChoice,\n      modelId: this.modelId\n    });\n    return {\n      args: {\n        generationConfig: {\n          // standardized settings:\n          maxOutputTokens,\n          temperature,\n          topK,\n          topP,\n          frequencyPenalty,\n          presencePenalty,\n          stopSequences,\n          seed,\n          // response format:\n          responseMimeType: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? \"application/json\" : void 0,\n          responseSchema: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && // Google GenAI does not support all OpenAPI Schema features,\n          // so this is needed as an escape hatch:\n          // TODO convert into provider option\n          ((_b = googleOptions == null ? void 0 : googleOptions.structuredOutputs) != null ? _b : true) ? convertJSONSchemaToOpenAPISchema(responseFormat.schema) : void 0,\n          ...(googleOptions == null ? void 0 : googleOptions.audioTimestamp) && {\n            audioTimestamp: googleOptions.audioTimestamp\n          },\n          // provider options:\n          responseModalities: googleOptions == null ? void 0 : googleOptions.responseModalities,\n          thinkingConfig: googleOptions == null ? void 0 : googleOptions.thinkingConfig\n        },\n        contents,\n        systemInstruction: isGemmaModel ? void 0 : systemInstruction,\n        safetySettings: googleOptions == null ? void 0 : googleOptions.safetySettings,\n        tools: googleTools2,\n        toolConfig: googleToolConfig,\n        cachedContent: googleOptions == null ? void 0 : googleOptions.cachedContent,\n        labels: googleOptions == null ? void 0 : googleOptions.labels\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;\n    const { args, warnings } = await this.getArgs(options);\n    const body = JSON.stringify(args);\n    const mergedHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      options.headers\n    );\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId\n      )}:generateContent`,\n      headers: mergedHeaders,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(responseSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const candidate = response.candidates[0];\n    const content = [];\n    const parts = (_b = (_a = candidate.content) == null ? void 0 : _a.parts) != null ? _b : [];\n    const usageMetadata = response.usageMetadata;\n    let lastCodeExecutionToolCallId;\n    for (const part of parts) {\n      if (\"executableCode\" in part && ((_c = part.executableCode) == null ? void 0 : _c.code)) {\n        const toolCallId = this.config.generateId();\n        lastCodeExecutionToolCallId = toolCallId;\n        content.push({\n          type: \"tool-call\",\n          toolCallId,\n          toolName: \"code_execution\",\n          input: JSON.stringify(part.executableCode),\n          providerExecuted: true\n        });\n      } else if (\"codeExecutionResult\" in part && part.codeExecutionResult) {\n        content.push({\n          type: \"tool-result\",\n          // Assumes a result directly follows its corresponding call part.\n          toolCallId: lastCodeExecutionToolCallId,\n          toolName: \"code_execution\",\n          result: {\n            outcome: part.codeExecutionResult.outcome,\n            output: part.codeExecutionResult.output\n          },\n          providerExecuted: true\n        });\n        lastCodeExecutionToolCallId = void 0;\n      } else if (\"text\" in part && part.text != null && part.text.length > 0) {\n        content.push({\n          type: part.thought === true ? \"reasoning\" : \"text\",\n          text: part.text,\n          providerMetadata: part.thoughtSignature ? { google: { thoughtSignature: part.thoughtSignature } } : void 0\n        });\n      } else if (\"functionCall\" in part) {\n        content.push({\n          type: \"tool-call\",\n          toolCallId: this.config.generateId(),\n          toolName: part.functionCall.name,\n          input: JSON.stringify(part.functionCall.args),\n          providerMetadata: part.thoughtSignature ? { google: { thoughtSignature: part.thoughtSignature } } : void 0\n        });\n      } else if (\"inlineData\" in part) {\n        content.push({\n          type: \"file\",\n          data: part.inlineData.data,\n          mediaType: part.inlineData.mimeType\n        });\n      }\n    }\n    const sources = (_d = extractSources({\n      groundingMetadata: candidate.groundingMetadata,\n      generateId: this.config.generateId\n    })) != null ? _d : [];\n    for (const source of sources) {\n      content.push(source);\n    }\n    return {\n      content,\n      finishReason: mapGoogleGenerativeAIFinishReason({\n        finishReason: candidate.finishReason,\n        hasToolCalls: content.some((part) => part.type === \"tool-call\")\n      }),\n      usage: {\n        inputTokens: (_e = usageMetadata == null ? void 0 : usageMetadata.promptTokenCount) != null ? _e : void 0,\n        outputTokens: (_f = usageMetadata == null ? void 0 : usageMetadata.candidatesTokenCount) != null ? _f : void 0,\n        totalTokens: (_g = usageMetadata == null ? void 0 : usageMetadata.totalTokenCount) != null ? _g : void 0,\n        reasoningTokens: (_h = usageMetadata == null ? void 0 : usageMetadata.thoughtsTokenCount) != null ? _h : void 0,\n        cachedInputTokens: (_i = usageMetadata == null ? void 0 : usageMetadata.cachedContentTokenCount) != null ? _i : void 0\n      },\n      warnings,\n      providerMetadata: {\n        google: {\n          groundingMetadata: (_j = candidate.groundingMetadata) != null ? _j : null,\n          urlContextMetadata: (_k = candidate.urlContextMetadata) != null ? _k : null,\n          safetyRatings: (_l = candidate.safetyRatings) != null ? _l : null,\n          usageMetadata: usageMetadata != null ? usageMetadata : null\n        }\n      },\n      request: { body },\n      response: {\n        // TODO timestamp, model id, id\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = JSON.stringify(args);\n    const headers = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      options.headers\n    );\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: `${this.config.baseURL}/${getModelPath(\n        this.modelId\n      )}:streamGenerateContent?alt=sse`,\n      headers,\n      body: args,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(chunkSchema),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let providerMetadata = void 0;\n    const generateId3 = this.config.generateId;\n    let hasToolCalls = false;\n    let currentTextBlockId = null;\n    let currentReasoningBlockId = null;\n    let blockCounter = 0;\n    const emittedSourceUrls = /* @__PURE__ */ new Set();\n    let lastCodeExecutionToolCallId;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            const usageMetadata = value.usageMetadata;\n            if (usageMetadata != null) {\n              usage.inputTokens = (_a = usageMetadata.promptTokenCount) != null ? _a : void 0;\n              usage.outputTokens = (_b = usageMetadata.candidatesTokenCount) != null ? _b : void 0;\n              usage.totalTokens = (_c = usageMetadata.totalTokenCount) != null ? _c : void 0;\n              usage.reasoningTokens = (_d = usageMetadata.thoughtsTokenCount) != null ? _d : void 0;\n              usage.cachedInputTokens = (_e = usageMetadata.cachedContentTokenCount) != null ? _e : void 0;\n            }\n            const candidate = (_f = value.candidates) == null ? void 0 : _f[0];\n            if (candidate == null) {\n              return;\n            }\n            const content = candidate.content;\n            const sources = extractSources({\n              groundingMetadata: candidate.groundingMetadata,\n              generateId: generateId3\n            });\n            if (sources != null) {\n              for (const source of sources) {\n                if (source.sourceType === \"url\" && !emittedSourceUrls.has(source.url)) {\n                  emittedSourceUrls.add(source.url);\n                  controller.enqueue(source);\n                }\n              }\n            }\n            if (content != null) {\n              const parts = (_g = content.parts) != null ? _g : [];\n              for (const part of parts) {\n                if (\"executableCode\" in part && ((_h = part.executableCode) == null ? void 0 : _h.code)) {\n                  const toolCallId = generateId3();\n                  lastCodeExecutionToolCallId = toolCallId;\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId,\n                    toolName: \"code_execution\",\n                    input: JSON.stringify(part.executableCode),\n                    providerExecuted: true\n                  });\n                  hasToolCalls = true;\n                } else if (\"codeExecutionResult\" in part && part.codeExecutionResult) {\n                  const toolCallId = lastCodeExecutionToolCallId;\n                  if (toolCallId) {\n                    controller.enqueue({\n                      type: \"tool-result\",\n                      toolCallId,\n                      toolName: \"code_execution\",\n                      result: {\n                        outcome: part.codeExecutionResult.outcome,\n                        output: part.codeExecutionResult.output\n                      },\n                      providerExecuted: true\n                    });\n                    lastCodeExecutionToolCallId = void 0;\n                  }\n                } else if (\"text\" in part && part.text != null && part.text.length > 0) {\n                  if (part.thought === true) {\n                    if (currentTextBlockId !== null) {\n                      controller.enqueue({\n                        type: \"text-end\",\n                        id: currentTextBlockId\n                      });\n                      currentTextBlockId = null;\n                    }\n                    if (currentReasoningBlockId === null) {\n                      currentReasoningBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: \"reasoning-start\",\n                        id: currentReasoningBlockId,\n                        providerMetadata: part.thoughtSignature ? {\n                          google: {\n                            thoughtSignature: part.thoughtSignature\n                          }\n                        } : void 0\n                      });\n                    }\n                    controller.enqueue({\n                      type: \"reasoning-delta\",\n                      id: currentReasoningBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature ? {\n                        google: { thoughtSignature: part.thoughtSignature }\n                      } : void 0\n                    });\n                  } else {\n                    if (currentReasoningBlockId !== null) {\n                      controller.enqueue({\n                        type: \"reasoning-end\",\n                        id: currentReasoningBlockId\n                      });\n                      currentReasoningBlockId = null;\n                    }\n                    if (currentTextBlockId === null) {\n                      currentTextBlockId = String(blockCounter++);\n                      controller.enqueue({\n                        type: \"text-start\",\n                        id: currentTextBlockId,\n                        providerMetadata: part.thoughtSignature ? {\n                          google: {\n                            thoughtSignature: part.thoughtSignature\n                          }\n                        } : void 0\n                      });\n                    }\n                    controller.enqueue({\n                      type: \"text-delta\",\n                      id: currentTextBlockId,\n                      delta: part.text,\n                      providerMetadata: part.thoughtSignature ? {\n                        google: { thoughtSignature: part.thoughtSignature }\n                      } : void 0\n                    });\n                  }\n                }\n              }\n              const inlineDataParts = getInlineDataParts(content.parts);\n              if (inlineDataParts != null) {\n                for (const part of inlineDataParts) {\n                  controller.enqueue({\n                    type: \"file\",\n                    mediaType: part.inlineData.mimeType,\n                    data: part.inlineData.data\n                  });\n                }\n              }\n              const toolCallDeltas = getToolCallsFromParts({\n                parts: content.parts,\n                generateId: generateId3\n              });\n              if (toolCallDeltas != null) {\n                for (const toolCall of toolCallDeltas) {\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  controller.enqueue({\n                    type: \"tool-input-delta\",\n                    id: toolCall.toolCallId,\n                    delta: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  controller.enqueue({\n                    type: \"tool-input-end\",\n                    id: toolCall.toolCallId,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    input: toolCall.args,\n                    providerMetadata: toolCall.providerMetadata\n                  });\n                  hasToolCalls = true;\n                }\n              }\n            }\n            if (candidate.finishReason != null) {\n              finishReason = mapGoogleGenerativeAIFinishReason({\n                finishReason: candidate.finishReason,\n                hasToolCalls\n              });\n              providerMetadata = {\n                google: {\n                  groundingMetadata: (_i = candidate.groundingMetadata) != null ? _i : null,\n                  urlContextMetadata: (_j = candidate.urlContextMetadata) != null ? _j : null,\n                  safetyRatings: (_k = candidate.safetyRatings) != null ? _k : null\n                }\n              };\n              if (usageMetadata != null) {\n                providerMetadata.google.usageMetadata = usageMetadata;\n              }\n            }\n          },\n          flush(controller) {\n            if (currentTextBlockId !== null) {\n              controller.enqueue({\n                type: \"text-end\",\n                id: currentTextBlockId\n              });\n            }\n            if (currentReasoningBlockId !== null) {\n              controller.enqueue({\n                type: \"reasoning-end\",\n                id: currentReasoningBlockId\n              });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata\n            });\n          }\n        })\n      ),\n      response: { headers: responseHeaders },\n      request: { body }\n    };\n  }\n};\nfunction getToolCallsFromParts({\n  parts,\n  generateId: generateId3\n}) {\n  const functionCallParts = parts == null ? void 0 : parts.filter(\n    (part) => \"functionCall\" in part\n  );\n  return functionCallParts == null || functionCallParts.length === 0 ? void 0 : functionCallParts.map((part) => ({\n    type: \"tool-call\",\n    toolCallId: generateId3(),\n    toolName: part.functionCall.name,\n    args: JSON.stringify(part.functionCall.args),\n    providerMetadata: part.thoughtSignature ? { google: { thoughtSignature: part.thoughtSignature } } : void 0\n  }));\n}\nfunction getInlineDataParts(parts) {\n  return parts == null ? void 0 : parts.filter(\n    (part) => \"inlineData\" in part\n  );\n}\nfunction extractSources({\n  groundingMetadata,\n  generateId: generateId3\n}) {\n  var _a;\n  return (_a = groundingMetadata == null ? void 0 : groundingMetadata.groundingChunks) == null ? void 0 : _a.filter(\n    (chunk) => chunk.web != null\n  ).map((chunk) => ({\n    type: \"source\",\n    sourceType: \"url\",\n    id: generateId3(),\n    url: chunk.web.uri,\n    title: chunk.web.title\n  }));\n}\nvar contentSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  parts: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n      // note: order matters since text can be fully empty\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        functionCall: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          args: zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()\n        }),\n        thoughtSignature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        inlineData: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          mimeType: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        })\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        executableCode: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        }).nullish(),\n        codeExecutionResult: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          outcome: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        }).nullish(),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        thought: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n        thoughtSignature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      })\n    ])\n  ).nullish()\n});\nvar safetyRatingSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  category: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  probability: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  probabilityScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  severity: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  severityScore: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  blocked: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish()\n});\nvar usageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  cachedContentTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  thoughtsTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  promptTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  candidatesTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  totalTokenCount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n});\nvar responseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  candidates: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      content: contentSchema.nullish().or(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({}).strict()),\n      finishReason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      safetyRatings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(safetyRatingSchema).nullish(),\n      groundingMetadata: groundingMetadataSchema.nullish(),\n      urlContextMetadata: urlContextMetadataSchema.nullish()\n    })\n  ),\n  usageMetadata: usageSchema.nullish()\n});\nvar chunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  candidates: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      content: contentSchema.nullish(),\n      finishReason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      safetyRatings: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(safetyRatingSchema).nullish(),\n      groundingMetadata: groundingMetadataSchema.nullish(),\n      urlContextMetadata: urlContextMetadataSchema.nullish()\n    })\n  ).nullish(),\n  usageMetadata: usageSchema.nullish()\n});\n\n// src/tool/code-execution.ts\n\n\nvar codeExecution = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"google.code_execution\",\n  name: \"code_execution\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().describe(\"The programming language of the code.\"),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().describe(\"The code to be executed.\")\n  }),\n  outputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    outcome: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().describe('The outcome of the execution (e.g., \"OUTCOME_OK\").'),\n    output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().describe(\"The output from the code execution.\")\n  })\n});\n\n// src/google-tools.ts\nvar googleTools = {\n  /**\n   * Creates a Google search tool that gives Google direct access to real-time web content.\n   * Must have name \"google_search\".\n   */\n  googleSearch,\n  /**\n   * Creates a URL context tool that gives Google direct access to real-time web content.\n   * Must have name \"url_context\".\n   */\n  urlContext,\n  /**\n   * A tool that enables the model to generate and run Python code.\n   * Must have name \"code_execution\".\n   *\n   * @note Ensure the selected model supports Code Execution.\n   * Multi-tool usage with the code execution tool is typically compatible with Gemini >=2 models.\n   *\n   * @see https://ai.google.dev/gemini-api/docs/code-execution (Google AI)\n   * @see https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-execution-api (Vertex AI)\n   */\n  codeExecution\n};\n\n// src/google-generative-ai-image-model.ts\n\n\nvar GoogleGenerativeAIImageModel = class {\n  constructor(modelId, settings, config) {\n    this.modelId = modelId;\n    this.settings = settings;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get maxImagesPerCall() {\n    var _a;\n    return (_a = this.settings.maxImagesPerCall) != null ? _a : 4;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const {\n      prompt,\n      n = 1,\n      size = \"1024x1024\",\n      aspectRatio = \"1:1\",\n      seed,\n      providerOptions,\n      headers,\n      abortSignal\n    } = options;\n    const warnings = [];\n    if (size != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"size\",\n        details: \"This model does not support the `size` option. Use `aspectRatio` instead.\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"seed\",\n        details: \"This model does not support the `seed` option through this provider.\"\n      });\n    }\n    const googleOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"google\",\n      providerOptions,\n      schema: googleImageProviderOptionsSchema\n    });\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const parameters = {\n      sampleCount: n\n    };\n    if (aspectRatio != null) {\n      parameters.aspectRatio = aspectRatio;\n    }\n    if (googleOptions) {\n      Object.assign(parameters, googleOptions);\n    }\n    const body = {\n      instances: [{ prompt }],\n      parameters\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: `${this.config.baseURL}/models/${this.modelId}:predict`,\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers), headers),\n      body,\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        googleImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: response.predictions.map(\n        (p) => p.bytesBase64Encoded\n      ),\n      warnings: warnings != null ? warnings : [],\n      providerMetadata: {\n        google: {\n          images: response.predictions.map((prediction) => ({\n            // Add any prediction-specific metadata here\n          }))\n        }\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      }\n    };\n  }\n};\nvar googleImageResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  predictions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ bytesBase64Encoded: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })).default([])\n});\nvar googleImageProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  personGeneration: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"dont_allow\", \"allow_adult\", \"allow_all\"]).nullish(),\n  aspectRatio: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"1:1\", \"3:4\", \"4:3\", \"9:16\", \"16:9\"]).nullish()\n});\n\n// src/google-provider.ts\nfunction createGoogleGenerativeAI(options = {}) {\n  var _a;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://generativelanguage.googleapis.com/v1beta\";\n  const getHeaders = () => ({\n    \"x-goog-api-key\": (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"GOOGLE_GENERATIVE_AI_API_KEY\",\n      description: \"Google Generative AI\"\n    }),\n    ...options.headers\n  });\n  const createChatModel = (modelId) => {\n    var _a2;\n    return new GoogleGenerativeAILanguageModel(modelId, {\n      provider: \"google.generative-ai\",\n      baseURL,\n      headers: getHeaders,\n      generateId: (_a2 = options.generateId) != null ? _a2 : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId,\n      supportedUrls: () => ({\n        \"*\": [\n          // Google Generative Language \"files\" endpoint\n          // e.g. https://generativelanguage.googleapis.com/v1beta/files/...\n          new RegExp(`^${baseURL}/files/.*$`),\n          // YouTube URLs (public or unlisted videos)\n          new RegExp(\n            `^https://(?:www\\\\.)?youtube\\\\.com/watch\\\\?v=[\\\\w-]+(?:&[\\\\w=&.-]*)?$`\n          ),\n          new RegExp(`^https://youtu\\\\.be/[\\\\w-]+(?:\\\\?[\\\\w=&.-]*)?$`)\n        ]\n      }),\n      fetch: options.fetch\n    });\n  };\n  const createEmbeddingModel = (modelId) => new GoogleGenerativeAIEmbeddingModel(modelId, {\n    provider: \"google.generative-ai\",\n    baseURL,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createImageModel = (modelId, settings = {}) => new GoogleGenerativeAIImageModel(modelId, settings, {\n    provider: \"google.generative-ai\",\n    baseURL,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Google Generative AI model function cannot be called with the new keyword.\"\n      );\n    }\n    return createChatModel(modelId);\n  };\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.generativeAI = createChatModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.tools = googleTools;\n  return provider;\n}\nvar google = createGoogleGenerativeAI();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/google/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/openai/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@ai-sdk/openai/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOpenAI: () => (/* binding */ createOpenAI),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/zod/v4/classic/coerce.js\");\n// src/openai-provider.ts\n\n\n// src/chat/openai-chat-language-model.ts\n\n\n\n\n// src/openai-error.ts\n\n\nvar openaiErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    // The additional information below is handled loosely to support\n    // OpenAI-compatible providers that have slightly different error\n    // responses:\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).nullish()\n  })\n});\nvar openaiFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: openaiErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/chat/convert-to-openai-chat-messages.ts\n\n\nfunction convertToOpenAIChatMessages({\n  prompt,\n  systemMessageMode = \"system\"\n}) {\n  const messages = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            messages.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            messages.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        if (content.length === 1 && content[0].type === \"text\") {\n          messages.push({ role: \"user\", content: content[0].text });\n          break;\n        }\n        messages.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a, _b, _c;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"image_url\",\n                    image_url: {\n                      url: part.data instanceof URL ? part.data.toString() : `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`,\n                      // OpenAI specific extension: image detail\n                      detail: (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.imageDetail\n                    }\n                  };\n                } else if (part.mediaType.startsWith(\"audio/\")) {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"audio file parts with URLs\"\n                    });\n                  }\n                  switch (part.mediaType) {\n                    case \"audio/wav\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"wav\"\n                        }\n                      };\n                    }\n                    case \"audio/mp3\":\n                    case \"audio/mpeg\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"mp3\"\n                        }\n                      };\n                    }\n                    default: {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `audio content parts with media type ${part.mediaType}`\n                      });\n                    }\n                  }\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"PDF file parts with URLs\"\n                    });\n                  }\n                  return {\n                    type: \"file\",\n                    file: typeof part.data === \"string\" && part.data.startsWith(\"file-\") ? { file_id: part.data } : {\n                      filename: (_c = part.filename) != null ? _c : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        let text = \"\";\n        const toolCalls = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              text += part.text;\n              break;\n            }\n            case \"tool-call\": {\n              toolCalls.push({\n                id: part.toolCallId,\n                type: \"function\",\n                function: {\n                  name: part.toolName,\n                  arguments: JSON.stringify(part.input)\n                }\n              });\n              break;\n            }\n          }\n        }\n        messages.push({\n          role: \"assistant\",\n          content: text,\n          tool_calls: toolCalls.length > 0 ? toolCalls : void 0\n        });\n        break;\n      }\n      case \"tool\": {\n        for (const toolResponse of content) {\n          const output = toolResponse.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          messages.push({\n            role: \"tool\",\n            tool_call_id: toolResponse.toolCallId,\n            content: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { messages, warnings };\n}\n\n// src/chat/get-response-metadata.ts\nfunction getResponseMetadata({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/chat/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/chat/openai-chat-options.ts\n\nvar openaiProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a JSON object that maps tokens (specified by their token ID in\n   * the GPT tokenizer) to an associated bias value from -100 to 100.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_3__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional(),\n  /**\n   * Whether to enable parallel function calling during tool use. Default to true.\n   */\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to\n   * monitor and detect abuse.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Reasoning effort for reasoning models. Defaults to `medium`.\n   */\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"minimal\", \"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * Maximum number of completion tokens to generate. Useful for reasoning models.\n   */\n  maxCompletionTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Whether to enable persistence in responses API.\n   */\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Metadata to associate with the request.\n   */\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(64), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(512)).optional(),\n  /**\n   * Parameters for prediction mode.\n   */\n  prediction: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.any()).optional(),\n  /**\n   * Whether to use structured outputs.\n   *\n   * @default true\n   */\n  structuredOutputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Service tier for the request.\n   * - 'auto': Default service tier\n   * - 'flex': 50% cheaper processing at the cost of increased latency. Only available for o3 and o4-mini models.\n   * - 'priority': Higher-speed processing with predictably low latency at premium cost. Available for Enterprise customers.\n   *\n   * @default 'auto'\n   */\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\"]).optional(),\n  /**\n   * Whether to use strict JSON schema validation.\n   *\n   * @default false\n   */\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Controls the verbosity of the model's responses.\n   * Lower values will result in more concise responses, while higher values will result in more verbose responses.\n   */\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * A cache key for prompt caching. Allows manual control over prompt caching behavior.\n   * Useful for improving cache hit rates and working around automatic caching issues.\n   */\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * A stable identifier used to help detect users of your application\n   * that may be violating OpenAI's usage policies. The IDs should be a\n   * string that uniquely identifies each user. We recommend hashing their\n   * username or email address, in order to avoid sending us any identifying\n   * information.\n   */\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/chat/openai-chat-prepare-tools.ts\n\n\n// src/tool/file-search.ts\n\n\nvar comparisonFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"eq\", \"ne\", \"gt\", \"gte\", \"lt\", \"lte\"]),\n  value: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean()])\n});\nvar compoundFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"and\", \"or\"]),\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, zod_v4__WEBPACK_IMPORTED_MODULE_0__.lazy(() => compoundFilterSchema)])\n  )\n});\nvar filtersSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, compoundFilterSchema]);\nvar fileSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  vectorStoreIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  maxNumResults: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  ranking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    ranker: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"default-2024-08-21\"]).optional()\n  }).optional(),\n  filters: filtersSchema.optional()\n});\nvar fileSearch = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.file_search\",\n  name: \"file_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n});\n\n// src/tool/web-search-preview.ts\n\n\nvar webSearchPreviewArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Search context size to use for the web search.\n   * - high: Most comprehensive context, highest cost, slower response\n   * - medium: Balanced context, cost, and latency (default)\n   * - low: Least context, lowest cost, fastest response\n   */\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * User location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Type of location (always 'approximate')\n     */\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    /**\n     * Two-letter ISO country code (e.g., 'US', 'GB')\n     */\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * City name (free text, e.g., 'Minneapolis')\n     */\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * Region name (free text, e.g., 'Minnesota')\n     */\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * IANA timezone (e.g., 'America/Chicago')\n     */\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearchPreview = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search_preview\",\n  name: \"web_search_preview\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      })\n    ]).nullish()\n  })\n});\n\n// src/chat/openai-chat-prepare-tools.ts\nfunction prepareChatTools({\n  tools,\n  toolChoice,\n  structuredOutputs,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: tool.inputSchema,\n            strict: structuredOutputs ? strictJsonSchema : void 0\n          }\n        });\n        break;\n      case \"provider-defined\":\n        switch (tool.id) {\n          case \"openai.file_search\": {\n            const args = fileSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"file_search\",\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking ? { ranker: args.ranking.ranker } : void 0,\n              filters: args.filters\n            });\n            break;\n          }\n          case \"openai.web_search_preview\": {\n            const args = webSearchPreviewArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search_preview\",\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: {\n          type: \"function\",\n          function: {\n            name: toolChoice.toolName\n          }\n        },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/chat/openai-chat-language-model.ts\nvar OpenAIChatLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiProviderOptions\n    })) != null ? _a : {};\n    const structuredOutputs = (_b = openaiOptions.structuredOutputs) != null ? _b : true;\n    if (topK != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"topK\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && !structuredOutputs) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format schema is only supported with structuredOutputs\"\n      });\n    }\n    const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages(\n      {\n        prompt,\n        systemMessageMode: getSystemMessageMode(this.modelId)\n      }\n    );\n    warnings.push(...messageWarnings);\n    const strictJsonSchema = (_c = openaiOptions.strictJsonSchema) != null ? _c : false;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // model specific settings:\n      logit_bias: openaiOptions.logitBias,\n      logprobs: openaiOptions.logprobs === true || typeof openaiOptions.logprobs === \"number\" ? true : void 0,\n      top_logprobs: typeof openaiOptions.logprobs === \"number\" ? openaiOptions.logprobs : typeof openaiOptions.logprobs === \"boolean\" ? openaiOptions.logprobs ? 0 : void 0 : void 0,\n      user: openaiOptions.user,\n      parallel_tool_calls: openaiOptions.parallelToolCalls,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      presence_penalty: presencePenalty,\n      response_format: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? structuredOutputs && responseFormat.schema != null ? {\n        type: \"json_schema\",\n        json_schema: {\n          schema: responseFormat.schema,\n          strict: strictJsonSchema,\n          name: (_d = responseFormat.name) != null ? _d : \"response\",\n          description: responseFormat.description\n        }\n      } : { type: \"json_object\" } : void 0,\n      stop: stopSequences,\n      seed,\n      verbosity: openaiOptions.textVerbosity,\n      // openai specific settings:\n      // TODO AI SDK 6: remove, we auto-map maxOutputTokens now\n      max_completion_tokens: openaiOptions.maxCompletionTokens,\n      store: openaiOptions.store,\n      metadata: openaiOptions.metadata,\n      prediction: openaiOptions.prediction,\n      reasoning_effort: openaiOptions.reasoningEffort,\n      service_tier: openaiOptions.serviceTier,\n      prompt_cache_key: openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions.safetyIdentifier,\n      // messages:\n      messages\n    };\n    if (isReasoningModel(this.modelId)) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.frequency_penalty != null) {\n        baseArgs.frequency_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"frequencyPenalty\",\n          details: \"frequencyPenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.presence_penalty != null) {\n        baseArgs.presence_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"presencePenalty\",\n          details: \"presencePenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logit_bias != null) {\n        baseArgs.logit_bias = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logitBias is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logprobs != null) {\n        baseArgs.logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_logprobs != null) {\n        baseArgs.top_logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"topLogprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.max_tokens != null) {\n        if (baseArgs.max_completion_tokens == null) {\n          baseArgs.max_completion_tokens = baseArgs.max_tokens;\n        }\n        baseArgs.max_tokens = void 0;\n      }\n    } else if (this.modelId.startsWith(\"gpt-4o-search-preview\") || this.modelId.startsWith(\"gpt-4o-mini-search-preview\")) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for the search preview models and has been removed.\"\n        });\n      }\n    }\n    if (openaiOptions.serviceTier === \"flex\" && !supportsFlexProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    if (openaiOptions.serviceTier === \"priority\" && !supportsPriorityProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareChatTools({\n      tools,\n      toolChoice,\n      structuredOutputs,\n      strictJsonSchema\n    });\n    return {\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n    const { args: body, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiChatResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const content = [];\n    const text = choice.message.content;\n    if (text != null && text.length > 0) {\n      content.push({ type: \"text\", text });\n    }\n    for (const toolCall of (_a = choice.message.tool_calls) != null ? _a : []) {\n      content.push({\n        type: \"tool-call\",\n        toolCallId: (_b = toolCall.id) != null ? _b : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        toolName: toolCall.function.name,\n        input: toolCall.function.arguments\n      });\n    }\n    for (const annotation of (_c = choice.message.annotations) != null ? _c : []) {\n      content.push({\n        type: \"source\",\n        sourceType: \"url\",\n        id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        url: annotation.url,\n        title: annotation.title\n      });\n    }\n    const completionTokenDetails = (_d = response.usage) == null ? void 0 : _d.completion_tokens_details;\n    const promptTokenDetails = (_e = response.usage) == null ? void 0 : _e.prompt_tokens_details;\n    const providerMetadata = { openai: {} };\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) {\n      providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;\n    }\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) {\n      providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;\n    }\n    if (((_f = choice.logprobs) == null ? void 0 : _f.content) != null) {\n      providerMetadata.openai.logprobs = choice.logprobs.content;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIFinishReason(choice.finish_reason),\n      usage: {\n        inputTokens: (_h = (_g = response.usage) == null ? void 0 : _g.prompt_tokens) != null ? _h : void 0,\n        outputTokens: (_j = (_i = response.usage) == null ? void 0 : _i.completion_tokens) != null ? _j : void 0,\n        totalTokens: (_l = (_k = response.usage) == null ? void 0 : _k.total_tokens) != null ? _l : void 0,\n        reasoningTokens: (_m = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null ? _m : void 0,\n        cachedInputTokens: (_n = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null ? _n : void 0\n      },\n      request: { body },\n      response: {\n        ...getResponseMetadata(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiChatChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const toolCalls = [];\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    let isActiveText = false;\n    const providerMetadata = { openai: {} };\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata(value)\n              });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = (_a = value.usage.prompt_tokens) != null ? _a : void 0;\n              usage.outputTokens = (_b = value.usage.completion_tokens) != null ? _b : void 0;\n              usage.totalTokens = (_c = value.usage.total_tokens) != null ? _c : void 0;\n              usage.reasoningTokens = (_e = (_d = value.usage.completion_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : void 0;\n              usage.cachedInputTokens = (_g = (_f = value.usage.prompt_tokens_details) == null ? void 0 : _f.cached_tokens) != null ? _g : void 0;\n              if (((_h = value.usage.completion_tokens_details) == null ? void 0 : _h.accepted_prediction_tokens) != null) {\n                providerMetadata.openai.acceptedPredictionTokens = (_i = value.usage.completion_tokens_details) == null ? void 0 : _i.accepted_prediction_tokens;\n              }\n              if (((_j = value.usage.completion_tokens_details) == null ? void 0 : _j.rejected_prediction_tokens) != null) {\n                providerMetadata.openai.rejectedPredictionTokens = (_k = value.usage.completion_tokens_details) == null ? void 0 : _k.rejected_prediction_tokens;\n              }\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason(choice.finish_reason);\n            }\n            if (((_l = choice == null ? void 0 : choice.logprobs) == null ? void 0 : _l.content) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs.content;\n            }\n            if ((choice == null ? void 0 : choice.delta) == null) {\n              return;\n            }\n            const delta = choice.delta;\n            if (delta.content != null) {\n              if (!isActiveText) {\n                controller.enqueue({ type: \"text-start\", id: \"0\" });\n                isActiveText = true;\n              }\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: delta.content\n              });\n            }\n            if (delta.tool_calls != null) {\n              for (const toolCallDelta of delta.tool_calls) {\n                const index = toolCallDelta.index;\n                if (toolCalls[index] == null) {\n                  if (toolCallDelta.type !== \"function\") {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function' type.`\n                    });\n                  }\n                  if (toolCallDelta.id == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'id' to be a string.`\n                    });\n                  }\n                  if (((_m = toolCallDelta.function) == null ? void 0 : _m.name) == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function.name' to be a string.`\n                    });\n                  }\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCallDelta.id,\n                    toolName: toolCallDelta.function.name\n                  });\n                  toolCalls[index] = {\n                    id: toolCallDelta.id,\n                    type: \"function\",\n                    function: {\n                      name: toolCallDelta.function.name,\n                      arguments: (_n = toolCallDelta.function.arguments) != null ? _n : \"\"\n                    },\n                    hasFinished: false\n                  };\n                  const toolCall2 = toolCalls[index];\n                  if (((_o = toolCall2.function) == null ? void 0 : _o.name) != null && ((_p = toolCall2.function) == null ? void 0 : _p.arguments) != null) {\n                    if (toolCall2.function.arguments.length > 0) {\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: toolCall2.id,\n                        delta: toolCall2.function.arguments\n                      });\n                    }\n                    if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall2.function.arguments)) {\n                      controller.enqueue({\n                        type: \"tool-input-end\",\n                        id: toolCall2.id\n                      });\n                      controller.enqueue({\n                        type: \"tool-call\",\n                        toolCallId: (_q = toolCall2.id) != null ? _q : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                        toolName: toolCall2.function.name,\n                        input: toolCall2.function.arguments\n                      });\n                      toolCall2.hasFinished = true;\n                    }\n                  }\n                  continue;\n                }\n                const toolCall = toolCalls[index];\n                if (toolCall.hasFinished) {\n                  continue;\n                }\n                if (((_r = toolCallDelta.function) == null ? void 0 : _r.arguments) != null) {\n                  toolCall.function.arguments += (_t = (_s = toolCallDelta.function) == null ? void 0 : _s.arguments) != null ? _t : \"\";\n                }\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.id,\n                  delta: (_u = toolCallDelta.function.arguments) != null ? _u : \"\"\n                });\n                if (((_v = toolCall.function) == null ? void 0 : _v.name) != null && ((_w = toolCall.function) == null ? void 0 : _w.arguments) != null && (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall.function.arguments)) {\n                  controller.enqueue({\n                    type: \"tool-input-end\",\n                    id: toolCall.id\n                  });\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: (_x = toolCall.id) != null ? _x : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                    toolName: toolCall.function.name,\n                    input: toolCall.function.arguments\n                  });\n                  toolCall.hasFinished = true;\n                }\n              }\n            }\n            if (delta.annotations != null) {\n              for (const annotation of delta.annotations) {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              }\n            }\n          },\n          flush(controller) {\n            if (isActiveText) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              ...providerMetadata != null ? { providerMetadata } : {}\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar openaiTokenUsageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  prompt_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  }).nullish(),\n  completion_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    accepted_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    rejected_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  }).nullish()\n}).nullish();\nvar openaiChatResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\").nullish(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\"),\n            function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n            })\n          })\n        ).nullish(),\n        annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n            start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ).nullish()\n      }),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n              })\n            )\n          })\n        ).nullish()\n      }).nullish(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    })\n  ),\n  usage: openaiTokenUsageSchema\n});\nvar openaiChatChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          role: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"assistant\"]).nullish(),\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n          tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\").nullish(),\n              function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n              })\n            })\n          ).nullish(),\n          annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n              start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n            })\n          ).nullish()\n        }).nullish(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                  token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                  logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n                })\n              )\n            })\n          ).nullish()\n        }).nullish(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      })\n    ),\n    usage: openaiTokenUsageSchema\n  }),\n  openaiErrorDataSchema\n]);\nfunction isReasoningModel(modelId) {\n  return (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\")) && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsFlexProcessing(modelId) {\n  return modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsPriorityProcessing(modelId) {\n  return modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n}\nfunction getSystemMessageMode(modelId) {\n  var _a, _b;\n  if (!isReasoningModel(modelId)) {\n    return \"system\";\n  }\n  return (_b = (_a = reasoningModels[modelId]) == null ? void 0 : _a.systemMessageMode) != null ? _b : \"developer\";\n}\nvar reasoningModels = {\n  \"o1-mini\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-mini-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  o3: {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini-2025-01-31\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  }\n};\n\n// src/completion/openai-completion-language-model.ts\n\n\n\n// src/completion/convert-to-openai-completion-prompt.ts\n\nfunction convertToOpenAICompletionPrompt({\n  prompt,\n  user = \"user\",\n  assistant = \"assistant\"\n}) {\n  let text = \"\";\n  if (prompt[0].role === \"system\") {\n    text += `${prompt[0].content}\n\n`;\n    prompt = prompt.slice(1);\n  }\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidPromptError({\n          message: \"Unexpected system message in prompt: ${content}\",\n          prompt\n        });\n      }\n      case \"user\": {\n        const userMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n          }\n        }).filter(Boolean).join(\"\");\n        text += `${user}:\n${userMessage}\n\n`;\n        break;\n      }\n      case \"assistant\": {\n        const assistantMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n            case \"tool-call\": {\n              throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                functionality: \"tool-call messages\"\n              });\n            }\n          }\n        }).join(\"\");\n        text += `${assistant}:\n${assistantMessage}\n\n`;\n        break;\n      }\n      case \"tool\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"tool messages\"\n        });\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  text += `${assistant}:\n`;\n  return {\n    prompt: text,\n    stopSequences: [`\n${user}:`]\n  };\n}\n\n// src/completion/get-response-metadata.ts\nfunction getResponseMetadata2({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/completion/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason2(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/completion/openai-completion-options.ts\n\nvar openaiCompletionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n  Echo back the prompt in addition to the completion.\n     */\n  echo: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n  Modify the likelihood of specified tokens appearing in the completion.\n  \n  Accepts a JSON object that maps tokens (specified by their token ID in\n  the GPT tokenizer) to an associated bias value from -100 to 100. You\n  can use this tokenizer tool to convert text to token IDs. Mathematically,\n  the bias is added to the logits generated by the model prior to sampling.\n  The exact effect will vary per model, but values between -1 and 1 should\n  decrease or increase likelihood of selection; values like -100 or 100\n  should result in a ban or exclusive selection of the relevant token.\n  \n  As an example, you can pass {\"50256\": -100} to prevent the <|endoftext|>\n  token from being generated.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n  /**\n  The suffix that comes after a completion of inserted text.\n   */\n  suffix: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n  Return the log probabilities of the tokens. Including logprobs will increase\n  the response size and can slow down response times. However, it can\n  be useful to better understand how the model is behaving.\n  Setting to true will return the log probabilities of the tokens that\n  were generated.\n  Setting to a number will return the log probabilities of the top n\n  tokens that were generated.\n     */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional()\n});\n\n// src/completion/openai-completion-language-model.ts\nvar OpenAICompletionLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      // No URLs are supported for completion models.\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get providerOptionsName() {\n    return this.config.provider.split(\".\")[0].trim();\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences: userStopSequences,\n    responseFormat,\n    tools,\n    toolChoice,\n    seed,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openaiOptions = {\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: \"openai\",\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      }),\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: this.providerOptionsName,\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      })\n    };\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (tools == null ? void 0 : tools.length) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"tools\" });\n    }\n    if (toolChoice != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"toolChoice\" });\n    }\n    if (responseFormat != null && responseFormat.type !== \"text\") {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format is not supported.\"\n      });\n    }\n    const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({ prompt });\n    const stop = [...stopSequences != null ? stopSequences : [], ...userStopSequences != null ? userStopSequences : []];\n    return {\n      args: {\n        // model id:\n        model: this.modelId,\n        // model specific settings:\n        echo: openaiOptions.echo,\n        logit_bias: openaiOptions.logitBias,\n        logprobs: (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? 0 : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === false ? void 0 : openaiOptions == null ? void 0 : openaiOptions.logprobs,\n        suffix: openaiOptions.suffix,\n        user: openaiOptions.user,\n        // standardized settings:\n        max_tokens: maxOutputTokens,\n        temperature,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n        seed,\n        // prompt:\n        prompt: completionPrompt,\n        // stop sequences:\n        stop: stop.length > 0 ? stop : void 0\n      },\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const { args, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: args,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiCompletionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const providerMetadata = { openai: {} };\n    if (choice.logprobs != null) {\n      providerMetadata.openai.logprobs = choice.logprobs;\n    }\n    return {\n      content: [{ type: \"text\", text: choice.text }],\n      usage: {\n        inputTokens: (_a = response.usage) == null ? void 0 : _a.prompt_tokens,\n        outputTokens: (_b = response.usage) == null ? void 0 : _b.completion_tokens,\n        totalTokens: (_c = response.usage) == null ? void 0 : _c.total_tokens\n      },\n      finishReason: mapOpenAIFinishReason2(choice.finish_reason),\n      request: { body: args },\n      response: {\n        ...getResponseMetadata2(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiCompletionChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const providerMetadata = { openai: {} };\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata2(value)\n              });\n              controller.enqueue({ type: \"text-start\", id: \"0\" });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens;\n              usage.outputTokens = value.usage.completion_tokens;\n              usage.totalTokens = value.usage.total_tokens;\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason2(choice.finish_reason);\n            }\n            if ((choice == null ? void 0 : choice.logprobs) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs;\n            }\n            if ((choice == null ? void 0 : choice.text) != null && choice.text.length > 0) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: choice.text\n              });\n            }\n          },\n          flush(controller) {\n            if (!isFirstChunk) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              providerMetadata,\n              usage\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar openaiCompletionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n        token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n        top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n      }).nullish()\n    })\n  ),\n  usage: usageSchema.nullish()\n});\nvar openaiCompletionChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n          token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n          top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n        }).nullish()\n      })\n    ),\n    usage: usageSchema.nullish()\n  }),\n  openaiErrorDataSchema\n]);\n\n// src/embedding/openai-embedding-model.ts\n\n\n\n\n// src/embedding/openai-embedding-options.ts\n\nvar openaiEmbeddingProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n  The number of dimensions the resulting output embeddings should have.\n  Only supported in text-embedding-3 and later models.\n     */\n  dimensions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n  */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/embedding/openai-embedding-model.ts\nvar OpenAIEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a;\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiEmbeddingProviderOptions\n    })) != null ? _a : {};\n    const {\n      responseHeaders,\n      value: response,\n      rawValue\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/embeddings\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        input: values,\n        encoding_format: \"float\",\n        dimensions: openaiOptions.dimensions,\n        user: openaiOptions.user\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTextEmbeddingResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      embeddings: response.data.map((item) => item.embedding),\n      usage: response.usage ? { tokens: response.usage.prompt_tokens } : void 0,\n      response: { headers: responseHeaders, body: rawValue }\n    };\n  }\n};\nvar openaiTextEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ embedding: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()) })),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() }).nullish()\n});\n\n// src/image/openai-image-model.ts\n\n\n\n// src/image/openai-image-options.ts\nvar modelMaxImagesPerCall = {\n  \"dall-e-3\": 1,\n  \"dall-e-2\": 10,\n  \"gpt-image-1\": 10\n};\nvar hasDefaultResponseFormat = /* @__PURE__ */ new Set([\"gpt-image-1\"]);\n\n// src/image/openai-image-model.ts\nvar OpenAIImageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get maxImagesPerCall() {\n    var _a;\n    return (_a = modelMaxImagesPerCall[this.modelId]) != null ? _a : 1;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doGenerate({\n    prompt,\n    n,\n    size,\n    aspectRatio,\n    seed,\n    providerOptions,\n    headers,\n    abortSignal\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    if (aspectRatio != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"aspectRatio\",\n        details: \"This model does not support aspect ratio. Use `size` instead.\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/images/generations\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        prompt,\n        n,\n        size,\n        ...(_d = providerOptions.openai) != null ? _d : {},\n        ...!hasDefaultResponseFormat.has(this.modelId) ? { response_format: \"b64_json\" } : {}\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: response.data.map((item) => item.b64_json),\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      },\n      providerMetadata: {\n        openai: {\n          images: response.data.map(\n            (item) => item.revised_prompt ? {\n              revisedPrompt: item.revised_prompt\n            } : null\n          )\n        }\n      }\n    };\n  }\n};\nvar openaiImageResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ b64_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), revised_prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional() })\n  )\n});\n\n// src/tool/code-interpreter.ts\n\n\nvar codeInterpreterArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  container: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      fileIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n    })\n  ]).optional()\n});\nvar codeInterpreterToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.code_interpreter\",\n  name: \"code_interpreter\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({})\n});\nvar codeInterpreter = (args = {}) => {\n  return codeInterpreterToolFactory(args);\n};\n\n// src/tool/web-search.ts\n\n\nvar webSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n  }).optional(),\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearchToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      })\n    ]).nullish()\n  })\n});\nvar webSearch = (args = {}) => {\n  return webSearchToolFactory(args);\n};\n\n// src/openai-tools.ts\nvar openaiTools = {\n  /**\n   * The Code Interpreter tool allows models to write and run Python code in a\n   * sandboxed environment to solve complex problems in domains like data analysis,\n   * coding, and math.\n   *\n   * @param container - The container to use for the code interpreter.\n   *\n   * Must have name `code_interpreter`.\n   */\n  codeInterpreter,\n  /**\n   * File search is a tool available in the Responses API. It enables models to\n   * retrieve information in a knowledge base of previously uploaded files through\n   * semantic and keyword search.\n   *\n   * Must have name `file_search`.\n   *\n   * @param vectorStoreIds - The vector store IDs to use for the file search.\n   * @param maxNumResults - The maximum number of results to return.\n   * @param ranking - The ranking options to use for the file search.\n   * @param filters - The filters to use for the file search.\n   */\n  fileSearch,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search_preview`.\n   *\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   *\n   * @deprecated Use `webSearch` instead.\n   */\n  webSearchPreview,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search`.\n   *\n   * @param filters - The filters to use for the web search.\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   */\n  webSearch\n};\n\n// src/responses/openai-responses-language-model.ts\n\n\n\n\n// src/responses/convert-to-openai-responses-messages.ts\n\n\n\n\nfunction isFileId(data, prefixes) {\n  if (!prefixes) return false;\n  return prefixes.some((prefix) => data.startsWith(prefix));\n}\nasync function convertToOpenAIResponsesMessages({\n  prompt,\n  systemMessageMode,\n  fileIdPrefixes\n}) {\n  var _a, _b, _c, _d, _e, _f;\n  const messages = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            messages.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            messages.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        messages.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a2, _b2, _c2;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"input_text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"input_image\",\n                    ...part.data instanceof URL ? { image_url: part.data.toString() } : typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      image_url: `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    },\n                    detail: (_b2 = (_a2 = part.providerOptions) == null ? void 0 : _a2.openai) == null ? void 0 : _b2.imageDetail\n                  };\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    return {\n                      type: \"input_file\",\n                      file_url: part.data.toString()\n                    };\n                  }\n                  return {\n                    type: \"input_file\",\n                    ...typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      filename: (_c2 = part.filename) != null ? _c2 : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        const reasoningMessages = {};\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              messages.push({\n                role: \"assistant\",\n                content: [{ type: \"output_text\", text: part.text }],\n                id: (_c = (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.itemId) != null ? _c : void 0\n              });\n              break;\n            }\n            case \"tool-call\": {\n              if (part.providerExecuted) {\n                break;\n              }\n              messages.push({\n                type: \"function_call\",\n                call_id: part.toolCallId,\n                name: part.toolName,\n                arguments: JSON.stringify(part.input),\n                id: (_f = (_e = (_d = part.providerOptions) == null ? void 0 : _d.openai) == null ? void 0 : _e.itemId) != null ? _f : void 0\n              });\n              break;\n            }\n            case \"tool-result\": {\n              warnings.push({\n                type: \"other\",\n                message: `tool result parts in assistant messages are not supported for OpenAI responses`\n              });\n              break;\n            }\n            case \"reasoning\": {\n              const providerOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                provider: \"openai\",\n                providerOptions: part.providerOptions,\n                schema: openaiResponsesReasoningProviderOptionsSchema\n              });\n              const reasoningId = providerOptions == null ? void 0 : providerOptions.itemId;\n              if (reasoningId != null) {\n                const existingReasoningMessage = reasoningMessages[reasoningId];\n                const summaryParts = [];\n                if (part.text.length > 0) {\n                  summaryParts.push({ type: \"summary_text\", text: part.text });\n                } else if (existingReasoningMessage !== void 0) {\n                  warnings.push({\n                    type: \"other\",\n                    message: `Cannot append empty reasoning part to existing reasoning sequence. Skipping reasoning part: ${JSON.stringify(part)}.`\n                  });\n                }\n                if (existingReasoningMessage === void 0) {\n                  reasoningMessages[reasoningId] = {\n                    type: \"reasoning\",\n                    id: reasoningId,\n                    encrypted_content: providerOptions == null ? void 0 : providerOptions.reasoningEncryptedContent,\n                    summary: summaryParts\n                  };\n                  messages.push(reasoningMessages[reasoningId]);\n                } else {\n                  existingReasoningMessage.summary.push(...summaryParts);\n                }\n              } else {\n                warnings.push({\n                  type: \"other\",\n                  message: `Non-OpenAI reasoning parts are not supported. Skipping reasoning part: ${JSON.stringify(part)}.`\n                });\n              }\n              break;\n            }\n          }\n        }\n        break;\n      }\n      case \"tool\": {\n        for (const part of content) {\n          const output = part.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          messages.push({\n            type: \"function_call_output\",\n            call_id: part.toolCallId,\n            output: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { messages, warnings };\n}\nvar openaiResponsesReasoningProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  itemId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningEncryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n});\n\n// src/responses/map-openai-responses-finish-reason.ts\nfunction mapOpenAIResponseFinishReason({\n  finishReason,\n  hasFunctionCall\n}) {\n  switch (finishReason) {\n    case void 0:\n    case null:\n      return hasFunctionCall ? \"tool-calls\" : \"stop\";\n    case \"max_output_tokens\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    default:\n      return hasFunctionCall ? \"tool-calls\" : \"unknown\";\n  }\n}\n\n// src/responses/openai-responses-prepare-tools.ts\n\nfunction prepareResponsesTools({\n  tools,\n  toolChoice,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema,\n          strict: strictJsonSchema\n        });\n        break;\n      case \"provider-defined\": {\n        switch (tool.id) {\n          case \"openai.file_search\": {\n            const args = fileSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"file_search\",\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking ? { ranker: args.ranking.ranker } : void 0,\n              filters: args.filters\n            });\n            break;\n          }\n          case \"openai.web_search_preview\": {\n            const args = webSearchPreviewArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search_preview\",\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.web_search\": {\n            const args = webSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search\",\n              filters: args.filters != null ? { allowed_domains: args.filters.allowedDomains } : void 0,\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.code_interpreter\": {\n            const args = codeInterpreterArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"code_interpreter\",\n              container: args.container == null ? { type: \"auto\", file_ids: void 0 } : typeof args.container === \"string\" ? args.container : { type: \"auto\", file_ids: args.container.fileIds }\n            });\n            break;\n          }\n          default: {\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n          }\n        }\n        break;\n      }\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: toolChoice.toolName === \"code_interpreter\" || toolChoice.toolName === \"file_search\" || toolChoice.toolName === \"web_search_preview\" || toolChoice.toolName === \"web_search\" ? { type: toolChoice.toolName } : { type: \"function\", name: toolChoice.toolName },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/responses/openai-responses-language-model.ts\nvar webSearchCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n      query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ]).nullish()\n});\nvar TOP_LOGPROBS_MAX = 20;\nvar LOGPROBS_SCHEMA = zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      })\n    )\n  })\n);\nvar OpenAIResponsesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/],\n      \"application/pdf\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    maxOutputTokens,\n    temperature,\n    stopSequences,\n    topP,\n    topK,\n    presencePenalty,\n    frequencyPenalty,\n    seed,\n    prompt,\n    providerOptions,\n    tools,\n    toolChoice,\n    responseFormat\n  }) {\n    var _a, _b, _c;\n    const warnings = [];\n    const modelConfig = getResponsesModelConfig(this.modelId);\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (stopSequences != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"stopSequences\" });\n    }\n    const { messages, warnings: messageWarnings } = await convertToOpenAIResponsesMessages({\n      prompt,\n      systemMessageMode: modelConfig.systemMessageMode,\n      fileIdPrefixes: this.config.fileIdPrefixes\n    });\n    warnings.push(...messageWarnings);\n    const openaiOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiResponsesProviderOptionsSchema\n    });\n    const strictJsonSchema = (_a = openaiOptions == null ? void 0 : openaiOptions.strictJsonSchema) != null ? _a : false;\n    let include = openaiOptions == null ? void 0 : openaiOptions.include;\n    const topLogprobs = typeof (openaiOptions == null ? void 0 : openaiOptions.logprobs) === \"number\" ? openaiOptions == null ? void 0 : openaiOptions.logprobs : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? TOP_LOGPROBS_MAX : void 0;\n    include = topLogprobs ? Array.isArray(include) ? [...include, \"message.output_text.logprobs\"] : [\"message.output_text.logprobs\"] : include;\n    const webSearchToolName = (_b = tools == null ? void 0 : tools.find(\n      (tool) => tool.type === \"provider-defined\" && (tool.id === \"openai.web_search\" || tool.id === \"openai.web_search_preview\")\n    )) == null ? void 0 : _b.name;\n    include = webSearchToolName ? Array.isArray(include) ? [...include, \"web_search_call.action.sources\"] : [\"web_search_call.action.sources\"] : include;\n    const baseArgs = {\n      model: this.modelId,\n      input: messages,\n      temperature,\n      top_p: topP,\n      max_output_tokens: maxOutputTokens,\n      ...((responseFormat == null ? void 0 : responseFormat.type) === \"json\" || (openaiOptions == null ? void 0 : openaiOptions.textVerbosity)) && {\n        text: {\n          ...(responseFormat == null ? void 0 : responseFormat.type) === \"json\" && {\n            format: responseFormat.schema != null ? {\n              type: \"json_schema\",\n              strict: strictJsonSchema,\n              name: (_c = responseFormat.name) != null ? _c : \"response\",\n              description: responseFormat.description,\n              schema: responseFormat.schema\n            } : { type: \"json_object\" }\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.textVerbosity) && {\n            verbosity: openaiOptions.textVerbosity\n          }\n        }\n      },\n      // provider options:\n      metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,\n      parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,\n      previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,\n      store: openaiOptions == null ? void 0 : openaiOptions.store,\n      user: openaiOptions == null ? void 0 : openaiOptions.user,\n      instructions: openaiOptions == null ? void 0 : openaiOptions.instructions,\n      service_tier: openaiOptions == null ? void 0 : openaiOptions.serviceTier,\n      include,\n      prompt_cache_key: openaiOptions == null ? void 0 : openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions == null ? void 0 : openaiOptions.safetyIdentifier,\n      top_logprobs: topLogprobs,\n      // model-specific settings:\n      ...modelConfig.isReasoningModel && ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null || (openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) && {\n        reasoning: {\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && {\n            effort: openaiOptions.reasoningEffort\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null && {\n            summary: openaiOptions.reasoningSummary\n          }\n        }\n      },\n      ...modelConfig.requiredAutoTruncation && {\n        truncation: \"auto\"\n      }\n    };\n    if (modelConfig.isReasoningModel) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n    } else {\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningEffort\",\n          details: \"reasoningEffort is not supported for non-reasoning models\"\n        });\n      }\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningSummary\",\n          details: \"reasoningSummary is not supported for non-reasoning models\"\n        });\n      }\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"flex\" && !modelConfig.supportsFlexProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      delete baseArgs.service_tier;\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"priority\" && !modelConfig.supportsPriorityProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      delete baseArgs.service_tier;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareResponsesTools({\n      tools,\n      toolChoice,\n      strictJsonSchema\n    });\n    return {\n      webSearchToolName,\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const url = this.config.url({\n      path: \"/responses\",\n      modelId: this.modelId\n    });\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url,\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }).nullish(),\n          model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n                role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"output_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                    logprobs: LOGPROBS_SCHEMA.nullish(),\n                    annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                      zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                          url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                          title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n                          file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                          filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                          index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"container_file_citation\")\n                        })\n                      ])\n                    )\n                  })\n                )\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_interpreter_call\")\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n                call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              }),\n              webSearchCallItem,\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n                queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n                results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                      score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                    })\n                  })\n                ).nullish()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                summary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"summary_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                  })\n                )\n              })\n            ])\n          ),\n          service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n          incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullable(),\n          usage: usageSchema2\n        })\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    if (response.error) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.APICallError({\n        message: response.error.message,\n        url,\n        requestBodyValues: body,\n        statusCode: 400,\n        responseHeaders,\n        responseBody: rawResponse,\n        isRetryable: false\n      });\n    }\n    const content = [];\n    const logprobs = [];\n    let hasFunctionCall = false;\n    for (const part of response.output) {\n      switch (part.type) {\n        case \"reasoning\": {\n          if (part.summary.length === 0) {\n            part.summary.push({ type: \"summary_text\", text: \"\" });\n          }\n          for (const summary of part.summary) {\n            content.push({\n              type: \"reasoning\",\n              text: summary.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id,\n                  reasoningEncryptedContent: (_a = part.encrypted_content) != null ? _a : null\n                }\n              }\n            });\n          }\n          break;\n        }\n        case \"message\": {\n          for (const contentPart of part.content) {\n            if (((_c = (_b = options.providerOptions) == null ? void 0 : _b.openai) == null ? void 0 : _c.logprobs) && contentPart.logprobs) {\n              logprobs.push(contentPart.logprobs);\n            }\n            content.push({\n              type: \"text\",\n              text: contentPart.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id\n                }\n              }\n            });\n            for (const annotation of contentPart.annotations) {\n              if (annotation.type === \"url_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_f = (_e = (_d = this.config).generateId) == null ? void 0 : _e.call(_d)) != null ? _f : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              } else if (annotation.type === \"file_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_i = (_h = (_g = this.config).generateId) == null ? void 0 : _h.call(_g)) != null ? _i : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_k = (_j = annotation.quote) != null ? _j : annotation.filename) != null ? _k : \"Document\",\n                  filename: (_l = annotation.filename) != null ? _l : annotation.file_id\n                });\n              }\n            }\n          }\n          break;\n        }\n        case \"function_call\": {\n          hasFunctionCall = true;\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.call_id,\n            toolName: part.name,\n            input: part.arguments,\n            providerMetadata: {\n              openai: {\n                itemId: part.id\n              }\n            }\n          });\n          break;\n        }\n        case \"web_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            input: JSON.stringify({ action: part.action }),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            result: { status: part.status },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"computer_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            input: \"\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            result: {\n              type: \"computer_use_tool_result\",\n              status: part.status || \"completed\"\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"file_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            input: \"\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            result: {\n              type: \"file_search_tool_result\",\n              status: part.status || \"completed\",\n              ...part.queries && { queries: part.queries },\n              ...part.results && { results: part.results }\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n      }\n    }\n    const providerMetadata = {\n      openai: { responseId: response.id }\n    };\n    if (logprobs.length > 0) {\n      providerMetadata.openai.logprobs = logprobs;\n    }\n    if (typeof response.service_tier === \"string\") {\n      providerMetadata.openai.serviceTier = response.service_tier;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIResponseFinishReason({\n        finishReason: (_m = response.incomplete_details) == null ? void 0 : _m.reason,\n        hasFunctionCall\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        reasoningTokens: (_o = (_n = response.usage.output_tokens_details) == null ? void 0 : _n.reasoning_tokens) != null ? _o : void 0,\n        cachedInputTokens: (_q = (_p = response.usage.input_tokens_details) == null ? void 0 : _p.cached_tokens) != null ? _q : void 0\n      },\n      request: { body },\n      response: {\n        id: response.id,\n        timestamp: new Date(response.created_at * 1e3),\n        modelId: response.model,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/responses\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: {\n        ...body,\n        stream: true\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiResponsesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const self = this;\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const logprobs = [];\n    let responseId = null;\n    const ongoingToolCalls = {};\n    let hasFunctionCall = false;\n    const activeReasoning = {};\n    let serviceTier;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (isResponseOutputItemAddedChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: value.item.name,\n                  toolCallId: value.item.call_id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.call_id,\n                  toolName: value.item.name\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\"\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"computer_use\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"computer_use\"\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"file_search\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"file_search\"\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-start\",\n                  id: value.item.id,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (isResponseOutputItemAddedReasoningChunk(value)) {\n                activeReasoning[value.item.id] = {\n                  encryptedContent: value.item.encrypted_content,\n                  summaryParts: [0]\n                };\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item.id}:0`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id,\n                      reasoningEncryptedContent: (_a = value.item.encrypted_content) != null ? _a : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseOutputItemDoneChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                hasFunctionCall = true;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.call_id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.call_id,\n                  toolName: value.item.name,\n                  input: value.item.arguments,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  input: JSON.stringify({ action: value.item.action }),\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  result: { status: value.item.status },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  input: \"\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  result: {\n                    type: \"computer_use_tool_result\",\n                    status: value.item.status || \"completed\"\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  input: \"\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  result: {\n                    type: \"file_search_tool_result\",\n                    status: value.item.status || \"completed\",\n                    ...value.item.queries && { queries: value.item.queries },\n                    ...value.item.results && { results: value.item.results }\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-end\",\n                  id: value.item.id\n                });\n              } else if (isResponseOutputItemDoneReasoningChunk(value)) {\n                const activeReasoningPart = activeReasoning[value.item.id];\n                for (const summaryIndex of activeReasoningPart.summaryParts) {\n                  controller.enqueue({\n                    type: \"reasoning-end\",\n                    id: `${value.item.id}:${summaryIndex}`,\n                    providerMetadata: {\n                      openai: {\n                        itemId: value.item.id,\n                        reasoningEncryptedContent: (_b = value.item.encrypted_content) != null ? _b : null\n                      }\n                    }\n                  });\n                }\n                delete activeReasoning[value.item.id];\n              }\n            } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.toolCallId,\n                  delta: value.delta\n                });\n              }\n            } else if (isResponseCreatedChunk(value)) {\n              responseId = value.response.id;\n              controller.enqueue({\n                type: \"response-metadata\",\n                id: value.response.id,\n                timestamp: new Date(value.response.created_at * 1e3),\n                modelId: value.response.model\n              });\n            } else if (isTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: value.item_id,\n                delta: value.delta\n              });\n              if (((_d = (_c = options.providerOptions) == null ? void 0 : _c.openai) == null ? void 0 : _d.logprobs) && value.logprobs) {\n                logprobs.push(value.logprobs);\n              }\n            } else if (isResponseReasoningSummaryPartAddedChunk(value)) {\n              if (value.summary_index > 0) {\n                (_e = activeReasoning[value.item_id]) == null ? void 0 : _e.summaryParts.push(\n                  value.summary_index\n                );\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item_id}:${value.summary_index}`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item_id,\n                      reasoningEncryptedContent: (_g = (_f = activeReasoning[value.item_id]) == null ? void 0 : _f.encryptedContent) != null ? _g : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseReasoningSummaryTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"reasoning-delta\",\n                id: `${value.item_id}:${value.summary_index}`,\n                delta: value.delta,\n                providerMetadata: {\n                  openai: {\n                    itemId: value.item_id\n                  }\n                }\n              });\n            } else if (isResponseFinishedChunk(value)) {\n              finishReason = mapOpenAIResponseFinishReason({\n                finishReason: (_h = value.response.incomplete_details) == null ? void 0 : _h.reason,\n                hasFunctionCall\n              });\n              usage.inputTokens = value.response.usage.input_tokens;\n              usage.outputTokens = value.response.usage.output_tokens;\n              usage.totalTokens = value.response.usage.input_tokens + value.response.usage.output_tokens;\n              usage.reasoningTokens = (_j = (_i = value.response.usage.output_tokens_details) == null ? void 0 : _i.reasoning_tokens) != null ? _j : void 0;\n              usage.cachedInputTokens = (_l = (_k = value.response.usage.input_tokens_details) == null ? void 0 : _k.cached_tokens) != null ? _l : void 0;\n              if (typeof value.response.service_tier === \"string\") {\n                serviceTier = value.response.service_tier;\n              }\n            } else if (isResponseAnnotationAddedChunk(value)) {\n              if (value.annotation.type === \"url_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_o = (_n = (_m = self.config).generateId) == null ? void 0 : _n.call(_m)) != null ? _o : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: value.annotation.url,\n                  title: value.annotation.title\n                });\n              } else if (value.annotation.type === \"file_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_r = (_q = (_p = self.config).generateId) == null ? void 0 : _q.call(_p)) != null ? _r : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_t = (_s = value.annotation.quote) != null ? _s : value.annotation.filename) != null ? _t : \"Document\",\n                  filename: (_u = value.annotation.filename) != null ? _u : value.annotation.file_id\n                });\n              }\n            } else if (isErrorChunk(value)) {\n              controller.enqueue({ type: \"error\", error: value });\n            }\n          },\n          flush(controller) {\n            const providerMetadata = {\n              openai: {\n                responseId\n              }\n            };\n            if (logprobs.length > 0) {\n              providerMetadata.openai.logprobs = logprobs;\n            }\n            if (serviceTier !== void 0) {\n              providerMetadata.openai.serviceTier = serviceTier;\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema2 = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  input_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish(),\n  output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  output_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish()\n});\nvar textDeltaChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  logprobs: LOGPROBS_SCHEMA.nullish()\n});\nvar errorChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  sequence_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar responseFinishedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"response.completed\", \"response.incomplete\"]),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n    usage: usageSchema2,\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n  })\n});\nvar responseCreatedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.created\"),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n  })\n});\nvar responseOutputItemAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.added\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n      }).nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n      results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        })\n      ).optional()\n    })\n  ])\n});\nvar responseOutputItemDoneSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.done\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n    }),\n    webSearchCallItem,\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\"),\n      queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n      results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        })\n      ).nullish()\n    })\n  ])\n});\nvar responseFunctionCallArgumentsDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.function_call_arguments.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar responseAnnotationAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.annotation.added\"),\n  annotation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    })\n  ])\n});\nvar responseReasoningSummaryPartAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_part.added\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar responseReasoningSummaryTextDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar openaiResponsesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  textDeltaChunkSchema,\n  responseFinishedChunkSchema,\n  responseCreatedChunkSchema,\n  responseOutputItemAddedSchema,\n  responseOutputItemDoneSchema,\n  responseFunctionCallArgumentsDeltaSchema,\n  responseAnnotationAddedSchema,\n  responseReasoningSummaryPartAddedSchema,\n  responseReasoningSummaryTextDeltaSchema,\n  errorChunkSchema,\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).loose()\n  // fallback for unknown chunks\n]);\nfunction isTextDeltaChunk(chunk) {\n  return chunk.type === \"response.output_text.delta\";\n}\nfunction isResponseOutputItemDoneChunk(chunk) {\n  return chunk.type === \"response.output_item.done\";\n}\nfunction isResponseOutputItemDoneReasoningChunk(chunk) {\n  return isResponseOutputItemDoneChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseFinishedChunk(chunk) {\n  return chunk.type === \"response.completed\" || chunk.type === \"response.incomplete\";\n}\nfunction isResponseCreatedChunk(chunk) {\n  return chunk.type === \"response.created\";\n}\nfunction isResponseFunctionCallArgumentsDeltaChunk(chunk) {\n  return chunk.type === \"response.function_call_arguments.delta\";\n}\nfunction isResponseOutputItemAddedChunk(chunk) {\n  return chunk.type === \"response.output_item.added\";\n}\nfunction isResponseOutputItemAddedReasoningChunk(chunk) {\n  return isResponseOutputItemAddedChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseAnnotationAddedChunk(chunk) {\n  return chunk.type === \"response.output_text.annotation.added\";\n}\nfunction isResponseReasoningSummaryPartAddedChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_part.added\";\n}\nfunction isResponseReasoningSummaryTextDeltaChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_text.delta\";\n}\nfunction isErrorChunk(chunk) {\n  return chunk.type === \"error\";\n}\nfunction getResponsesModelConfig(modelId) {\n  const supportsFlexProcessing2 = modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n  const supportsPriorityProcessing2 = modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n  const defaults = {\n    requiredAutoTruncation: false,\n    systemMessageMode: \"system\",\n    supportsFlexProcessing: supportsFlexProcessing2,\n    supportsPriorityProcessing: supportsPriorityProcessing2\n  };\n  if (modelId.startsWith(\"gpt-5-chat\")) {\n    return {\n      ...defaults,\n      isReasoningModel: false\n    };\n  }\n  if (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\") || modelId.startsWith(\"codex-\") || modelId.startsWith(\"computer-use\")) {\n    if (modelId.startsWith(\"o1-mini\") || modelId.startsWith(\"o1-preview\")) {\n      return {\n        ...defaults,\n        isReasoningModel: true,\n        systemMessageMode: \"remove\"\n      };\n    }\n    return {\n      ...defaults,\n      isReasoningModel: true,\n      systemMessageMode: \"developer\"\n    };\n  }\n  return {\n    ...defaults,\n    isReasoningModel: false\n  };\n}\nvar openaiResponsesProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  previousResponseId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningSummary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\"]).nullish(),\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"reasoning.encrypted_content\",\n      \"file_search_call.results\",\n      \"message.output_text.logprobs\"\n    ])\n  ).nullish(),\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).nullish(),\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   *\n   * @see https://platform.openai.com/docs/api-reference/responses/create\n   * @see https://cookbook.openai.com/examples/using_logprobs\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(TOP_LOGPROBS_MAX)]).optional()\n});\n\n// src/speech/openai-speech-model.ts\n\n\nvar OpenAIProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  speed: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0.25).max(4).default(1).nullish()\n});\nvar OpenAISpeechModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    text,\n    voice = \"alloy\",\n    outputFormat = \"mp3\",\n    speed,\n    instructions,\n    language,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: OpenAIProviderOptionsSchema\n    });\n    const requestBody = {\n      model: this.modelId,\n      input: text,\n      voice,\n      response_format: \"mp3\",\n      speed,\n      instructions\n    };\n    if (outputFormat) {\n      if ([\"mp3\", \"opus\", \"aac\", \"flac\", \"wav\", \"pcm\"].includes(outputFormat)) {\n        requestBody.response_format = outputFormat;\n      } else {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"outputFormat\",\n          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`\n        });\n      }\n    }\n    if (openAIOptions) {\n      const speechModelOptions = {};\n      for (const key in speechModelOptions) {\n        const value = speechModelOptions[key];\n        if (value !== void 0) {\n          requestBody[key] = value;\n        }\n      }\n    }\n    if (language) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"language\",\n        details: `OpenAI speech models do not support language selection. Language parameter \"${language}\" was ignored.`\n      });\n    }\n    return {\n      requestBody,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { requestBody, warnings } = await this.getArgs(options);\n    const {\n      value: audio,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/audio/speech\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: requestBody,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createBinaryResponseHandler)(),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      audio,\n      warnings,\n      request: {\n        body: JSON.stringify(requestBody)\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\n\n// src/transcription/openai-transcription-model.ts\n\n\n\n// src/transcription/openai-transcription-options.ts\n\nvar openAITranscriptionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Additional information to include in the transcription response.\n   */\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * The language of the input audio in ISO-639-1 format.\n   */\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * An optional text to guide the model's style or continue a previous audio segment.\n   */\n  prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * The sampling temperature, between 0 and 1.\n   * @default 0\n   */\n  temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1).default(0).optional(),\n  /**\n   * The timestamp granularities to populate for this transcription.\n   * @default ['segment']\n   */\n  timestampGranularities: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"word\", \"segment\"])).default([\"segment\"]).optional()\n});\n\n// src/transcription/openai-transcription-model.ts\nvar languageMap = {\n  afrikaans: \"af\",\n  arabic: \"ar\",\n  armenian: \"hy\",\n  azerbaijani: \"az\",\n  belarusian: \"be\",\n  bosnian: \"bs\",\n  bulgarian: \"bg\",\n  catalan: \"ca\",\n  chinese: \"zh\",\n  croatian: \"hr\",\n  czech: \"cs\",\n  danish: \"da\",\n  dutch: \"nl\",\n  english: \"en\",\n  estonian: \"et\",\n  finnish: \"fi\",\n  french: \"fr\",\n  galician: \"gl\",\n  german: \"de\",\n  greek: \"el\",\n  hebrew: \"he\",\n  hindi: \"hi\",\n  hungarian: \"hu\",\n  icelandic: \"is\",\n  indonesian: \"id\",\n  italian: \"it\",\n  japanese: \"ja\",\n  kannada: \"kn\",\n  kazakh: \"kk\",\n  korean: \"ko\",\n  latvian: \"lv\",\n  lithuanian: \"lt\",\n  macedonian: \"mk\",\n  malay: \"ms\",\n  marathi: \"mr\",\n  maori: \"mi\",\n  nepali: \"ne\",\n  norwegian: \"no\",\n  persian: \"fa\",\n  polish: \"pl\",\n  portuguese: \"pt\",\n  romanian: \"ro\",\n  russian: \"ru\",\n  serbian: \"sr\",\n  slovak: \"sk\",\n  slovenian: \"sl\",\n  spanish: \"es\",\n  swahili: \"sw\",\n  swedish: \"sv\",\n  tagalog: \"tl\",\n  tamil: \"ta\",\n  thai: \"th\",\n  turkish: \"tr\",\n  ukrainian: \"uk\",\n  urdu: \"ur\",\n  vietnamese: \"vi\",\n  welsh: \"cy\"\n};\nvar OpenAITranscriptionModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    audio,\n    mediaType,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openAITranscriptionProviderOptions\n    });\n    const formData = new FormData();\n    const blob = audio instanceof Uint8Array ? new Blob([audio]) : new Blob([(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertBase64ToUint8Array)(audio)]);\n    formData.append(\"model\", this.modelId);\n    const fileExtension = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.mediaTypeToExtension)(mediaType);\n    formData.append(\n      \"file\",\n      new File([blob], \"audio\", { type: mediaType }),\n      `audio.${fileExtension}`\n    );\n    if (openAIOptions) {\n      const transcriptionModelOptions = {\n        include: openAIOptions.include,\n        language: openAIOptions.language,\n        prompt: openAIOptions.prompt,\n        // https://platform.openai.com/docs/api-reference/audio/createTranscription#audio_createtranscription-response_format\n        // prefer verbose_json to get segments for models that support it\n        response_format: [\n          \"gpt-4o-transcribe\",\n          \"gpt-4o-mini-transcribe\"\n        ].includes(this.modelId) ? \"json\" : \"verbose_json\",\n        temperature: openAIOptions.temperature,\n        timestamp_granularities: openAIOptions.timestampGranularities\n      };\n      for (const [key, value] of Object.entries(transcriptionModelOptions)) {\n        if (value != null) {\n          if (Array.isArray(value)) {\n            for (const item of value) {\n              formData.append(`${key}[]`, String(item));\n            }\n          } else {\n            formData.append(key, String(value));\n          }\n        }\n      }\n    }\n    return {\n      formData,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { formData, warnings } = await this.getArgs(options);\n    const {\n      value: response,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postFormDataToApi)({\n      url: this.config.url({\n        path: \"/audio/transcriptions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      formData,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTranscriptionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const language = response.language != null && response.language in languageMap ? languageMap[response.language] : void 0;\n    return {\n      text: response.text,\n      segments: (_g = (_f = (_d = response.segments) == null ? void 0 : _d.map((segment) => ({\n        text: segment.text,\n        startSecond: segment.start,\n        endSecond: segment.end\n      }))) != null ? _f : (_e = response.words) == null ? void 0 : _e.map((word) => ({\n        text: word.word,\n        startSecond: word.start,\n        endSecond: word.end\n      }))) != null ? _g : [],\n      language,\n      durationInSeconds: (_h = response.duration) != null ? _h : void 0,\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\nvar openaiTranscriptionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  words: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      word: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    })\n  ).nullish(),\n  segments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      seek: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n      temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      avg_logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      compression_ratio: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      no_speech_prob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    })\n  ).nullish()\n});\n\n// src/openai-provider.ts\nfunction createOpenAI(options = {}) {\n  var _a, _b;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.openai.com/v1\";\n  const providerName = (_b = options.name) != null ? _b : \"openai\";\n  const getHeaders = () => ({\n    Authorization: `Bearer ${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"OPENAI_API_KEY\",\n      description: \"OpenAI\"\n    })}`,\n    \"OpenAI-Organization\": options.organization,\n    \"OpenAI-Project\": options.project,\n    ...options.headers\n  });\n  const createChatModel = (modelId) => new OpenAIChatLanguageModel(modelId, {\n    provider: `${providerName}.chat`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createCompletionModel = (modelId) => new OpenAICompletionLanguageModel(modelId, {\n    provider: `${providerName}.completion`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createEmbeddingModel = (modelId) => new OpenAIEmbeddingModel(modelId, {\n    provider: `${providerName}.embedding`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createImageModel = (modelId) => new OpenAIImageModel(modelId, {\n    provider: `${providerName}.image`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createTranscriptionModel = (modelId) => new OpenAITranscriptionModel(modelId, {\n    provider: `${providerName}.transcription`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createSpeechModel = (modelId) => new OpenAISpeechModel(modelId, {\n    provider: `${providerName}.speech`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createLanguageModel = (modelId) => {\n    if (new.target) {\n      throw new Error(\n        \"The OpenAI model function cannot be called with the new keyword.\"\n      );\n    }\n    return createResponsesModel(modelId);\n  };\n  const createResponsesModel = (modelId) => {\n    return new OpenAIResponsesLanguageModel(modelId, {\n      provider: `${providerName}.responses`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      fileIdPrefixes: [\"file-\"]\n    });\n  };\n  const provider = function(modelId) {\n    return createLanguageModel(modelId);\n  };\n  provider.languageModel = createLanguageModel;\n  provider.chat = createChatModel;\n  provider.completion = createCompletionModel;\n  provider.responses = createResponsesModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.transcription = createTranscriptionModel;\n  provider.transcriptionModel = createTranscriptionModel;\n  provider.speech = createSpeechModel;\n  provider.speechModel = createSpeechModel;\n  provider.tools = openaiTools;\n  return provider;\n}\nvar openai = createOpenAI();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/openai/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@ai-sdk/provider-utils/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventSourceParserStream: () => (/* reexport safe */ eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_1__.EventSourceParserStream),\n/* harmony export */   asSchema: () => (/* binding */ asSchema),\n/* harmony export */   asValidator: () => (/* binding */ asValidator),\n/* harmony export */   combineHeaders: () => (/* binding */ combineHeaders),\n/* harmony export */   convertAsyncIteratorToReadableStream: () => (/* binding */ convertAsyncIteratorToReadableStream),\n/* harmony export */   convertBase64ToUint8Array: () => (/* binding */ convertBase64ToUint8Array),\n/* harmony export */   convertToBase64: () => (/* binding */ convertToBase64),\n/* harmony export */   convertUint8ArrayToBase64: () => (/* binding */ convertUint8ArrayToBase64),\n/* harmony export */   createBinaryResponseHandler: () => (/* binding */ createBinaryResponseHandler),\n/* harmony export */   createEventSourceResponseHandler: () => (/* binding */ createEventSourceResponseHandler),\n/* harmony export */   createIdGenerator: () => (/* binding */ createIdGenerator),\n/* harmony export */   createJsonErrorResponseHandler: () => (/* binding */ createJsonErrorResponseHandler),\n/* harmony export */   createJsonResponseHandler: () => (/* binding */ createJsonResponseHandler),\n/* harmony export */   createJsonStreamResponseHandler: () => (/* binding */ createJsonStreamResponseHandler),\n/* harmony export */   createProviderDefinedToolFactory: () => (/* binding */ createProviderDefinedToolFactory),\n/* harmony export */   createProviderDefinedToolFactoryWithOutputSchema: () => (/* binding */ createProviderDefinedToolFactoryWithOutputSchema),\n/* harmony export */   createStatusCodeErrorResponseHandler: () => (/* binding */ createStatusCodeErrorResponseHandler),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   dynamicTool: () => (/* binding */ dynamicTool),\n/* harmony export */   executeTool: () => (/* binding */ executeTool),\n/* harmony export */   extractResponseHeaders: () => (/* binding */ extractResponseHeaders),\n/* harmony export */   generateId: () => (/* binding */ generateId),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   getFromApi: () => (/* binding */ getFromApi),\n/* harmony export */   injectJsonInstructionIntoMessages: () => (/* binding */ injectJsonInstructionIntoMessages),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isParsableJson: () => (/* binding */ isParsableJson),\n/* harmony export */   isUrlSupported: () => (/* binding */ isUrlSupported),\n/* harmony export */   isValidator: () => (/* binding */ isValidator),\n/* harmony export */   jsonSchema: () => (/* binding */ jsonSchema),\n/* harmony export */   loadApiKey: () => (/* binding */ loadApiKey),\n/* harmony export */   loadOptionalSetting: () => (/* binding */ loadOptionalSetting),\n/* harmony export */   loadSetting: () => (/* binding */ loadSetting),\n/* harmony export */   mediaTypeToExtension: () => (/* binding */ mediaTypeToExtension),\n/* harmony export */   parseJSON: () => (/* binding */ parseJSON),\n/* harmony export */   parseJsonEventStream: () => (/* binding */ parseJsonEventStream),\n/* harmony export */   parseProviderOptions: () => (/* binding */ parseProviderOptions),\n/* harmony export */   postFormDataToApi: () => (/* binding */ postFormDataToApi),\n/* harmony export */   postJsonToApi: () => (/* binding */ postJsonToApi),\n/* harmony export */   postToApi: () => (/* binding */ postToApi),\n/* harmony export */   removeUndefinedEntries: () => (/* binding */ removeUndefinedEntries),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   safeParseJSON: () => (/* binding */ safeParseJSON),\n/* harmony export */   safeValidateTypes: () => (/* binding */ safeValidateTypes),\n/* harmony export */   standardSchemaValidator: () => (/* binding */ standardSchemaValidator),\n/* harmony export */   tool: () => (/* binding */ tool),\n/* harmony export */   validateTypes: () => (/* binding */ validateTypes),\n/* harmony export */   validator: () => (/* binding */ validator),\n/* harmony export */   validatorSymbol: () => (/* binding */ validatorSymbol),\n/* harmony export */   withoutTrailingSlash: () => (/* binding */ withoutTrailingSlash),\n/* harmony export */   zodSchema: () => (/* binding */ zodSchema)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/provider */ \"(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventsource-parser/stream */ \"(ssr)/./node_modules/eventsource-parser/dist/stream.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/zod/v4/core/to-json-schema.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/zod/v4/classic/parse.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod/v3 */ \"(ssr)/./node_modules/zod/v3/types.js\");\n// src/combine-headers.ts\nfunction combineHeaders(...headers) {\n  return headers.reduce(\n    (combinedHeaders, currentHeaders) => ({\n      ...combinedHeaders,\n      ...currentHeaders != null ? currentHeaders : {}\n    }),\n    {}\n  );\n}\n\n// src/convert-async-iterator-to-readable-stream.ts\nfunction convertAsyncIteratorToReadableStream(iterator) {\n  return new ReadableStream({\n    /**\n     * Called when the consumer wants to pull more data from the stream.\n     *\n     * @param {ReadableStreamDefaultController<T>} controller - The controller to enqueue data into the stream.\n     * @returns {Promise<void>}\n     */\n    async pull(controller) {\n      try {\n        const { value, done } = await iterator.next();\n        if (done) {\n          controller.close();\n        } else {\n          controller.enqueue(value);\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n    /**\n     * Called when the consumer cancels the stream.\n     */\n    cancel() {\n    }\n  });\n}\n\n// src/delay.ts\nasync function delay(delayInMs, options) {\n  if (delayInMs == null) {\n    return Promise.resolve();\n  }\n  const signal = options == null ? void 0 : options.abortSignal;\n  return new Promise((resolve2, reject) => {\n    if (signal == null ? void 0 : signal.aborted) {\n      reject(createAbortError());\n      return;\n    }\n    const timeoutId = setTimeout(() => {\n      cleanup();\n      resolve2();\n    }, delayInMs);\n    const cleanup = () => {\n      clearTimeout(timeoutId);\n      signal == null ? void 0 : signal.removeEventListener(\"abort\", onAbort);\n    };\n    const onAbort = () => {\n      cleanup();\n      reject(createAbortError());\n    };\n    signal == null ? void 0 : signal.addEventListener(\"abort\", onAbort);\n  });\n}\nfunction createAbortError() {\n  return new DOMException(\"Delay was aborted\", \"AbortError\");\n}\n\n// src/extract-response-headers.ts\nfunction extractResponseHeaders(response) {\n  return Object.fromEntries([...response.headers]);\n}\n\n// src/generate-id.ts\n\nvar createIdGenerator = ({\n  prefix,\n  size = 16,\n  alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  separator = \"-\"\n} = {}) => {\n  const generator = () => {\n    const alphabetLength = alphabet.length;\n    const chars = new Array(size);\n    for (let i = 0; i < size; i++) {\n      chars[i] = alphabet[Math.random() * alphabetLength | 0];\n    }\n    return chars.join(\"\");\n  };\n  if (prefix == null) {\n    return generator;\n  }\n  if (alphabet.includes(separator)) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidArgumentError({\n      argument: \"separator\",\n      message: `The separator \"${separator}\" must not be part of the alphabet \"${alphabet}\".`\n    });\n  }\n  return () => `${prefix}${separator}${generator()}`;\n};\nvar generateId = createIdGenerator();\n\n// src/get-error-message.ts\nfunction getErrorMessage(error) {\n  if (error == null) {\n    return \"unknown error\";\n  }\n  if (typeof error === \"string\") {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return JSON.stringify(error);\n}\n\n// src/get-from-api.ts\n\n\n// src/handle-fetch-error.ts\n\n\n// src/is-abort-error.ts\nfunction isAbortError(error) {\n  return (error instanceof Error || error instanceof DOMException) && (error.name === \"AbortError\" || error.name === \"ResponseAborted\" || // Next.js\n  error.name === \"TimeoutError\");\n}\n\n// src/handle-fetch-error.ts\nvar FETCH_FAILED_ERROR_MESSAGES = [\"fetch failed\", \"failed to fetch\"];\nfunction handleFetchError({\n  error,\n  url,\n  requestBodyValues\n}) {\n  if (isAbortError(error)) {\n    return error;\n  }\n  if (error instanceof TypeError && FETCH_FAILED_ERROR_MESSAGES.includes(error.message.toLowerCase())) {\n    const cause = error.cause;\n    if (cause != null) {\n      return new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: `Cannot connect to API: ${cause.message}`,\n        cause,\n        url,\n        requestBodyValues,\n        isRetryable: true\n        // retry when network error\n      });\n    }\n  }\n  return error;\n}\n\n// src/remove-undefined-entries.ts\nfunction removeUndefinedEntries(record) {\n  return Object.fromEntries(\n    Object.entries(record).filter(([_key, value]) => value != null)\n  );\n}\n\n// src/get-from-api.ts\nvar getOriginalFetch = () => globalThis.fetch;\nvar getFromApi = async ({\n  url,\n  headers = {},\n  successfulResponseHandler,\n  failedResponseHandler,\n  abortSignal,\n  fetch = getOriginalFetch()\n}) => {\n  try {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: removeUndefinedEntries(headers),\n      signal: abortSignal\n    });\n    const responseHeaders = extractResponseHeaders(response);\n    if (!response.ok) {\n      let errorInformation;\n      try {\n        errorInformation = await failedResponseHandler({\n          response,\n          url,\n          requestBodyValues: {}\n        });\n      } catch (error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n          message: \"Failed to process error response\",\n          cause: error,\n          statusCode: response.status,\n          url,\n          responseHeaders,\n          requestBodyValues: {}\n        });\n      }\n      throw errorInformation.value;\n    }\n    try {\n      return await successfulResponseHandler({\n        response,\n        url,\n        requestBodyValues: {}\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n      }\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: \"Failed to process successful response\",\n        cause: error,\n        statusCode: response.status,\n        url,\n        responseHeaders,\n        requestBodyValues: {}\n      });\n    }\n  } catch (error) {\n    throw handleFetchError({ error, url, requestBodyValues: {} });\n  }\n};\n\n// src/inject-json-instruction.ts\nvar DEFAULT_SCHEMA_PREFIX = \"JSON schema:\";\nvar DEFAULT_SCHEMA_SUFFIX = \"You MUST answer with a JSON object that matches the JSON schema above.\";\nvar DEFAULT_GENERIC_SUFFIX = \"You MUST answer with JSON.\";\nfunction injectJsonInstruction({\n  prompt,\n  schema,\n  schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : void 0,\n  schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX\n}) {\n  return [\n    prompt != null && prompt.length > 0 ? prompt : void 0,\n    prompt != null && prompt.length > 0 ? \"\" : void 0,\n    // add a newline if prompt is not null\n    schemaPrefix,\n    schema != null ? JSON.stringify(schema) : void 0,\n    schemaSuffix\n  ].filter((line) => line != null).join(\"\\n\");\n}\nfunction injectJsonInstructionIntoMessages({\n  messages,\n  schema,\n  schemaPrefix,\n  schemaSuffix\n}) {\n  var _a, _b;\n  const systemMessage = ((_a = messages[0]) == null ? void 0 : _a.role) === \"system\" ? { ...messages[0] } : { role: \"system\", content: \"\" };\n  systemMessage.content = injectJsonInstruction({\n    prompt: systemMessage.content,\n    schema,\n    schemaPrefix,\n    schemaSuffix\n  });\n  return [\n    systemMessage,\n    ...((_b = messages[0]) == null ? void 0 : _b.role) === \"system\" ? messages.slice(1) : messages\n  ];\n}\n\n// src/is-url-supported.ts\nfunction isUrlSupported({\n  mediaType,\n  url,\n  supportedUrls\n}) {\n  url = url.toLowerCase();\n  mediaType = mediaType.toLowerCase();\n  return Object.entries(supportedUrls).map(([key, value]) => {\n    const mediaType2 = key.toLowerCase();\n    return mediaType2 === \"*\" || mediaType2 === \"*/*\" ? { mediaTypePrefix: \"\", regexes: value } : { mediaTypePrefix: mediaType2.replace(/\\*/, \"\"), regexes: value };\n  }).filter(({ mediaTypePrefix }) => mediaType.startsWith(mediaTypePrefix)).flatMap(({ regexes }) => regexes).some((pattern) => pattern.test(url));\n}\n\n// src/load-api-key.ts\n\nfunction loadApiKey({\n  apiKey,\n  environmentVariableName,\n  apiKeyParameterName = \"apiKey\",\n  description\n}) {\n  if (typeof apiKey === \"string\") {\n    return apiKey;\n  }\n  if (apiKey != null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key must be a string.`\n    });\n  }\n  if (typeof process === \"undefined\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.`\n    });\n  }\n  apiKey = process.env[environmentVariableName];\n  if (apiKey == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.`\n    });\n  }\n  if (typeof apiKey !== \"string\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadAPIKeyError({\n      message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n    });\n  }\n  return apiKey;\n}\n\n// src/load-optional-setting.ts\nfunction loadOptionalSetting({\n  settingValue,\n  environmentVariableName\n}) {\n  if (typeof settingValue === \"string\") {\n    return settingValue;\n  }\n  if (settingValue != null || typeof process === \"undefined\") {\n    return void 0;\n  }\n  settingValue = process.env[environmentVariableName];\n  if (settingValue == null || typeof settingValue !== \"string\") {\n    return void 0;\n  }\n  return settingValue;\n}\n\n// src/load-setting.ts\n\nfunction loadSetting({\n  settingValue,\n  environmentVariableName,\n  settingName,\n  description\n}) {\n  if (typeof settingValue === \"string\") {\n    return settingValue;\n  }\n  if (settingValue != null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting must be a string.`\n    });\n  }\n  if (typeof process === \"undefined\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting is missing. Pass it using the '${settingName}' parameter. Environment variables is not supported in this environment.`\n    });\n  }\n  settingValue = process.env[environmentVariableName];\n  if (settingValue == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting is missing. Pass it using the '${settingName}' parameter or the ${environmentVariableName} environment variable.`\n    });\n  }\n  if (typeof settingValue !== \"string\") {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.LoadSettingError({\n      message: `${description} setting must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n    });\n  }\n  return settingValue;\n}\n\n// src/media-type-to-extension.ts\nfunction mediaTypeToExtension(mediaType) {\n  var _a;\n  const [_type, subtype = \"\"] = mediaType.toLowerCase().split(\"/\");\n  return (_a = {\n    mpeg: \"mp3\",\n    \"x-wav\": \"wav\",\n    opus: \"ogg\",\n    mp4: \"m4a\",\n    \"x-m4a\": \"m4a\"\n  }[subtype]) != null ? _a : subtype;\n}\n\n// src/parse-json.ts\n\n\n// src/secure-json-parse.ts\nvar suspectProtoRx = /\"__proto__\"\\s*:/;\nvar suspectConstructorRx = /\"constructor\"\\s*:/;\nfunction _parse(text) {\n  const obj = JSON.parse(text);\n  if (obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n  if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {\n    return obj;\n  }\n  return filter(obj);\n}\nfunction filter(obj) {\n  let next = [obj];\n  while (next.length) {\n    const nodes = next;\n    next = [];\n    for (const node of nodes) {\n      if (Object.prototype.hasOwnProperty.call(node, \"__proto__\")) {\n        throw new SyntaxError(\"Object contains forbidden prototype property\");\n      }\n      if (Object.prototype.hasOwnProperty.call(node, \"constructor\") && Object.prototype.hasOwnProperty.call(node.constructor, \"prototype\")) {\n        throw new SyntaxError(\"Object contains forbidden prototype property\");\n      }\n      for (const key in node) {\n        const value = node[key];\n        if (value && typeof value === \"object\") {\n          next.push(value);\n        }\n      }\n    }\n  }\n  return obj;\n}\nfunction secureJsonParse(text) {\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  try {\n    return _parse(text);\n  } finally {\n    Error.stackTraceLimit = stackTraceLimit;\n  }\n}\n\n// src/validate-types.ts\n\n\n// src/validator.ts\n\nvar validatorSymbol = Symbol.for(\"vercel.ai.validator\");\nfunction validator(validate) {\n  return { [validatorSymbol]: true, validate };\n}\nfunction isValidator(value) {\n  return typeof value === \"object\" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && \"validate\" in value;\n}\nfunction asValidator(value) {\n  return isValidator(value) ? value : standardSchemaValidator(value);\n}\nfunction standardSchemaValidator(standardSchema) {\n  return validator(async (value) => {\n    const result = await standardSchema[\"~standard\"].validate(value);\n    return result.issues == null ? { success: true, value: result.value } : {\n      success: false,\n      error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError({\n        value,\n        cause: result.issues\n      })\n    };\n  });\n}\n\n// src/validate-types.ts\nasync function validateTypes({\n  value,\n  schema\n}) {\n  const result = await safeValidateTypes({ value, schema });\n  if (!result.success) {\n    throw _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.wrap({ value, cause: result.error });\n  }\n  return result.value;\n}\nasync function safeValidateTypes({\n  value,\n  schema\n}) {\n  const validator2 = asValidator(schema);\n  try {\n    if (validator2.validate == null) {\n      return { success: true, value, rawValue: value };\n    }\n    const result = await validator2.validate(value);\n    if (result.success) {\n      return { success: true, value: result.value, rawValue: value };\n    }\n    return {\n      success: false,\n      error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.wrap({ value, cause: result.error }),\n      rawValue: value\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.wrap({ value, cause: error }),\n      rawValue: value\n    };\n  }\n}\n\n// src/parse-json.ts\nasync function parseJSON({\n  text,\n  schema\n}) {\n  try {\n    const value = secureJsonParse(text);\n    if (schema == null) {\n      return value;\n    }\n    return validateTypes({ value, schema });\n  } catch (error) {\n    if (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError.isInstance(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TypeValidationError.isInstance(error)) {\n      throw error;\n    }\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError({ text, cause: error });\n  }\n}\nasync function safeParseJSON({\n  text,\n  schema\n}) {\n  try {\n    const value = secureJsonParse(text);\n    if (schema == null) {\n      return { success: true, value, rawValue: value };\n    }\n    return await safeValidateTypes({ value, schema });\n  } catch (error) {\n    return {\n      success: false,\n      error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError.isInstance(error) ? error : new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.JSONParseError({ text, cause: error }),\n      rawValue: void 0\n    };\n  }\n}\nfunction isParsableJson(input) {\n  try {\n    secureJsonParse(input);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// src/parse-json-event-stream.ts\n\nfunction parseJsonEventStream({\n  stream,\n  schema\n}) {\n  return stream.pipeThrough(new TextDecoderStream()).pipeThrough(new eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_1__.EventSourceParserStream()).pipeThrough(\n    new TransformStream({\n      async transform({ data }, controller) {\n        if (data === \"[DONE]\") {\n          return;\n        }\n        controller.enqueue(await safeParseJSON({ text: data, schema }));\n      }\n    })\n  );\n}\n\n// src/parse-provider-options.ts\n\nasync function parseProviderOptions({\n  provider,\n  providerOptions,\n  schema\n}) {\n  if ((providerOptions == null ? void 0 : providerOptions[provider]) == null) {\n    return void 0;\n  }\n  const parsedProviderOptions = await safeValidateTypes({\n    value: providerOptions[provider],\n    schema\n  });\n  if (!parsedProviderOptions.success) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.InvalidArgumentError({\n      argument: \"providerOptions\",\n      message: `invalid ${provider} provider options`,\n      cause: parsedProviderOptions.error\n    });\n  }\n  return parsedProviderOptions.value;\n}\n\n// src/post-to-api.ts\n\nvar getOriginalFetch2 = () => globalThis.fetch;\nvar postJsonToApi = async ({\n  url,\n  headers,\n  body,\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n}) => postToApi({\n  url,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    ...headers\n  },\n  body: {\n    content: JSON.stringify(body),\n    values: body\n  },\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n});\nvar postFormDataToApi = async ({\n  url,\n  headers,\n  formData,\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n}) => postToApi({\n  url,\n  headers,\n  body: {\n    content: formData,\n    values: Object.fromEntries(formData.entries())\n  },\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n});\nvar postToApi = async ({\n  url,\n  headers = {},\n  body,\n  successfulResponseHandler,\n  failedResponseHandler,\n  abortSignal,\n  fetch = getOriginalFetch2()\n}) => {\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: removeUndefinedEntries(headers),\n      body: body.content,\n      signal: abortSignal\n    });\n    const responseHeaders = extractResponseHeaders(response);\n    if (!response.ok) {\n      let errorInformation;\n      try {\n        errorInformation = await failedResponseHandler({\n          response,\n          url,\n          requestBodyValues: body.values\n        });\n      } catch (error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n          message: \"Failed to process error response\",\n          cause: error,\n          statusCode: response.status,\n          url,\n          responseHeaders,\n          requestBodyValues: body.values\n        });\n      }\n      throw errorInformation.value;\n    }\n    try {\n      return await successfulResponseHandler({\n        response,\n        url,\n        requestBodyValues: body.values\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError.isInstance(error)) {\n          throw error;\n        }\n      }\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: \"Failed to process successful response\",\n        cause: error,\n        statusCode: response.status,\n        url,\n        responseHeaders,\n        requestBodyValues: body.values\n      });\n    }\n  } catch (error) {\n    throw handleFetchError({ error, url, requestBodyValues: body.values });\n  }\n};\n\n// src/types/tool.ts\nfunction tool(tool2) {\n  return tool2;\n}\nfunction dynamicTool(tool2) {\n  return { ...tool2, type: \"dynamic\" };\n}\n\n// src/provider-defined-tool-factory.ts\nfunction createProviderDefinedToolFactory({\n  id,\n  name,\n  inputSchema\n}) {\n  return ({\n    execute,\n    outputSchema,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable,\n    ...args\n  }) => tool({\n    type: \"provider-defined\",\n    id,\n    name,\n    args,\n    inputSchema,\n    outputSchema,\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable\n  });\n}\nfunction createProviderDefinedToolFactoryWithOutputSchema({\n  id,\n  name,\n  inputSchema,\n  outputSchema\n}) {\n  return ({\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable,\n    ...args\n  }) => tool({\n    type: \"provider-defined\",\n    id,\n    name,\n    args,\n    inputSchema,\n    outputSchema,\n    execute,\n    toModelOutput,\n    onInputStart,\n    onInputDelta,\n    onInputAvailable\n  });\n}\n\n// src/resolve.ts\nasync function resolve(value) {\n  if (typeof value === \"function\") {\n    value = value();\n  }\n  return Promise.resolve(value);\n}\n\n// src/response-handler.ts\n\nvar createJsonErrorResponseHandler = ({\n  errorSchema,\n  errorToMessage,\n  isRetryable\n}) => async ({ response, url, requestBodyValues }) => {\n  const responseBody = await response.text();\n  const responseHeaders = extractResponseHeaders(response);\n  if (responseBody.trim() === \"\") {\n    return {\n      responseHeaders,\n      value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: response.statusText,\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n      })\n    };\n  }\n  try {\n    const parsedError = await parseJSON({\n      text: responseBody,\n      schema: errorSchema\n    });\n    return {\n      responseHeaders,\n      value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: errorToMessage(parsedError),\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        data: parsedError,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response, parsedError)\n      })\n    };\n  } catch (parseError) {\n    return {\n      responseHeaders,\n      value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n        message: response.statusText,\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n      })\n    };\n  }\n};\nvar createEventSourceResponseHandler = (chunkSchema) => async ({ response }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (response.body == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.EmptyResponseBodyError({});\n  }\n  return {\n    responseHeaders,\n    value: parseJsonEventStream({\n      stream: response.body,\n      schema: chunkSchema\n    })\n  };\n};\nvar createJsonStreamResponseHandler = (chunkSchema) => async ({ response }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (response.body == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.EmptyResponseBodyError({});\n  }\n  let buffer = \"\";\n  return {\n    responseHeaders,\n    value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(\n      new TransformStream({\n        async transform(chunkText, controller) {\n          if (chunkText.endsWith(\"\\n\")) {\n            controller.enqueue(\n              await safeParseJSON({\n                text: buffer + chunkText,\n                schema: chunkSchema\n              })\n            );\n            buffer = \"\";\n          } else {\n            buffer += chunkText;\n          }\n        }\n      })\n    )\n  };\n};\nvar createJsonResponseHandler = (responseSchema) => async ({ response, url, requestBodyValues }) => {\n  const responseBody = await response.text();\n  const parsedResult = await safeParseJSON({\n    text: responseBody,\n    schema: responseSchema\n  });\n  const responseHeaders = extractResponseHeaders(response);\n  if (!parsedResult.success) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: \"Invalid JSON response\",\n      cause: parsedResult.error,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody,\n      url,\n      requestBodyValues\n    });\n  }\n  return {\n    responseHeaders,\n    value: parsedResult.value,\n    rawValue: parsedResult.rawValue\n  };\n};\nvar createBinaryResponseHandler = () => async ({ response, url, requestBodyValues }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (!response.body) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: \"Response body is empty\",\n      url,\n      requestBodyValues,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody: void 0\n    });\n  }\n  try {\n    const buffer = await response.arrayBuffer();\n    return {\n      responseHeaders,\n      value: new Uint8Array(buffer)\n    };\n  } catch (error) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: \"Failed to read response as array buffer\",\n      url,\n      requestBodyValues,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody: void 0,\n      cause: error\n    });\n  }\n};\nvar createStatusCodeErrorResponseHandler = () => async ({ response, url, requestBodyValues }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  const responseBody = await response.text();\n  return {\n    responseHeaders,\n    value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.APICallError({\n      message: response.statusText,\n      url,\n      requestBodyValues,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody\n    })\n  };\n};\n\n// src/zod-schema.ts\n\n\n// src/zod-to-json-schema/get-relative-path.ts\nvar getRelativePath = (pathA, pathB) => {\n  let i = 0;\n  for (; i < pathA.length && i < pathB.length; i++) {\n    if (pathA[i] !== pathB[i])\n      break;\n  }\n  return [(pathA.length - i).toString(), ...pathB.slice(i)].join(\"/\");\n};\n\n// src/zod-to-json-schema/options.ts\nvar ignoreOverride = Symbol(\n  \"Let zodToJsonSchema decide on which parser to use\"\n);\nvar defaultOptions = {\n  name: void 0,\n  $refStrategy: \"root\",\n  basePath: [\"#\"],\n  effectStrategy: \"input\",\n  pipeStrategy: \"all\",\n  dateStrategy: \"format:date-time\",\n  mapStrategy: \"entries\",\n  removeAdditionalStrategy: \"passthrough\",\n  allowedAdditionalProperties: true,\n  rejectedAdditionalProperties: false,\n  definitionPath: \"definitions\",\n  strictUnions: false,\n  definitions: {},\n  errorMessages: false,\n  patternStrategy: \"escape\",\n  applyRegexFlags: false,\n  emailStrategy: \"format:email\",\n  base64Strategy: \"contentEncoding:base64\",\n  nameStrategy: \"ref\"\n};\nvar getDefaultOptions = (options) => typeof options === \"string\" ? {\n  ...defaultOptions,\n  name: options\n} : {\n  ...defaultOptions,\n  ...options\n};\n\n// src/zod-to-json-schema/select-parser.ts\n\n\n// src/zod-to-json-schema/parsers/any.ts\nfunction parseAnyDef() {\n  return {};\n}\n\n// src/zod-to-json-schema/parsers/array.ts\n\nfunction parseArrayDef(def, refs) {\n  var _a, _b, _c;\n  const res = {\n    type: \"array\"\n  };\n  if (((_a = def.type) == null ? void 0 : _a._def) && ((_c = (_b = def.type) == null ? void 0 : _b._def) == null ? void 0 : _c.typeName) !== zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodAny) {\n    res.items = parseDef(def.type._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"items\"]\n    });\n  }\n  if (def.minLength) {\n    res.minItems = def.minLength.value;\n  }\n  if (def.maxLength) {\n    res.maxItems = def.maxLength.value;\n  }\n  if (def.exactLength) {\n    res.minItems = def.exactLength.value;\n    res.maxItems = def.exactLength.value;\n  }\n  return res;\n}\n\n// src/zod-to-json-schema/parsers/bigint.ts\nfunction parseBigintDef(def) {\n  const res = {\n    type: \"integer\",\n    format: \"int64\"\n  };\n  if (!def.checks)\n    return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        if (check.inclusive) {\n          res.minimum = check.value;\n        } else {\n          res.exclusiveMinimum = check.value;\n        }\n        break;\n      case \"max\":\n        if (check.inclusive) {\n          res.maximum = check.value;\n        } else {\n          res.exclusiveMaximum = check.value;\n        }\n        break;\n      case \"multipleOf\":\n        res.multipleOf = check.value;\n        break;\n    }\n  }\n  return res;\n}\n\n// src/zod-to-json-schema/parsers/boolean.ts\nfunction parseBooleanDef() {\n  return { type: \"boolean\" };\n}\n\n// src/zod-to-json-schema/parsers/branded.ts\nfunction parseBrandedDef(_def, refs) {\n  return parseDef(_def.type._def, refs);\n}\n\n// src/zod-to-json-schema/parsers/catch.ts\nvar parseCatchDef = (def, refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n\n// src/zod-to-json-schema/parsers/date.ts\nfunction parseDateDef(def, refs, overrideDateStrategy) {\n  const strategy = overrideDateStrategy != null ? overrideDateStrategy : refs.dateStrategy;\n  if (Array.isArray(strategy)) {\n    return {\n      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))\n    };\n  }\n  switch (strategy) {\n    case \"string\":\n    case \"format:date-time\":\n      return {\n        type: \"string\",\n        format: \"date-time\"\n      };\n    case \"format:date\":\n      return {\n        type: \"string\",\n        format: \"date\"\n      };\n    case \"integer\":\n      return integerDateParser(def);\n  }\n}\nvar integerDateParser = (def) => {\n  const res = {\n    type: \"integer\",\n    format: \"unix-time\"\n  };\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        res.minimum = check.value;\n        break;\n      case \"max\":\n        res.maximum = check.value;\n        break;\n    }\n  }\n  return res;\n};\n\n// src/zod-to-json-schema/parsers/default.ts\nfunction parseDefaultDef(_def, refs) {\n  return {\n    ...parseDef(_def.innerType._def, refs),\n    default: _def.defaultValue()\n  };\n}\n\n// src/zod-to-json-schema/parsers/effects.ts\nfunction parseEffectsDef(_def, refs) {\n  return refs.effectStrategy === \"input\" ? parseDef(_def.schema._def, refs) : parseAnyDef();\n}\n\n// src/zod-to-json-schema/parsers/enum.ts\nfunction parseEnumDef(def) {\n  return {\n    type: \"string\",\n    enum: Array.from(def.values)\n  };\n}\n\n// src/zod-to-json-schema/parsers/intersection.ts\nvar isJsonSchema7AllOfType = (type) => {\n  if (\"type\" in type && type.type === \"string\")\n    return false;\n  return \"allOf\" in type;\n};\nfunction parseIntersectionDef(def, refs) {\n  const allOf = [\n    parseDef(def.left._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"allOf\", \"0\"]\n    }),\n    parseDef(def.right._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"allOf\", \"1\"]\n    })\n  ].filter((x) => !!x);\n  const mergedAllOf = [];\n  allOf.forEach((schema) => {\n    if (isJsonSchema7AllOfType(schema)) {\n      mergedAllOf.push(...schema.allOf);\n    } else {\n      let nestedSchema = schema;\n      if (\"additionalProperties\" in schema && schema.additionalProperties === false) {\n        const { additionalProperties, ...rest } = schema;\n        nestedSchema = rest;\n      }\n      mergedAllOf.push(nestedSchema);\n    }\n  });\n  return mergedAllOf.length ? { allOf: mergedAllOf } : void 0;\n}\n\n// src/zod-to-json-schema/parsers/literal.ts\nfunction parseLiteralDef(def) {\n  const parsedType = typeof def.value;\n  if (parsedType !== \"bigint\" && parsedType !== \"number\" && parsedType !== \"boolean\" && parsedType !== \"string\") {\n    return {\n      type: Array.isArray(def.value) ? \"array\" : \"object\"\n    };\n  }\n  return {\n    type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n    const: def.value\n  };\n}\n\n// src/zod-to-json-schema/parsers/record.ts\n\n\n// src/zod-to-json-schema/parsers/string.ts\nvar emojiRegex = void 0;\nvar zodPatterns = {\n  /**\n   * `c` was changed to `[cC]` to replicate /i flag\n   */\n  cuid: /^[cC][^\\s-]{8,}$/,\n  cuid2: /^[0-9a-z]+$/,\n  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,\n  /**\n   * `a-z` was added to replicate /i flag\n   */\n  email: /^(?!\\.)(?!.*\\.\\.)([a-zA-Z0-9_'+\\-\\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\\-]*\\.)+[a-zA-Z]{2,}$/,\n  /**\n   * Constructed a valid Unicode RegExp\n   *\n   * Lazily instantiate since this type of regex isn't supported\n   * in all envs (e.g. React Native).\n   *\n   * See:\n   * https://github.com/colinhacks/zod/issues/2433\n   * Fix in Zod:\n   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b\n   */\n  emoji: () => {\n    if (emojiRegex === void 0) {\n      emojiRegex = RegExp(\n        \"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\",\n        \"u\"\n      );\n    }\n    return emojiRegex;\n  },\n  /**\n   * Unused\n   */\n  uuid: /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/,\n  /**\n   * Unused\n   */\n  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,\n  ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/,\n  /**\n   * Unused\n   */\n  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,\n  ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\n  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,\n  base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,\n  nanoid: /^[a-zA-Z0-9_-]{21}$/,\n  jwt: /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/\n};\nfunction parseStringDef(def, refs) {\n  const res = {\n    type: \"string\"\n  };\n  if (def.checks) {\n    for (const check of def.checks) {\n      switch (check.kind) {\n        case \"min\":\n          res.minLength = typeof res.minLength === \"number\" ? Math.max(res.minLength, check.value) : check.value;\n          break;\n        case \"max\":\n          res.maxLength = typeof res.maxLength === \"number\" ? Math.min(res.maxLength, check.value) : check.value;\n          break;\n        case \"email\":\n          switch (refs.emailStrategy) {\n            case \"format:email\":\n              addFormat(res, \"email\", check.message, refs);\n              break;\n            case \"format:idn-email\":\n              addFormat(res, \"idn-email\", check.message, refs);\n              break;\n            case \"pattern:zod\":\n              addPattern(res, zodPatterns.email, check.message, refs);\n              break;\n          }\n          break;\n        case \"url\":\n          addFormat(res, \"uri\", check.message, refs);\n          break;\n        case \"uuid\":\n          addFormat(res, \"uuid\", check.message, refs);\n          break;\n        case \"regex\":\n          addPattern(res, check.regex, check.message, refs);\n          break;\n        case \"cuid\":\n          addPattern(res, zodPatterns.cuid, check.message, refs);\n          break;\n        case \"cuid2\":\n          addPattern(res, zodPatterns.cuid2, check.message, refs);\n          break;\n        case \"startsWith\":\n          addPattern(\n            res,\n            RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`),\n            check.message,\n            refs\n          );\n          break;\n        case \"endsWith\":\n          addPattern(\n            res,\n            RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`),\n            check.message,\n            refs\n          );\n          break;\n        case \"datetime\":\n          addFormat(res, \"date-time\", check.message, refs);\n          break;\n        case \"date\":\n          addFormat(res, \"date\", check.message, refs);\n          break;\n        case \"time\":\n          addFormat(res, \"time\", check.message, refs);\n          break;\n        case \"duration\":\n          addFormat(res, \"duration\", check.message, refs);\n          break;\n        case \"length\":\n          res.minLength = typeof res.minLength === \"number\" ? Math.max(res.minLength, check.value) : check.value;\n          res.maxLength = typeof res.maxLength === \"number\" ? Math.min(res.maxLength, check.value) : check.value;\n          break;\n        case \"includes\": {\n          addPattern(\n            res,\n            RegExp(escapeLiteralCheckValue(check.value, refs)),\n            check.message,\n            refs\n          );\n          break;\n        }\n        case \"ip\": {\n          if (check.version !== \"v6\") {\n            addFormat(res, \"ipv4\", check.message, refs);\n          }\n          if (check.version !== \"v4\") {\n            addFormat(res, \"ipv6\", check.message, refs);\n          }\n          break;\n        }\n        case \"base64url\":\n          addPattern(res, zodPatterns.base64url, check.message, refs);\n          break;\n        case \"jwt\":\n          addPattern(res, zodPatterns.jwt, check.message, refs);\n          break;\n        case \"cidr\": {\n          if (check.version !== \"v6\") {\n            addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);\n          }\n          if (check.version !== \"v4\") {\n            addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);\n          }\n          break;\n        }\n        case \"emoji\":\n          addPattern(res, zodPatterns.emoji(), check.message, refs);\n          break;\n        case \"ulid\": {\n          addPattern(res, zodPatterns.ulid, check.message, refs);\n          break;\n        }\n        case \"base64\": {\n          switch (refs.base64Strategy) {\n            case \"format:binary\": {\n              addFormat(res, \"binary\", check.message, refs);\n              break;\n            }\n            case \"contentEncoding:base64\": {\n              res.contentEncoding = \"base64\";\n              break;\n            }\n            case \"pattern:zod\": {\n              addPattern(res, zodPatterns.base64, check.message, refs);\n              break;\n            }\n          }\n          break;\n        }\n        case \"nanoid\": {\n          addPattern(res, zodPatterns.nanoid, check.message, refs);\n        }\n        case \"toLowerCase\":\n        case \"toUpperCase\":\n        case \"trim\":\n          break;\n        default:\n          /* @__PURE__ */ ((_) => {\n          })(check);\n      }\n    }\n  }\n  return res;\n}\nfunction escapeLiteralCheckValue(literal, refs) {\n  return refs.patternStrategy === \"escape\" ? escapeNonAlphaNumeric(literal) : literal;\n}\nvar ALPHA_NUMERIC = new Set(\n  \"ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789\"\n);\nfunction escapeNonAlphaNumeric(source) {\n  let result = \"\";\n  for (let i = 0; i < source.length; i++) {\n    if (!ALPHA_NUMERIC.has(source[i])) {\n      result += \"\\\\\";\n    }\n    result += source[i];\n  }\n  return result;\n}\nfunction addFormat(schema, value, message, refs) {\n  var _a;\n  if (schema.format || ((_a = schema.anyOf) == null ? void 0 : _a.some((x) => x.format))) {\n    if (!schema.anyOf) {\n      schema.anyOf = [];\n    }\n    if (schema.format) {\n      schema.anyOf.push({\n        format: schema.format\n      });\n      delete schema.format;\n    }\n    schema.anyOf.push({\n      format: value,\n      ...message && refs.errorMessages && { errorMessage: { format: message } }\n    });\n  } else {\n    schema.format = value;\n  }\n}\nfunction addPattern(schema, regex, message, refs) {\n  var _a;\n  if (schema.pattern || ((_a = schema.allOf) == null ? void 0 : _a.some((x) => x.pattern))) {\n    if (!schema.allOf) {\n      schema.allOf = [];\n    }\n    if (schema.pattern) {\n      schema.allOf.push({\n        pattern: schema.pattern\n      });\n      delete schema.pattern;\n    }\n    schema.allOf.push({\n      pattern: stringifyRegExpWithFlags(regex, refs),\n      ...message && refs.errorMessages && { errorMessage: { pattern: message } }\n    });\n  } else {\n    schema.pattern = stringifyRegExpWithFlags(regex, refs);\n  }\n}\nfunction stringifyRegExpWithFlags(regex, refs) {\n  var _a;\n  if (!refs.applyRegexFlags || !regex.flags) {\n    return regex.source;\n  }\n  const flags = {\n    i: regex.flags.includes(\"i\"),\n    // Case-insensitive\n    m: regex.flags.includes(\"m\"),\n    // `^` and `$` matches adjacent to newline characters\n    s: regex.flags.includes(\"s\")\n    // `.` matches newlines\n  };\n  const source = flags.i ? regex.source.toLowerCase() : regex.source;\n  let pattern = \"\";\n  let isEscaped = false;\n  let inCharGroup = false;\n  let inCharRange = false;\n  for (let i = 0; i < source.length; i++) {\n    if (isEscaped) {\n      pattern += source[i];\n      isEscaped = false;\n      continue;\n    }\n    if (flags.i) {\n      if (inCharGroup) {\n        if (source[i].match(/[a-z]/)) {\n          if (inCharRange) {\n            pattern += source[i];\n            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();\n            inCharRange = false;\n          } else if (source[i + 1] === \"-\" && ((_a = source[i + 2]) == null ? void 0 : _a.match(/[a-z]/))) {\n            pattern += source[i];\n            inCharRange = true;\n          } else {\n            pattern += `${source[i]}${source[i].toUpperCase()}`;\n          }\n          continue;\n        }\n      } else if (source[i].match(/[a-z]/)) {\n        pattern += `[${source[i]}${source[i].toUpperCase()}]`;\n        continue;\n      }\n    }\n    if (flags.m) {\n      if (source[i] === \"^\") {\n        pattern += `(^|(?<=[\\r\n]))`;\n        continue;\n      } else if (source[i] === \"$\") {\n        pattern += `($|(?=[\\r\n]))`;\n        continue;\n      }\n    }\n    if (flags.s && source[i] === \".\") {\n      pattern += inCharGroup ? `${source[i]}\\r\n` : `[${source[i]}\\r\n]`;\n      continue;\n    }\n    pattern += source[i];\n    if (source[i] === \"\\\\\") {\n      isEscaped = true;\n    } else if (inCharGroup && source[i] === \"]\") {\n      inCharGroup = false;\n    } else if (!inCharGroup && source[i] === \"[\") {\n      inCharGroup = true;\n    }\n  }\n  try {\n    new RegExp(pattern);\n  } catch (e) {\n    console.warn(\n      `Could not convert regex pattern at ${refs.currentPath.join(\n        \"/\"\n      )} to a flag-independent form! Falling back to the flag-ignorant source`\n    );\n    return regex.source;\n  }\n  return pattern;\n}\n\n// src/zod-to-json-schema/parsers/record.ts\nfunction parseRecordDef(def, refs) {\n  var _a, _b, _c, _d, _e, _f;\n  const schema = {\n    type: \"object\",\n    additionalProperties: (_a = parseDef(def.valueType._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"additionalProperties\"]\n    })) != null ? _a : refs.allowedAdditionalProperties\n  };\n  if (((_b = def.keyType) == null ? void 0 : _b._def.typeName) === zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodString && ((_c = def.keyType._def.checks) == null ? void 0 : _c.length)) {\n    const { type, ...keyType } = parseStringDef(def.keyType._def, refs);\n    return {\n      ...schema,\n      propertyNames: keyType\n    };\n  } else if (((_d = def.keyType) == null ? void 0 : _d._def.typeName) === zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      ...schema,\n      propertyNames: {\n        enum: def.keyType._def.values\n      }\n    };\n  } else if (((_e = def.keyType) == null ? void 0 : _e._def.typeName) === zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodString && ((_f = def.keyType._def.type._def.checks) == null ? void 0 : _f.length)) {\n    const { type, ...keyType } = parseBrandedDef(\n      def.keyType._def,\n      refs\n    );\n    return {\n      ...schema,\n      propertyNames: keyType\n    };\n  }\n  return schema;\n}\n\n// src/zod-to-json-schema/parsers/map.ts\nfunction parseMapDef(def, refs) {\n  if (refs.mapStrategy === \"record\") {\n    return parseRecordDef(def, refs);\n  }\n  const keys = parseDef(def.keyType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\", \"items\", \"0\"]\n  }) || parseAnyDef();\n  const values = parseDef(def.valueType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\", \"items\", \"1\"]\n  }) || parseAnyDef();\n  return {\n    type: \"array\",\n    maxItems: 125,\n    items: {\n      type: \"array\",\n      items: [keys, values],\n      minItems: 2,\n      maxItems: 2\n    }\n  };\n}\n\n// src/zod-to-json-schema/parsers/native-enum.ts\nfunction parseNativeEnumDef(def) {\n  const object = def.values;\n  const actualKeys = Object.keys(def.values).filter((key) => {\n    return typeof object[object[key]] !== \"number\";\n  });\n  const actualValues = actualKeys.map((key) => object[key]);\n  const parsedTypes = Array.from(\n    new Set(actualValues.map((values) => typeof values))\n  );\n  return {\n    type: parsedTypes.length === 1 ? parsedTypes[0] === \"string\" ? \"string\" : \"number\" : [\"string\", \"number\"],\n    enum: actualValues\n  };\n}\n\n// src/zod-to-json-schema/parsers/never.ts\nfunction parseNeverDef() {\n  return { not: parseAnyDef() };\n}\n\n// src/zod-to-json-schema/parsers/null.ts\nfunction parseNullDef() {\n  return {\n    type: \"null\"\n  };\n}\n\n// src/zod-to-json-schema/parsers/union.ts\nvar primitiveMappings = {\n  ZodString: \"string\",\n  ZodNumber: \"number\",\n  ZodBigInt: \"integer\",\n  ZodBoolean: \"boolean\",\n  ZodNull: \"null\"\n};\nfunction parseUnionDef(def, refs) {\n  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;\n  if (options.every(\n    (x) => x._def.typeName in primitiveMappings && (!x._def.checks || !x._def.checks.length)\n  )) {\n    const types = options.reduce((types2, x) => {\n      const type = primitiveMappings[x._def.typeName];\n      return type && !types2.includes(type) ? [...types2, type] : types2;\n    }, []);\n    return {\n      type: types.length > 1 ? types : types[0]\n    };\n  } else if (options.every((x) => x._def.typeName === \"ZodLiteral\" && !x.description)) {\n    const types = options.reduce(\n      (acc, x) => {\n        const type = typeof x._def.value;\n        switch (type) {\n          case \"string\":\n          case \"number\":\n          case \"boolean\":\n            return [...acc, type];\n          case \"bigint\":\n            return [...acc, \"integer\"];\n          case \"object\":\n            if (x._def.value === null)\n              return [...acc, \"null\"];\n          case \"symbol\":\n          case \"undefined\":\n          case \"function\":\n          default:\n            return acc;\n        }\n      },\n      []\n    );\n    if (types.length === options.length) {\n      const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);\n      return {\n        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],\n        enum: options.reduce(\n          (acc, x) => {\n            return acc.includes(x._def.value) ? acc : [...acc, x._def.value];\n          },\n          []\n        )\n      };\n    }\n  } else if (options.every((x) => x._def.typeName === \"ZodEnum\")) {\n    return {\n      type: \"string\",\n      enum: options.reduce(\n        (acc, x) => [\n          ...acc,\n          ...x._def.values.filter((x2) => !acc.includes(x2))\n        ],\n        []\n      )\n    };\n  }\n  return asAnyOf(def, refs);\n}\nvar asAnyOf = (def, refs) => {\n  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map(\n    (x, i) => parseDef(x._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"anyOf\", `${i}`]\n    })\n  ).filter(\n    (x) => !!x && (!refs.strictUnions || typeof x === \"object\" && Object.keys(x).length > 0)\n  );\n  return anyOf.length ? { anyOf } : void 0;\n};\n\n// src/zod-to-json-schema/parsers/nullable.ts\nfunction parseNullableDef(def, refs) {\n  if ([\"ZodString\", \"ZodNumber\", \"ZodBigInt\", \"ZodBoolean\", \"ZodNull\"].includes(\n    def.innerType._def.typeName\n  ) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {\n    return {\n      type: [\n        primitiveMappings[def.innerType._def.typeName],\n        \"null\"\n      ]\n    };\n  }\n  const base = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"anyOf\", \"0\"]\n  });\n  return base && { anyOf: [base, { type: \"null\" }] };\n}\n\n// src/zod-to-json-schema/parsers/number.ts\nfunction parseNumberDef(def) {\n  const res = {\n    type: \"number\"\n  };\n  if (!def.checks)\n    return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"int\":\n        res.type = \"integer\";\n        break;\n      case \"min\":\n        if (check.inclusive) {\n          res.minimum = check.value;\n        } else {\n          res.exclusiveMinimum = check.value;\n        }\n        break;\n      case \"max\":\n        if (check.inclusive) {\n          res.maximum = check.value;\n        } else {\n          res.exclusiveMaximum = check.value;\n        }\n        break;\n      case \"multipleOf\":\n        res.multipleOf = check.value;\n        break;\n    }\n  }\n  return res;\n}\n\n// src/zod-to-json-schema/parsers/object.ts\nfunction parseObjectDef(def, refs) {\n  const result = {\n    type: \"object\",\n    properties: {}\n  };\n  const required = [];\n  const shape = def.shape();\n  for (const propName in shape) {\n    let propDef = shape[propName];\n    if (propDef === void 0 || propDef._def === void 0) {\n      continue;\n    }\n    const propOptional = safeIsOptional(propDef);\n    const parsedDef = parseDef(propDef._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"properties\", propName],\n      propertyPath: [...refs.currentPath, \"properties\", propName]\n    });\n    if (parsedDef === void 0) {\n      continue;\n    }\n    result.properties[propName] = parsedDef;\n    if (!propOptional) {\n      required.push(propName);\n    }\n  }\n  if (required.length) {\n    result.required = required;\n  }\n  const additionalProperties = decideAdditionalProperties(def, refs);\n  if (additionalProperties !== void 0) {\n    result.additionalProperties = additionalProperties;\n  }\n  return result;\n}\nfunction decideAdditionalProperties(def, refs) {\n  if (def.catchall._def.typeName !== \"ZodNever\") {\n    return parseDef(def.catchall._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"additionalProperties\"]\n    });\n  }\n  switch (def.unknownKeys) {\n    case \"passthrough\":\n      return refs.allowedAdditionalProperties;\n    case \"strict\":\n      return refs.rejectedAdditionalProperties;\n    case \"strip\":\n      return refs.removeAdditionalStrategy === \"strict\" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;\n  }\n}\nfunction safeIsOptional(schema) {\n  try {\n    return schema.isOptional();\n  } catch (e) {\n    return true;\n  }\n}\n\n// src/zod-to-json-schema/parsers/optional.ts\nvar parseOptionalDef = (def, refs) => {\n  var _a;\n  if (refs.currentPath.toString() === ((_a = refs.propertyPath) == null ? void 0 : _a.toString())) {\n    return parseDef(def.innerType._def, refs);\n  }\n  const innerSchema = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"anyOf\", \"1\"]\n  });\n  return innerSchema ? { anyOf: [{ not: parseAnyDef() }, innerSchema] } : parseAnyDef();\n};\n\n// src/zod-to-json-schema/parsers/pipeline.ts\nvar parsePipelineDef = (def, refs) => {\n  if (refs.pipeStrategy === \"input\") {\n    return parseDef(def.in._def, refs);\n  } else if (refs.pipeStrategy === \"output\") {\n    return parseDef(def.out._def, refs);\n  }\n  const a = parseDef(def.in._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", \"0\"]\n  });\n  const b = parseDef(def.out._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", a ? \"1\" : \"0\"]\n  });\n  return {\n    allOf: [a, b].filter((x) => x !== void 0)\n  };\n};\n\n// src/zod-to-json-schema/parsers/promise.ts\nfunction parsePromiseDef(def, refs) {\n  return parseDef(def.type._def, refs);\n}\n\n// src/zod-to-json-schema/parsers/set.ts\nfunction parseSetDef(def, refs) {\n  const items = parseDef(def.valueType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\"]\n  });\n  const schema = {\n    type: \"array\",\n    uniqueItems: true,\n    items\n  };\n  if (def.minSize) {\n    schema.minItems = def.minSize.value;\n  }\n  if (def.maxSize) {\n    schema.maxItems = def.maxSize.value;\n  }\n  return schema;\n}\n\n// src/zod-to-json-schema/parsers/tuple.ts\nfunction parseTupleDef(def, refs) {\n  if (def.rest) {\n    return {\n      type: \"array\",\n      minItems: def.items.length,\n      items: def.items.map(\n        (x, i) => parseDef(x._def, {\n          ...refs,\n          currentPath: [...refs.currentPath, \"items\", `${i}`]\n        })\n      ).reduce(\n        (acc, x) => x === void 0 ? acc : [...acc, x],\n        []\n      ),\n      additionalItems: parseDef(def.rest._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"additionalItems\"]\n      })\n    };\n  } else {\n    return {\n      type: \"array\",\n      minItems: def.items.length,\n      maxItems: def.items.length,\n      items: def.items.map(\n        (x, i) => parseDef(x._def, {\n          ...refs,\n          currentPath: [...refs.currentPath, \"items\", `${i}`]\n        })\n      ).reduce(\n        (acc, x) => x === void 0 ? acc : [...acc, x],\n        []\n      )\n    };\n  }\n}\n\n// src/zod-to-json-schema/parsers/undefined.ts\nfunction parseUndefinedDef() {\n  return {\n    not: parseAnyDef()\n  };\n}\n\n// src/zod-to-json-schema/parsers/unknown.ts\nfunction parseUnknownDef() {\n  return parseAnyDef();\n}\n\n// src/zod-to-json-schema/parsers/readonly.ts\nvar parseReadonlyDef = (def, refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n\n// src/zod-to-json-schema/select-parser.ts\nvar selectParser = (def, typeName, refs) => {\n  switch (typeName) {\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodString:\n      return parseStringDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNumber:\n      return parseNumberDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodObject:\n      return parseObjectDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodBigInt:\n      return parseBigintDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodBoolean:\n      return parseBooleanDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodDate:\n      return parseDateDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodUndefined:\n      return parseUndefinedDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNull:\n      return parseNullDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodArray:\n      return parseArrayDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodUnion:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:\n      return parseUnionDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodIntersection:\n      return parseIntersectionDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodTuple:\n      return parseTupleDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodRecord:\n      return parseRecordDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodLiteral:\n      return parseLiteralDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodEnum:\n      return parseEnumDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNativeEnum:\n      return parseNativeEnumDef(def);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNullable:\n      return parseNullableDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodOptional:\n      return parseOptionalDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodMap:\n      return parseMapDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodSet:\n      return parseSetDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodLazy:\n      return () => def.getter()._def;\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodPromise:\n      return parsePromiseDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNaN:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodNever:\n      return parseNeverDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodEffects:\n      return parseEffectsDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodAny:\n      return parseAnyDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodUnknown:\n      return parseUnknownDef();\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodDefault:\n      return parseDefaultDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodBranded:\n      return parseBrandedDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodReadonly:\n      return parseReadonlyDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodCatch:\n      return parseCatchDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodPipeline:\n      return parsePipelineDef(def, refs);\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodFunction:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodVoid:\n    case zod_v3__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodSymbol:\n      return void 0;\n    default:\n      return /* @__PURE__ */ ((_) => void 0)(typeName);\n  }\n};\n\n// src/zod-to-json-schema/parse-def.ts\nfunction parseDef(def, refs, forceResolution = false) {\n  var _a;\n  const seenItem = refs.seen.get(def);\n  if (refs.override) {\n    const overrideResult = (_a = refs.override) == null ? void 0 : _a.call(\n      refs,\n      def,\n      refs,\n      seenItem,\n      forceResolution\n    );\n    if (overrideResult !== ignoreOverride) {\n      return overrideResult;\n    }\n  }\n  if (seenItem && !forceResolution) {\n    const seenSchema = get$ref(seenItem, refs);\n    if (seenSchema !== void 0) {\n      return seenSchema;\n    }\n  }\n  const newItem = { def, path: refs.currentPath, jsonSchema: void 0 };\n  refs.seen.set(def, newItem);\n  const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);\n  const jsonSchema2 = typeof jsonSchemaOrGetter === \"function\" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;\n  if (jsonSchema2) {\n    addMeta(def, refs, jsonSchema2);\n  }\n  if (refs.postProcess) {\n    const postProcessResult = refs.postProcess(jsonSchema2, def, refs);\n    newItem.jsonSchema = jsonSchema2;\n    return postProcessResult;\n  }\n  newItem.jsonSchema = jsonSchema2;\n  return jsonSchema2;\n}\nvar get$ref = (item, refs) => {\n  switch (refs.$refStrategy) {\n    case \"root\":\n      return { $ref: item.path.join(\"/\") };\n    case \"relative\":\n      return { $ref: getRelativePath(refs.currentPath, item.path) };\n    case \"none\":\n    case \"seen\": {\n      if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {\n        console.warn(\n          `Recursive reference detected at ${refs.currentPath.join(\n            \"/\"\n          )}! Defaulting to any`\n        );\n        return parseAnyDef();\n      }\n      return refs.$refStrategy === \"seen\" ? parseAnyDef() : void 0;\n    }\n  }\n};\nvar addMeta = (def, refs, jsonSchema2) => {\n  if (def.description) {\n    jsonSchema2.description = def.description;\n  }\n  return jsonSchema2;\n};\n\n// src/zod-to-json-schema/refs.ts\nvar getRefs = (options) => {\n  const _options = getDefaultOptions(options);\n  const currentPath = _options.name !== void 0 ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;\n  return {\n    ..._options,\n    currentPath,\n    propertyPath: void 0,\n    seen: new Map(\n      Object.entries(_options.definitions).map(([name, def]) => [\n        def._def,\n        {\n          def: def._def,\n          path: [..._options.basePath, _options.definitionPath, name],\n          // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n          jsonSchema: void 0\n        }\n      ])\n    )\n  };\n};\n\n// src/zod-to-json-schema/zod-to-json-schema.ts\nvar zodToJsonSchema = (schema, options) => {\n  var _a;\n  const refs = getRefs(options);\n  let definitions = typeof options === \"object\" && options.definitions ? Object.entries(options.definitions).reduce(\n    (acc, [name2, schema2]) => {\n      var _a2;\n      return {\n        ...acc,\n        [name2]: (_a2 = parseDef(\n          schema2._def,\n          {\n            ...refs,\n            currentPath: [...refs.basePath, refs.definitionPath, name2]\n          },\n          true\n        )) != null ? _a2 : parseAnyDef()\n      };\n    },\n    {}\n  ) : void 0;\n  const name = typeof options === \"string\" ? options : (options == null ? void 0 : options.nameStrategy) === \"title\" ? void 0 : options == null ? void 0 : options.name;\n  const main = (_a = parseDef(\n    schema._def,\n    name === void 0 ? refs : {\n      ...refs,\n      currentPath: [...refs.basePath, refs.definitionPath, name]\n    },\n    false\n  )) != null ? _a : parseAnyDef();\n  const title = typeof options === \"object\" && options.name !== void 0 && options.nameStrategy === \"title\" ? options.name : void 0;\n  if (title !== void 0) {\n    main.title = title;\n  }\n  const combined = name === void 0 ? definitions ? {\n    ...main,\n    [refs.definitionPath]: definitions\n  } : main : {\n    $ref: [\n      ...refs.$refStrategy === \"relative\" ? [] : refs.basePath,\n      refs.definitionPath,\n      name\n    ].join(\"/\"),\n    [refs.definitionPath]: {\n      ...definitions,\n      [name]: main\n    }\n  };\n  combined.$schema = \"http://json-schema.org/draft-07/schema#\";\n  return combined;\n};\n\n// src/zod-to-json-schema/index.ts\nvar zod_to_json_schema_default = zodToJsonSchema;\n\n// src/zod-schema.ts\nfunction zod3Schema(zodSchema2, options) {\n  var _a;\n  const useReferences = (_a = options == null ? void 0 : options.useReferences) != null ? _a : false;\n  return jsonSchema(\n    zod_to_json_schema_default(zodSchema2, {\n      $refStrategy: useReferences ? \"root\" : \"none\"\n    }),\n    {\n      validate: async (value) => {\n        const result = await zodSchema2.safeParseAsync(value);\n        return result.success ? { success: true, value: result.data } : { success: false, error: result.error };\n      }\n    }\n  );\n}\nfunction zod4Schema(zodSchema2, options) {\n  var _a;\n  const useReferences = (_a = options == null ? void 0 : options.useReferences) != null ? _a : false;\n  const z4JSONSchema = zod_v4__WEBPACK_IMPORTED_MODULE_3__.toJSONSchema(zodSchema2, {\n    target: \"draft-7\",\n    io: \"output\",\n    reused: useReferences ? \"ref\" : \"inline\"\n  });\n  return jsonSchema(z4JSONSchema, {\n    validate: async (value) => {\n      const result = await zod_v4__WEBPACK_IMPORTED_MODULE_4__.safeParseAsync(zodSchema2, value);\n      return result.success ? { success: true, value: result.data } : { success: false, error: result.error };\n    }\n  });\n}\nfunction isZod4Schema(zodSchema2) {\n  return \"_zod\" in zodSchema2;\n}\nfunction zodSchema(zodSchema2, options) {\n  if (isZod4Schema(zodSchema2)) {\n    return zod4Schema(zodSchema2, options);\n  } else {\n    return zod3Schema(zodSchema2, options);\n  }\n}\n\n// src/schema.ts\nvar schemaSymbol = Symbol.for(\"vercel.ai.schema\");\nfunction jsonSchema(jsonSchema2, {\n  validate\n} = {}) {\n  return {\n    [schemaSymbol]: true,\n    _type: void 0,\n    // should never be used directly\n    [validatorSymbol]: true,\n    jsonSchema: jsonSchema2,\n    validate\n  };\n}\nfunction isSchema(value) {\n  return typeof value === \"object\" && value !== null && schemaSymbol in value && value[schemaSymbol] === true && \"jsonSchema\" in value && \"validate\" in value;\n}\nfunction asSchema(schema) {\n  return schema == null ? jsonSchema({\n    properties: {},\n    additionalProperties: false\n  }) : isSchema(schema) ? schema : zodSchema(schema);\n}\n\n// src/uint8-utils.ts\nvar { btoa, atob } = globalThis;\nfunction convertBase64ToUint8Array(base64String) {\n  const base64Url = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const latin1string = atob(base64Url);\n  return Uint8Array.from(latin1string, (byte) => byte.codePointAt(0));\n}\nfunction convertUint8ArrayToBase64(array) {\n  let latin1string = \"\";\n  for (let i = 0; i < array.length; i++) {\n    latin1string += String.fromCodePoint(array[i]);\n  }\n  return btoa(latin1string);\n}\nfunction convertToBase64(value) {\n  return value instanceof Uint8Array ? convertUint8ArrayToBase64(value) : value;\n}\n\n// src/without-trailing-slash.ts\nfunction withoutTrailingSlash(url) {\n  return url == null ? void 0 : url.replace(/\\/$/, \"\");\n}\n\n// src/is-async-iterable.ts\nfunction isAsyncIterable(obj) {\n  return obj != null && typeof obj[Symbol.asyncIterator] === \"function\";\n}\n\n// src/types/execute-tool.ts\nasync function* executeTool({\n  execute,\n  input,\n  options\n}) {\n  const result = execute(input, options);\n  if (isAsyncIterable(result)) {\n    let lastOutput;\n    for await (const output of result) {\n      lastOutput = output;\n      yield { type: \"preliminary\", output };\n    }\n    yield { type: \"final\", output: lastOutput };\n  } else {\n    yield { type: \"final\", output: await result };\n  }\n}\n\n// src/index.ts\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@ai-sdk/provider/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AISDKError: () => (/* binding */ AISDKError),\n/* harmony export */   APICallError: () => (/* binding */ APICallError),\n/* harmony export */   EmptyResponseBodyError: () => (/* binding */ EmptyResponseBodyError),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidPromptError: () => (/* binding */ InvalidPromptError),\n/* harmony export */   InvalidResponseDataError: () => (/* binding */ InvalidResponseDataError),\n/* harmony export */   JSONParseError: () => (/* binding */ JSONParseError),\n/* harmony export */   LoadAPIKeyError: () => (/* binding */ LoadAPIKeyError),\n/* harmony export */   LoadSettingError: () => (/* binding */ LoadSettingError),\n/* harmony export */   NoContentGeneratedError: () => (/* binding */ NoContentGeneratedError),\n/* harmony export */   NoSuchModelError: () => (/* binding */ NoSuchModelError),\n/* harmony export */   TooManyEmbeddingValuesForCallError: () => (/* binding */ TooManyEmbeddingValuesForCallError),\n/* harmony export */   TypeValidationError: () => (/* binding */ TypeValidationError),\n/* harmony export */   UnsupportedFunctionalityError: () => (/* binding */ UnsupportedFunctionalityError),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   isJSONArray: () => (/* binding */ isJSONArray),\n/* harmony export */   isJSONObject: () => (/* binding */ isJSONObject),\n/* harmony export */   isJSONValue: () => (/* binding */ isJSONValue)\n/* harmony export */ });\n// src/errors/ai-sdk-error.ts\nvar marker = \"vercel.ai.error\";\nvar symbol = Symbol.for(marker);\nvar _a;\nvar _AISDKError = class _AISDKError extends Error {\n  /**\n   * Creates an AI SDK Error.\n   *\n   * @param {Object} params - The parameters for creating the error.\n   * @param {string} params.name - The name of the error.\n   * @param {string} params.message - The error message.\n   * @param {unknown} [params.cause] - The underlying cause of the error.\n   */\n  constructor({\n    name: name14,\n    message,\n    cause\n  }) {\n    super(message);\n    this[_a] = true;\n    this.name = name14;\n    this.cause = cause;\n  }\n  /**\n   * Checks if the given error is an AI SDK Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.\n   */\n  static isInstance(error) {\n    return _AISDKError.hasMarker(error, marker);\n  }\n  static hasMarker(error, marker15) {\n    const markerSymbol = Symbol.for(marker15);\n    return error != null && typeof error === \"object\" && markerSymbol in error && typeof error[markerSymbol] === \"boolean\" && error[markerSymbol] === true;\n  }\n};\n_a = symbol;\nvar AISDKError = _AISDKError;\n\n// src/errors/api-call-error.ts\nvar name = \"AI_APICallError\";\nvar marker2 = `vercel.ai.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar APICallError = class extends AISDKError {\n  constructor({\n    message,\n    url,\n    requestBodyValues,\n    statusCode,\n    responseHeaders,\n    responseBody,\n    cause,\n    isRetryable = statusCode != null && (statusCode === 408 || // request timeout\n    statusCode === 409 || // conflict\n    statusCode === 429 || // too many requests\n    statusCode >= 500),\n    // server error\n    data\n  }) {\n    super({ name, message, cause });\n    this[_a2] = true;\n    this.url = url;\n    this.requestBodyValues = requestBodyValues;\n    this.statusCode = statusCode;\n    this.responseHeaders = responseHeaders;\n    this.responseBody = responseBody;\n    this.isRetryable = isRetryable;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker2);\n  }\n};\n_a2 = symbol2;\n\n// src/errors/empty-response-body-error.ts\nvar name2 = \"AI_EmptyResponseBodyError\";\nvar marker3 = `vercel.ai.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar EmptyResponseBodyError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message = \"Empty response body\" } = {}) {\n    super({ name: name2, message });\n    this[_a3] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker3);\n  }\n};\n_a3 = symbol3;\n\n// src/errors/get-error-message.ts\nfunction getErrorMessage(error) {\n  if (error == null) {\n    return \"unknown error\";\n  }\n  if (typeof error === \"string\") {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return JSON.stringify(error);\n}\n\n// src/errors/invalid-argument-error.ts\nvar name3 = \"AI_InvalidArgumentError\";\nvar marker4 = `vercel.ai.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar InvalidArgumentError = class extends AISDKError {\n  constructor({\n    message,\n    cause,\n    argument\n  }) {\n    super({ name: name3, message, cause });\n    this[_a4] = true;\n    this.argument = argument;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker4);\n  }\n};\n_a4 = symbol4;\n\n// src/errors/invalid-prompt-error.ts\nvar name4 = \"AI_InvalidPromptError\";\nvar marker5 = `vercel.ai.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar InvalidPromptError = class extends AISDKError {\n  constructor({\n    prompt,\n    message,\n    cause\n  }) {\n    super({ name: name4, message: `Invalid prompt: ${message}`, cause });\n    this[_a5] = true;\n    this.prompt = prompt;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker5);\n  }\n};\n_a5 = symbol5;\n\n// src/errors/invalid-response-data-error.ts\nvar name5 = \"AI_InvalidResponseDataError\";\nvar marker6 = `vercel.ai.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar InvalidResponseDataError = class extends AISDKError {\n  constructor({\n    data,\n    message = `Invalid response data: ${JSON.stringify(data)}.`\n  }) {\n    super({ name: name5, message });\n    this[_a6] = true;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker6);\n  }\n};\n_a6 = symbol6;\n\n// src/errors/json-parse-error.ts\nvar name6 = \"AI_JSONParseError\";\nvar marker7 = `vercel.ai.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar JSONParseError = class extends AISDKError {\n  constructor({ text, cause }) {\n    super({\n      name: name6,\n      message: `JSON parsing failed: Text: ${text}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a7] = true;\n    this.text = text;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker7);\n  }\n};\n_a7 = symbol7;\n\n// src/errors/load-api-key-error.ts\nvar name7 = \"AI_LoadAPIKeyError\";\nvar marker8 = `vercel.ai.error.${name7}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar LoadAPIKeyError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message }) {\n    super({ name: name7, message });\n    this[_a8] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker8);\n  }\n};\n_a8 = symbol8;\n\n// src/errors/load-setting-error.ts\nvar name8 = \"AI_LoadSettingError\";\nvar marker9 = `vercel.ai.error.${name8}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\nvar LoadSettingError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message }) {\n    super({ name: name8, message });\n    this[_a9] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker9);\n  }\n};\n_a9 = symbol9;\n\n// src/errors/no-content-generated-error.ts\nvar name9 = \"AI_NoContentGeneratedError\";\nvar marker10 = `vercel.ai.error.${name9}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\nvar NoContentGeneratedError = class extends AISDKError {\n  // used in isInstance\n  constructor({\n    message = \"No content generated.\"\n  } = {}) {\n    super({ name: name9, message });\n    this[_a10] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker10);\n  }\n};\n_a10 = symbol10;\n\n// src/errors/no-such-model-error.ts\nvar name10 = \"AI_NoSuchModelError\";\nvar marker11 = `vercel.ai.error.${name10}`;\nvar symbol11 = Symbol.for(marker11);\nvar _a11;\nvar NoSuchModelError = class extends AISDKError {\n  constructor({\n    errorName = name10,\n    modelId,\n    modelType,\n    message = `No such ${modelType}: ${modelId}`\n  }) {\n    super({ name: errorName, message });\n    this[_a11] = true;\n    this.modelId = modelId;\n    this.modelType = modelType;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker11);\n  }\n};\n_a11 = symbol11;\n\n// src/errors/too-many-embedding-values-for-call-error.ts\nvar name11 = \"AI_TooManyEmbeddingValuesForCallError\";\nvar marker12 = `vercel.ai.error.${name11}`;\nvar symbol12 = Symbol.for(marker12);\nvar _a12;\nvar TooManyEmbeddingValuesForCallError = class extends AISDKError {\n  constructor(options) {\n    super({\n      name: name11,\n      message: `Too many values for a single embedding call. The ${options.provider} model \"${options.modelId}\" can only embed up to ${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`\n    });\n    this[_a12] = true;\n    this.provider = options.provider;\n    this.modelId = options.modelId;\n    this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;\n    this.values = options.values;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker12);\n  }\n};\n_a12 = symbol12;\n\n// src/errors/type-validation-error.ts\nvar name12 = \"AI_TypeValidationError\";\nvar marker13 = `vercel.ai.error.${name12}`;\nvar symbol13 = Symbol.for(marker13);\nvar _a13;\nvar _TypeValidationError = class _TypeValidationError extends AISDKError {\n  constructor({ value, cause }) {\n    super({\n      name: name12,\n      message: `Type validation failed: Value: ${JSON.stringify(value)}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a13] = true;\n    this.value = value;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker13);\n  }\n  /**\n   * Wraps an error into a TypeValidationError.\n   * If the cause is already a TypeValidationError with the same value, it returns the cause.\n   * Otherwise, it creates a new TypeValidationError.\n   *\n   * @param {Object} params - The parameters for wrapping the error.\n   * @param {unknown} params.value - The value that failed validation.\n   * @param {unknown} params.cause - The original error or cause of the validation failure.\n   * @returns {TypeValidationError} A TypeValidationError instance.\n   */\n  static wrap({\n    value,\n    cause\n  }) {\n    return _TypeValidationError.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError({ value, cause });\n  }\n};\n_a13 = symbol13;\nvar TypeValidationError = _TypeValidationError;\n\n// src/errors/unsupported-functionality-error.ts\nvar name13 = \"AI_UnsupportedFunctionalityError\";\nvar marker14 = `vercel.ai.error.${name13}`;\nvar symbol14 = Symbol.for(marker14);\nvar _a14;\nvar UnsupportedFunctionalityError = class extends AISDKError {\n  constructor({\n    functionality,\n    message = `'${functionality}' functionality not supported.`\n  }) {\n    super({ name: name13, message });\n    this[_a14] = true;\n    this.functionality = functionality;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker14);\n  }\n};\n_a14 = symbol14;\n\n// src/json-value/is-json.ts\nfunction isJSONValue(value) {\n  if (value === null || typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n    return true;\n  }\n  if (Array.isArray(value)) {\n    return value.every(isJSONValue);\n  }\n  if (typeof value === \"object\") {\n    return Object.entries(value).every(\n      ([key, val]) => typeof key === \"string\" && isJSONValue(val)\n    );\n  }\n  return false;\n}\nfunction isJSONArray(value) {\n  return Array.isArray(value) && value.every(isJSONValue);\n}\nfunction isJSONObject(value) {\n  return value != null && typeof value === \"object\" && Object.entries(value).every(\n    ([key, val]) => typeof key === \"string\" && isJSONValue(val)\n  );\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/provider/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ai-sdk/react/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@ai-sdk/react/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat),\n/* harmony export */   experimental_useObject: () => (/* binding */ experimental_useObject),\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useCompletion: () => (/* binding */ useCompletion)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ai */ \"(ssr)/./node_modules/ai/dist/index.mjs\");\n/* harmony import */ var throttleit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! throttleit */ \"(ssr)/./node_modules/throttleit/index.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! swr */ \"(ssr)/./node_modules/swr/dist/index/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ai */ \"(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\n\n// src/use-chat.ts\n\n\n// src/chat.react.ts\n\n\n// src/throttle.ts\n\nfunction throttle(fn, waitMs) {\n  return waitMs != null ? throttleit__WEBPACK_IMPORTED_MODULE_1__(fn, waitMs) : fn;\n}\n\n// src/chat.react.ts\nvar _messages, _status, _error, _messagesCallbacks, _statusCallbacks, _errorCallbacks, _callMessagesCallbacks, _callStatusCallbacks, _callErrorCallbacks;\nvar ReactChatState = class {\n  constructor(initialMessages = []) {\n    __privateAdd(this, _messages, void 0);\n    __privateAdd(this, _status, \"ready\");\n    __privateAdd(this, _error, void 0);\n    __privateAdd(this, _messagesCallbacks, /* @__PURE__ */ new Set());\n    __privateAdd(this, _statusCallbacks, /* @__PURE__ */ new Set());\n    __privateAdd(this, _errorCallbacks, /* @__PURE__ */ new Set());\n    this.pushMessage = (message) => {\n      __privateSet(this, _messages, __privateGet(this, _messages).concat(message));\n      __privateGet(this, _callMessagesCallbacks).call(this);\n    };\n    this.popMessage = () => {\n      __privateSet(this, _messages, __privateGet(this, _messages).slice(0, -1));\n      __privateGet(this, _callMessagesCallbacks).call(this);\n    };\n    this.replaceMessage = (index, message) => {\n      __privateSet(this, _messages, [\n        ...__privateGet(this, _messages).slice(0, index),\n        // We deep clone the message here to ensure the new React Compiler (currently in RC) detects deeply nested parts/metadata changes:\n        this.snapshot(message),\n        ...__privateGet(this, _messages).slice(index + 1)\n      ]);\n      __privateGet(this, _callMessagesCallbacks).call(this);\n    };\n    this.snapshot = (value) => structuredClone(value);\n    this[\"~registerMessagesCallback\"] = (onChange, throttleWaitMs) => {\n      const callback = throttleWaitMs ? throttle(onChange, throttleWaitMs) : onChange;\n      __privateGet(this, _messagesCallbacks).add(callback);\n      return () => {\n        __privateGet(this, _messagesCallbacks).delete(callback);\n      };\n    };\n    this[\"~registerStatusCallback\"] = (onChange) => {\n      __privateGet(this, _statusCallbacks).add(onChange);\n      return () => {\n        __privateGet(this, _statusCallbacks).delete(onChange);\n      };\n    };\n    this[\"~registerErrorCallback\"] = (onChange) => {\n      __privateGet(this, _errorCallbacks).add(onChange);\n      return () => {\n        __privateGet(this, _errorCallbacks).delete(onChange);\n      };\n    };\n    __privateAdd(this, _callMessagesCallbacks, () => {\n      __privateGet(this, _messagesCallbacks).forEach((callback) => callback());\n    });\n    __privateAdd(this, _callStatusCallbacks, () => {\n      __privateGet(this, _statusCallbacks).forEach((callback) => callback());\n    });\n    __privateAdd(this, _callErrorCallbacks, () => {\n      __privateGet(this, _errorCallbacks).forEach((callback) => callback());\n    });\n    __privateSet(this, _messages, initialMessages);\n  }\n  get status() {\n    return __privateGet(this, _status);\n  }\n  set status(newStatus) {\n    __privateSet(this, _status, newStatus);\n    __privateGet(this, _callStatusCallbacks).call(this);\n  }\n  get error() {\n    return __privateGet(this, _error);\n  }\n  set error(newError) {\n    __privateSet(this, _error, newError);\n    __privateGet(this, _callErrorCallbacks).call(this);\n  }\n  get messages() {\n    return __privateGet(this, _messages);\n  }\n  set messages(newMessages) {\n    __privateSet(this, _messages, [...newMessages]);\n    __privateGet(this, _callMessagesCallbacks).call(this);\n  }\n};\n_messages = new WeakMap();\n_status = new WeakMap();\n_error = new WeakMap();\n_messagesCallbacks = new WeakMap();\n_statusCallbacks = new WeakMap();\n_errorCallbacks = new WeakMap();\n_callMessagesCallbacks = new WeakMap();\n_callStatusCallbacks = new WeakMap();\n_callErrorCallbacks = new WeakMap();\nvar _state;\nvar Chat = class extends ai__WEBPACK_IMPORTED_MODULE_2__.AbstractChat {\n  constructor({ messages, ...init }) {\n    const state = new ReactChatState(messages);\n    super({ ...init, state });\n    __privateAdd(this, _state, void 0);\n    this[\"~registerMessagesCallback\"] = (onChange, throttleWaitMs) => __privateGet(this, _state)[\"~registerMessagesCallback\"](onChange, throttleWaitMs);\n    this[\"~registerStatusCallback\"] = (onChange) => __privateGet(this, _state)[\"~registerStatusCallback\"](onChange);\n    this[\"~registerErrorCallback\"] = (onChange) => __privateGet(this, _state)[\"~registerErrorCallback\"](onChange);\n    __privateSet(this, _state, state);\n  }\n};\n_state = new WeakMap();\n\n// src/use-chat.ts\nfunction useChat({\n  experimental_throttle: throttleWaitMs,\n  resume = false,\n  ...options\n} = {}) {\n  const chatRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(\n    \"chat\" in options ? options.chat : new Chat(options)\n  );\n  const shouldRecreateChat = \"chat\" in options && options.chat !== chatRef.current || \"id\" in options && chatRef.current.id !== options.id;\n  if (shouldRecreateChat) {\n    chatRef.current = \"chat\" in options ? options.chat : new Chat(options);\n  }\n  const optionsId = \"id\" in options ? options.id : null;\n  const subscribeToMessages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (update) => chatRef.current[\"~registerMessagesCallback\"](update, throttleWaitMs),\n    // optionsId is required to trigger re-subscription when the chat ID changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [throttleWaitMs, optionsId]\n  );\n  const messages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(\n    subscribeToMessages,\n    () => chatRef.current.messages,\n    () => chatRef.current.messages\n  );\n  const status = (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(\n    chatRef.current[\"~registerStatusCallback\"],\n    () => chatRef.current.status,\n    () => chatRef.current.status\n  );\n  const error = (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(\n    chatRef.current[\"~registerErrorCallback\"],\n    () => chatRef.current.error,\n    () => chatRef.current.error\n  );\n  const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (messagesParam) => {\n      if (typeof messagesParam === \"function\") {\n        messagesParam = messagesParam(chatRef.current.messages);\n      }\n      chatRef.current.messages = messagesParam;\n    },\n    [chatRef]\n  );\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (resume) {\n      chatRef.current.resumeStream();\n    }\n  }, [resume, chatRef]);\n  return {\n    id: chatRef.current.id,\n    messages,\n    setMessages,\n    sendMessage: chatRef.current.sendMessage,\n    regenerate: chatRef.current.regenerate,\n    clearError: chatRef.current.clearError,\n    stop: chatRef.current.stop,\n    error,\n    resumeStream: chatRef.current.resumeStream,\n    status,\n    addToolResult: chatRef.current.addToolResult\n  };\n}\n\n// src/use-completion.ts\n\n\n\nfunction useCompletion({\n  api = \"/api/completion\",\n  id,\n  initialCompletion = \"\",\n  initialInput = \"\",\n  credentials,\n  headers,\n  body,\n  streamProtocol = \"data\",\n  fetch: fetch2,\n  onFinish,\n  onError,\n  experimental_throttle: throttleWaitMs\n} = {}) {\n  const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n  const completionId = id || hookId;\n  const { data, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])([api, completionId], null, {\n    fallbackData: initialCompletion\n  });\n  const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n    [completionId, \"loading\"],\n    null\n  );\n  const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n  const completion = data;\n  const [abortController, setAbortController] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n    credentials,\n    headers,\n    body\n  });\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    extraMetadataRef.current = {\n      credentials,\n      headers,\n      body\n    };\n  }, [credentials, headers, body]);\n  const triggerRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (prompt, options) => (0,ai__WEBPACK_IMPORTED_MODULE_2__.callCompletionApi)({\n      api,\n      prompt,\n      credentials: extraMetadataRef.current.credentials,\n      headers: { ...extraMetadataRef.current.headers, ...options == null ? void 0 : options.headers },\n      body: {\n        ...extraMetadataRef.current.body,\n        ...options == null ? void 0 : options.body\n      },\n      streamProtocol,\n      fetch: fetch2,\n      // throttle streamed ui updates:\n      setCompletion: throttle(\n        (completion2) => mutate(completion2, false),\n        throttleWaitMs\n      ),\n      setLoading: mutateLoading,\n      setError,\n      setAbortController,\n      onFinish,\n      onError\n    }),\n    [\n      mutate,\n      mutateLoading,\n      api,\n      extraMetadataRef,\n      setAbortController,\n      onFinish,\n      onError,\n      setError,\n      streamProtocol,\n      fetch2,\n      throttleWaitMs\n    ]\n  );\n  const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    if (abortController) {\n      abortController.abort();\n      setAbortController(null);\n    }\n  }, [abortController]);\n  const setCompletion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (completion2) => {\n      mutate(completion2, false);\n    },\n    [mutate]\n  );\n  const complete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (prompt, options) => {\n      return triggerRequest(prompt, options);\n    },\n    [triggerRequest]\n  );\n  const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n  const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (event) => {\n      var _a;\n      (_a = event == null ? void 0 : event.preventDefault) == null ? void 0 : _a.call(event);\n      return input ? complete(input) : void 0;\n    },\n    [input, complete]\n  );\n  const handleInputChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (e) => {\n      setInput(e.target.value);\n    },\n    [setInput]\n  );\n  return {\n    completion,\n    complete,\n    error,\n    setCompletion,\n    stop,\n    input,\n    setInput,\n    handleInputChange,\n    handleSubmit,\n    isLoading\n  };\n}\n\n// src/use-object.ts\n\n\n\n\nvar getOriginalFetch = () => fetch;\nfunction useObject({\n  api,\n  id,\n  schema,\n  // required, in the future we will use it for validation\n  initialValue,\n  fetch: fetch2,\n  onError,\n  onFinish,\n  headers,\n  credentials\n}) {\n  const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n  const completionId = id != null ? id : hookId;\n  const { data, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n    [api, completionId],\n    null,\n    { fallbackData: initialValue }\n  );\n  const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n  const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    var _a;\n    try {\n      (_a = abortControllerRef.current) == null ? void 0 : _a.abort();\n    } catch (ignored) {\n    } finally {\n      setIsLoading(false);\n      abortControllerRef.current = null;\n    }\n  }, []);\n  const submit = async (input) => {\n    var _a;\n    try {\n      clearObject();\n      setIsLoading(true);\n      const abortController = new AbortController();\n      abortControllerRef.current = abortController;\n      const actualFetch = fetch2 != null ? fetch2 : getOriginalFetch();\n      const response = await actualFetch(api, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...headers\n        },\n        credentials,\n        signal: abortController.signal,\n        body: JSON.stringify(input)\n      });\n      if (!response.ok) {\n        throw new Error(\n          (_a = await response.text()) != null ? _a : \"Failed to fetch the response.\"\n        );\n      }\n      if (response.body == null) {\n        throw new Error(\"The response body is empty.\");\n      }\n      let accumulatedText = \"\";\n      let latestObject = void 0;\n      await response.body.pipeThrough(new TextDecoderStream()).pipeTo(\n        new WritableStream({\n          async write(chunk) {\n            accumulatedText += chunk;\n            const { value } = await (0,ai__WEBPACK_IMPORTED_MODULE_2__.parsePartialJson)(accumulatedText);\n            const currentObject = value;\n            if (!(0,ai__WEBPACK_IMPORTED_MODULE_2__.isDeepEqualData)(latestObject, currentObject)) {\n              latestObject = currentObject;\n              mutate(currentObject);\n            }\n          },\n          async close() {\n            setIsLoading(false);\n            abortControllerRef.current = null;\n            if (onFinish != null) {\n              const validationResult = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_4__.safeValidateTypes)({\n                value: latestObject,\n                schema: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_4__.asSchema)(schema)\n              });\n              onFinish(\n                validationResult.success ? { object: validationResult.value, error: void 0 } : { object: void 0, error: validationResult.error }\n              );\n            }\n          }\n        })\n      );\n    } catch (error2) {\n      if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_4__.isAbortError)(error2)) {\n        return;\n      }\n      if (onError && error2 instanceof Error) {\n        onError(error2);\n      }\n      setIsLoading(false);\n      setError(error2 instanceof Error ? error2 : new Error(String(error2)));\n    }\n  };\n  const clear = () => {\n    stop();\n    clearObject();\n  };\n  const clearObject = () => {\n    setError(void 0);\n    setIsLoading(false);\n    mutate(void 0);\n  };\n  return {\n    submit,\n    object: data,\n    error,\n    isLoading,\n    stop,\n    clear\n  };\n}\nvar experimental_useObject = useObject;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ai-sdk/react/dist/index.mjs\n");

/***/ })

};
;